<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Channel</title>
    <url>/computer-science/golang/Channel/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a id="more"></a></p>]]></content>
  </entry>
  <entry>
    <title>Golang锁机制</title>
    <url>/computer-science/golang/Golang%E9%94%81%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a id="more"></a></p>]]></content>
  </entry>
  <entry>
    <title>golang并发</title>
    <url>/computer-science/golang/golang%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="goroutine"><a class="anchor" href="#goroutine">#</a> goroutine</h3><h4 id="线程"><a class="anchor" href="#线程">#</a> 线程</h4><p>线程是操作系统进行运算调度的最小单位，它是操作系统内核进行调度的，可以将其理解为 “轻量级进程”。但是无论如何，作为一个内核态的调度，控制权限从线程 A 到线程 B 需要经历一个完整的内核态上下文切换。而 Go 语言的调度器不需要切换到内核语境，由它的语言结构完成线程的调度。这在很大程度上节省了无用的时间开销。</p><h4 id="goroutine用法"><a class="anchor" href="#goroutine用法">#</a> goroutine 用法</h4><p>使用 “go” 关键词即可以创建一个 goroutine。go Function (param1, …) 将会在相同的地址空间运行这个函数，并实现函数的并发操作。<br>goroutine 有些类似于协程，但一般来说，协程是不支持并发的，而 goroutine 是支持并发操作的，一个简单的用法如下：</p><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> main</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token string">"fmt"</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token string">"time"</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">func</span> <span class="token function">test_loop</span><span class="token punctuation">(</span>id <span class="token builtin">string</span><span class="token punctuation">,</span> times <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s: Time %d"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">go</span> <span class="token function">test_loop</span><span class="token punctuation">(</span><span class="token string">"ID 1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 启动一个 goroutine</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token comment">// 让主程序休眠一秒</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>注意，如果没有让主程序休眠一秒，那么有可能在 goroutine 执行完前主线程已经终止，从而使得 goroutine 没有执行完成就被迫终止。</p><h3 id="通道"><a class="anchor" href="#通道">#</a> 通道</h3><p>通道是 goroutine 直接的连接方式，是可以让一个 goroutine 发送特定值到另一个 goroutine 的通信机制，每一个通道都有一个具体的对应类型。创建一个通道的语法如下：</p><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// 创建一个 chan int 类型的无缓冲通道</span></pre></td></tr><tr><td data-num="2"></td><td><pre>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 创建一个 chan int 类型的无缓冲通道</span></pre></td></tr><tr><td data-num="3"></td><td><pre>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 创建一个容量为 10 的 chan int 类型的缓冲通道</span></pre></td></tr></table></figure><p>通道主要支持三种操作，分别为发送，接收和关闭，其语法如下：</p><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre>ch <span class="token operator">&lt;-</span> x <span class="token comment">// 发送</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>x <span class="token operator">=</span> <span class="token operator">&lt;-</span> ch <span class="token comment">// 接收并赋值</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;-</span> ch <span class="token comment">// 接收并丢弃</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token comment">// 关闭</span></pre></td></tr></table></figure><p>利用通道，我们可以实现 goroutine 间的连接，形成一个管道（pipeline），使得 goroutine 间能够互相通信。</p><h4 id="单向通道"><a class="anchor" href="#单向通道">#</a> 单向通道</h4><p>在实际使用中，多数情况下一个通道只需完成发送或者接收中的一个功能。为了安全性问题，GO 语言也提供了单向通道类型。例如在下面生产者和消费者的示例中，生产者只负责发送数据给通道，而消费者只负责从通道中取出数据，它们的代码分别如下：</p><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 生产者</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">func</span> <span class="token function">producer</span><span class="token punctuation">(</span>data <span class="token builtin">string</span><span class="token punctuation">,</span> channel <span class="token keyword">chan</span> <span class="token operator">&lt;-</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 类型 chan &lt;- string 是一个只能发送数据的通道</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">...</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 消费者</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">func</span> <span class="token function">consumer</span><span class="token punctuation">(</span>channel <span class="token operator">&lt;-</span> <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 类型 & lt;- chan string 是一个只能接收数据的通道</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token operator">...</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="事例"><a class="anchor" href="#事例">#</a> 事例</h3><p>我们可以用 goroutine 和 channel 能模拟一个生产者和消费者的情景，生产者可以无限循环产生新的数据到 channel 中，而消费者可以通过无限循环来从 channel 中获取数据。<br>生产者函数如下：</p><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 生产者函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">func</span> <span class="token function">producer</span><span class="token punctuation">(</span>data <span class="token builtin">string</span><span class="token punctuation">,</span> channel <span class="token keyword">chan</span> <span class="token operator">&lt;-</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token comment">// 生产者开始生产</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     <span class="token keyword">for</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token comment">// 将随机数和字符串格式化为字符串发送给通道</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Produced: %s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            channel <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>消费者函数如下：</p><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 消费者函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">func</span> <span class="token function">consumer</span><span class="token punctuation">(</span>channel <span class="token operator">&lt;-</span> <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token comment">// 消费者开始消费</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     <span class="token keyword">for</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token comment">// 从通道中取出数据，此处会阻塞直到信道中返回数据</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            data <span class="token operator">:=</span> <span class="token operator">&lt;-</span> channel</pre></td></tr><tr><td data-num="7"></td><td><pre>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Consumed: %s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>利用 goroutine，我们无需像操作系统中的做法，在生产者和消费者间添加各种互斥锁，也不需要我们手动去实现对信道的阻塞。例如，在执行 “message := &lt;- channel” 时，程序从 channel 中取出数据时，会使自己处于阻塞态直到 channel 中返回数据。</p><p>这样，我们就可以实现一个 “生产者与消费者” 的经典问题，即父亲每秒生产一个苹果到盘子中，母亲每秒生产一个香蕉到盘子中，儿子当盘中有水果时，就会按水果生产的水果将水果吃掉。主函数如下：</p><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    channel <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 创建父亲生产者和母亲生产者</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">go</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> channel<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">go</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">,</span> channel<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 消费者开始消费</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function">consumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>输出结果</p><pre><code>Produced: banana
Produced: apple
Consumed: banana
Consumed: apple
Produced: banana
Consumed: banana
...
</code></pre><h3 id="总结"><a class="anchor" href="#总结">#</a> 总结</h3><p>利用 channel 可以实现不同协程之间的通信，golang 提倡 “share memory by communicating” 而不是 “communicate by sharing memory”，这样可以避免竞争状况下复杂的互斥锁机制。</p><p>goroutine 使得用户能在用户态实现一个轻量级的 “线程创建”，而通道则负责完成这些 goroutine 间的通信。通道的独写操作类似于操作系统下 P/V 信号量，让系统无须陷入内核态就可以完成协程间的通信。</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go内存管理</title>
    <url>/computer-science/golang/Go%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a id="more"></a></p>]]></content>
  </entry>
  <entry>
    <title>golang中什么时候使用指针</title>
    <url>/computer-science/golang/golang%E4%B8%AD%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>什么是指针：即一个指针变量指向一个值的内存地址。</p><h3 id="使用值类型和指针类型的区别"><a class="anchor" href="#使用值类型和指针类型的区别">#</a> 使用值类型和指针类型的区别</h3><p>首先，我们来看一个计算面积的代码，如下所示。</p><pre><code class="language-Go">package main

import (
	&quot;fmt&quot;
)

type Rect struct {                               //定义一个结构体
    width  float64
    length float64
}

func (rect Rect) area() float64 {               //定义一个方法，按值传递
	return rect.width * rect.length
}

func (rect *Rect) area1() float64 {            //定义一个方法，按指针传递
    rect.width *= 2
    rect.length *= 2
    return rect.width * rect.length
}

func main() {
    var rect = new(Rect)     //使用new函数创建一个结构体指针rect，也就是说rect的类型是*Rect
    rect.width = 100
    rect.length = 200
    fmt.Println(&quot;Width:&quot;, rect.width, &quot;Length:&quot;, rect.length,&quot;Area:&quot;, rect.area())  //通过结构体指针类型的变量调用area()方法
    fmt.Println(&quot;Width:&quot;, rect.width, &quot;Length:&quot;, rect.length,&quot;Area:&quot;, rect.area1())
}
</code></pre><p>在 Go 语言中，默认是按值传递。当一个变量当作参数传递的时候，会创建一个变量的副本，然后传递给函数或者方法，你可以看到这个副本的地址和变量的地址是不一样的。当变量当做指针被传递的时候，一个新的指针被创建，它指向变量同样的内存地址，所以你可以将这个指针看成原始变量指针的副本。</p><h3 id="故此"><a class="anchor" href="#故此">#</a> 故此</h3><p>1. 是否使用结构体指针，取决于是否要在函数内部改变传递进来的参数的值。如果你的 struct 足够大，使用指针可以加快效率。如果不使用指针，在函数内部则无法修改 struct 中的值。<br>2. 结构体赋值默认是按值传递，你要改变原来的那个值，要使用指针（即如果你要修改对象本身，那就要传指针，否则修改的是副本）。</p><h3 id="go什么情况下使用指针"><a class="anchor" href="#go什么情况下使用指针">#</a> go 什么情况下使用指针</h3><p>1. 推荐在方法上使用指针（前提是这个类型不是 map、slice 等引用类型）<br>2. 当结构体较大的时候使用指针会更高效，可以避免内存拷贝，“结构较大” 到底多大才算大可能需要自己或团队衡量，如超过 5 个字段或者根据结构体内存占用来计算<br>3. 如果要修改结构体内部的数据或状态必须使用指针<br>4. 如果方法的 receiver 是 map、slice 、channel 等引用类型不要使用指针<br>5. 小数据类型如 bool、int 等没必要使用指针传递<br>6. 如果该函数会修改 receiver 或变量等，使用指针</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang接口理解与使用</title>
    <url>/computer-science/golang/golang%E6%8E%A5%E5%8F%A3%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="interface是一种类型"><a class="anchor" href="#interface是一种类型">#</a> interface 是一种类型</h3><p>首先 interface 是一种类型，从它的定义可以看出来用了 type 关键字，更准确的说 interface 是一种具有一组方法的类型，这些方法定义了 interface 的行为</p><p>go 允许不带任何方法的 interface ，这种类型的 interface 叫 empty interface</p><h3 id="interface-变量存储的是实现者的值"><a class="anchor" href="#interface-变量存储的是实现者的值">#</a> interface 变量存储的是实现者的值</h3><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//1</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">type</span> I <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    </pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">Set</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">//2</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">type</span> S <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    Age <span class="token builtin">int</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">func</span><span class="token punctuation">(</span>s S<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>Age</pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>S<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    s<span class="token punctuation">.</span>Age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">//3</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>i I<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    i<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    s <span class="token operator">:=</span> S<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span>  <span class="token comment">//4</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这段代码在 #1 定义了 interface I，在 #2 用 struct S 实现了 I 定义的两个方法，接着在 #3 定义了一个函数 f 参数类型是 I，S 实现了 I 的两个方法就说 S 是 I 的实现者，执行 f (&amp;s) 就完了一次 interface 类型的使用。</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang的继承</title>
    <url>/computer-science/golang/golang%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>对于 go 语言的继承，之前总是模模糊糊的分不清是什么。不知道如何通过何种方式来继承的。<br>然后我就开始对照着 java 的方式，用 java 实现继承，然后用 go 语言实现同样的继承。</p><h4 id="java的继承"><a class="anchor" href="#java的继承">#</a> Java 的继承</h4><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 动物类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span>   <span class="token class-name">String</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">String</span> subject<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"喜欢吃："</span> <span class="token operator">+</span> food <span class="token operator">+</span> <span class="token string">",它属于："</span> <span class="token operator">+</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 猫类。 猫类继承动物类</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 猫自己的属性和方法</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"今年"</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"岁了，特别喜欢睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token comment">// 创建一个动物实例</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"动物"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        a<span class="token punctuation">.</span>subject <span class="token operator">=</span> <span class="token string">"动物科"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"肉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token comment">// 创建一个猫实例</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        cat<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"咪咪"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        cat<span class="token punctuation">.</span>subject <span class="token operator">=</span> <span class="token string">"猫科"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        cat<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        cat<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><pre><code>输出结果入下：
    动物喜欢吃：肉,它属于：动物科
    咪咪喜欢吃：鱼,它属于：猫科
    咪咪今年1岁了，特别喜欢睡觉
</code></pre><h4 id="golang的继承"><a class="anchor" href="#golang的继承">#</a> golang 的继承</h4><pre><code class="language-Go">package main

import (
  &quot;fmt&quot;
  &quot;strconv&quot;
)

// 动物类
type Animal struct {
  name string
  subject string
}

// 动物的公共方法
func (a *Animal) eat(food string) {
  fmt.Println(a.name + &quot;喜欢吃：&quot; + food +&quot;,它属于:&quot; + a.subject)
}

// 猫类，继承动物类
type Cat struct {
  // 继承动物的属性和方法
  Animal
  // 猫自己的属性
  age int
}

// 猫类独有的方法
func (c Cat) sleep() {
  fmt.Println(c.name + &quot; 今年&quot; + strconv.Itoa(c.age) + &quot;岁了,特别喜欢睡觉&quot;)
}

func main() {
  // 创建一个动物类
  animal := Animal{name:&quot;动物&quot;, subject:&quot;动物科&quot;}
  animal.eat(&quot;肉&quot;)

  // 创建一个猫类
  cat := Cat{Animal: Animal{name:&quot;咪咪&quot;, subject:&quot;猫科&quot;},age:1}
  cat.eat(&quot;鱼&quot;)
  cat.sleep()
}
</code></pre><pre><code>输出结果：
    动物喜欢吃：肉,它属于:动物科
    咪咪喜欢吃：鱼,它属于:猫科
    咪咪 今年1岁了,特别喜欢睡觉
</code></pre><h4 id="总结"><a class="anchor" href="#总结">#</a> 总结</h4><ol><li>在 go 语言中， type name struct {} 结构体 就相当于其他语言中的 class 类的概念。</li><li>在其他语言中，方法是直接写在在 类 里面的，而在 go 语言中，我们对于该结构体，如果存在方法，比如猫咪存在睡觉的方法那么是以 func (结构体名) 方法名 {}，即 func (c Cat) sleep {} 的方式来声明方法。</li><li>在 java 中， string + int = string，int 类型的值不需要类型转换，而在 go 语言中，string + int，如果想要一个字符串，则需要对 int 类型的值转换为 string 类型，然后才能拼接。</li></ol><h4 id="理解"><a class="anchor" href="#理解">#</a> 理解</h4><ol><li>结构体解决的是基本数据类型不能满足我们日常需要的问题。再简单点理解就是一个结构体就是一个 json 类型的 object。</li><li>接口是一种类型。是一种特殊的类型，它规定了不同结构体有哪些相同的行为，只是制定标准，而不实现标准。就好比自来水厂只规定水龙头的半径大小，而不去考虑谁生产水龙头，生产水龙头的厂家不管用什么材料，只需要按照自来水厂的标准制定就好。</li></ol>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Mixin</title>
    <url>/computer-science/python/Mixin/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a id="more"></a></p>]]></content>
  </entry>
  <entry>
    <title>Go实现TCP聊天室</title>
    <url>/computer-science/golang/Go%E5%AE%9E%E7%8E%B0TCP%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="目录结构"><a class="anchor" href="#目录结构">#</a> 目录结构</h3><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/Go%E5%AE%9E%E7%8E%B0TCP%E8%81%8A%E5%A4%A9%E5%AE%A4/1.png" alt="目录结构"></p><h3 id="servergo"><a class="anchor" href="#servergo">#</a> server.go</h3><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> main</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token string">"fmt"</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token string">"net"</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> userIP <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>		<span class="token comment">// 创建一个新的切片</span></pre></td></tr><tr><td data-num="13"></td><td><pre>		buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>		<span class="token comment">//fmt.Printf ("服务器在等待客户端 % s 发送信息 \n", conn.RemoteAddr ().String ())</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>		<span class="token comment">// 等待客户端发送信息</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		n<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"服务器退出, err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>			<span class="token keyword">return</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v: %v"</span><span class="token punctuation">,</span>userIP<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>		<span class="token comment">//reader := bufio.NewReader(os.Stdin)</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"服务器开始监听"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>	listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"0.0.0.0:6666"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"listen err = "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>	<span class="token keyword">defer</span> listen<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"等待客户端来连接"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>		conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listen<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Accept() err = "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>			<span class="token keyword">return</span></pre></td></tr><tr><td data-num="44"></td><td><pre>		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Accept suc con=%v, 客户端IP=%v"</span><span class="token punctuation">,</span> conn<span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>		<span class="token comment">// 起一个协程，为客户端服务</span></pre></td></tr><tr><td data-num="49"></td><td><pre>		<span class="token keyword">go</span> <span class="token function">process</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="clientgo"><a class="anchor" href="#clientgo">#</a> client.go</h3><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> main</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token string">"bufio"</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token string">"fmt"</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token string">"net"</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token string">"os"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token string">"strings"</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:6666"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token comment">// 客户端可以发送单行数据，然后就退出</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>		<span class="token comment">// 读入一行输入</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"readString err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>		line <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">" \r\n"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>		<span class="token keyword">if</span> line <span class="token operator">==</span> <span class="token string">"exit"</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"客户端退出"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>			<span class="token keyword">break</span></pre></td></tr><tr><td data-num="29"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>		<span class="token comment">// 发送到服务器</span></pre></td></tr><tr><td data-num="31"></td><td><pre>		<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Write err = "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>		<span class="token comment">//fmt.Printf ("客户端发送了 % d 字节的数据 \n", n)</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Python UDP打洞测试</title>
    <url>/computer-science/python/Python%20UDP%E6%89%93%E6%B4%9E%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>UDP 打洞实现了私有网络中的 Internet 主机之间建立双向 UDP 连接的方法。不过由于 NAT 的行为是非标准化的，这方法不能应用于所有类型的 NAT。</p><p>基本上就是让位于 NAT 后的两台主机都连上某个拥有 Public IP 的伺服器，当两个主机与服务器建立好 UDP 连线后，转成直接连线来传送资料，其原理简单来说是让 NAT 以为他连线的是原本的那台服务器主机。</p><p>下面是我用了 python 来实验 UDP 打洞的原始码。</p><h3 id="serverpy"><a class="anchor" href="#serverpy">#</a> <span class="exturl" data-url="aHR0cDovL1NlcnZlci5weQ==">Server.py</span></h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> socket</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 建立 UDP Scoket</span></pre></td></tr><tr><td data-num="4"></td><td><pre>server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># 监听所有 IP 的 3386 端口</span></pre></td></tr><tr><td data-num="6"></td><td><pre>listen_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">3386</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>listen_addr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># 储存 IP 用的 Array</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ips <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment"># 接收数据</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    data<span class="token punctuation">,</span> addr <span class="token operator">=</span> server<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token string">'is connected.'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment"># 將 Client IP:Port 儲存到 Array 內</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    ips<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment"># 当第二个 client 连上時，進行 IP 交換動作</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ips<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        dest <span class="token operator">=</span> <span class="token string">''</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">for</span> ip <span class="token keyword">in</span> ips<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token keyword">for</span> i <span class="token keyword">in</span> ips<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token keyword">if</span> ip <span class="token operator">!=</span> i<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                    dest <span class="token operator">=</span> i  <span class="token comment"># 对方的 IP</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token comment"># 將 A 的 IP 传給 B，B 的 IP 传給 A</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                    server<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>dest<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>ip<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>ip<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="clientapy"><a class="anchor" href="#clientapy">#</a> <span class="exturl" data-url="aHR0cDovL0NsaWVudEEucHk=">ClientA.py</span></h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> socket</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>data <span class="token operator">=</span> <span class="token string">'hello world A'</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># 先连线到公开的服务器</span></pre></td></tr><tr><td data-num="10"></td><td><pre>addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"120.78.222.167"</span><span class="token punctuation">,</span> <span class="token number">3386</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">def</span> <span class="token function">threaded_function</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Send '</span> <span class="token punctuation">,</span> i <span class="token punctuation">,</span><span class="token string">'to '</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        client<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span><span class="token string">b'i'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>arg<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>client<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment"># 接收返回的主机 IP</span></pre></td></tr><tr><td data-num="22"></td><td><pre>dest<span class="token punctuation">,</span>adr <span class="token operator">=</span> client<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>dest<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">#发送数据开始打洞</span></pre></td></tr><tr><td data-num="26"></td><td><pre>client<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span><span class="token string">b'ping'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>dest<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>dest<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>thread <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target <span class="token operator">=</span> threaded_function<span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">(</span>dest<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    data<span class="token punctuation">,</span>adr <span class="token operator">=</span> client<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Recv：'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token string">'from：'</span><span class="token punctuation">,</span>adr<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="clientbpy"><a class="anchor" href="#clientbpy">#</a> <span class="exturl" data-url="aHR0cDovL0NsaWVudEIucHk=">ClientB.py</span></h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> socket</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>data <span class="token operator">=</span> <span class="token string">'hello world B'</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># 先连线到公开的服务器</span></pre></td></tr><tr><td data-num="10"></td><td><pre>addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"120.78.222.167"</span><span class="token punctuation">,</span> <span class="token number">3386</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">def</span> <span class="token function">threaded_function</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Send '</span> <span class="token punctuation">,</span> i <span class="token punctuation">,</span><span class="token string">'to '</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        client<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span><span class="token string">b'i'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>arg<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>client<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment"># 接收返回的主机 IP</span></pre></td></tr><tr><td data-num="22"></td><td><pre>dest<span class="token punctuation">,</span>adr <span class="token operator">=</span> client<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>dest<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">#发送数据开始打洞</span></pre></td></tr><tr><td data-num="26"></td><td><pre>client<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span><span class="token string">b'ping'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>dest<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>dest<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>thread <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target <span class="token operator">=</span> threaded_function<span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">(</span>dest<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    data<span class="token punctuation">,</span>adr <span class="token operator">=</span> client<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Recv：'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token string">'from：'</span><span class="token punctuation">,</span>adr<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="测试结果"><a class="anchor" href="#测试结果">#</a> 测试结果</h3><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/UDP%E6%89%93%E6%B4%9E%E6%B5%8B%E8%AF%95/result.png" alt=""><br><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/UDP%E6%89%93%E6%B4%9E%E6%B5%8B%E8%AF%95/result2.png" alt=""></p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pipenv管理Python虚拟环境</title>
    <url>/computer-science/python/Pipenv%E7%AE%A1%E7%90%86Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a id="more"></a></p><h2 id="安装pipenv"><a class="anchor" href="#安装pipenv">#</a> 安装 pipenv</h2><p>首先，确保你已经正确安装 python3 和 pip3</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou ~<span class="token punctuation">]</span><span class="token comment"># python3 -V</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Python <span class="token number">3.7</span>.2</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou ~<span class="token punctuation">]</span><span class="token comment"># pip3 -V</span></pre></td></tr><tr><td data-num="4"></td><td><pre>pip <span class="token number">19.0</span>.1 from /usr/local/python3/lib/python3.7/site-packages/pip <span class="token punctuation">(</span>python <span class="token number">3.7</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou ~<span class="token punctuation">]</span><span class="token comment">#</span></pre></td></tr></table></figure><p>然后，Linux 下 pip3 install pipenv</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou ~<span class="token punctuation">]</span><span class="token comment"># pip3 install pipenv</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Looking <span class="token keyword">in</span> indexes: http://mirrors.aliyun.com/pypi/simple/</pre></td></tr><tr><td data-num="3"></td><td><pre>Collecting pipenv</pre></td></tr><tr><td data-num="4"></td><td><pre>  Downloading http://mirrors.aliyun.com/pypi/packages/13/b4/3ffa55f77161cff9a5220f162670f7c5eb00df52e00939e203f601b0f579/pipenv-2018.11.26-py3-none-any.whl <span class="token punctuation">(</span><span class="token number">5</span>.2MB<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token number">100</span>% <span class="token operator">|</span>████████████████████████████████<span class="token operator">|</span> <span class="token number">5</span>.2MB <span class="token number">4</span>.0MB/s</pre></td></tr><tr><td data-num="6"></td><td><pre>Requirement already satisfied: certifi <span class="token keyword">in</span> /usr/local/python3/lib/python3.7/site-packages <span class="token punctuation">(</span>from pipenv<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2018.11</span>.29<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Requirement already satisfied: setuptools<span class="token operator">></span><span class="token operator">=</span><span class="token number">36.2</span>.1 <span class="token keyword">in</span> /usr/local/python3/lib/python3.7/site-packages <span class="token punctuation">(</span>from pipenv<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">40.6</span>.2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Requirement already satisfied: pip<span class="token operator">></span><span class="token operator">=</span><span class="token number">9.0</span>.1 <span class="token keyword">in</span> /usr/local/python3/lib/python3.7/site-packages <span class="token punctuation">(</span>from pipenv<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">18.1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>Requirement already satisfied: virtualenv <span class="token keyword">in</span> /usr/local/python3/lib/python3.7/site-packages <span class="token punctuation">(</span>from pipenv<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">16.2</span>.0<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>Requirement already satisfied: virtualenv-clone<span class="token operator">></span><span class="token operator">=</span><span class="token number">0.2</span>.5 <span class="token keyword">in</span> /usr/local/python3/lib/python3.7/site-packages <span class="token punctuation">(</span>from pipenv<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">0.4</span>.0<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>Installing collected packages: pipenv</pre></td></tr><tr><td data-num="12"></td><td><pre>Successfully installed pipenv-2018.11.26</pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou ~<span class="token punctuation">]</span><span class="token comment">#</span></pre></td></tr></table></figure><p>pipenv 依赖 psutil, virtualenv-clone, pew, certifi, urllib3, chardet, requests, mccabe, pyflakes, pycodestyle, flake8 等第三方模块</p><h2 id="pipfile和pipfilelock"><a class="anchor" href="#pipfile和pipfilelock">#</a> Pipfile 和 Pipfile.lock</h2><h3 id="pipfile-简明地显示项目环境和依赖包"><a class="anchor" href="#pipfile-简明地显示项目环境和依赖包">#</a> Pipfile, 简明地显示项目环境和依赖包</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span><span class="token punctuation">[</span>source<span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>name <span class="token operator">=</span> <span class="token string">"pypi"</span></pre></td></tr><tr><td data-num="3"></td><td><pre>url <span class="token operator">=</span> <span class="token string">"https://mirrors.aliyun.com/pypi/simple/"</span>  <span class="token comment"># 指定国内 pip 源，不然会慢死人的</span></pre></td></tr><tr><td data-num="4"></td><td><pre>verify_ssl <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span>dev-packages<span class="token punctuation">]</span>  <span class="token comment"># 开发环境</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">[</span>packages<span class="token punctuation">]</span>  <span class="token comment"># 生产环境</span></pre></td></tr><tr><td data-num="9"></td><td><pre>requests <span class="token operator">=</span> <span class="token string">"*"</span>  <span class="token comment"># * 表示最新版本</span></pre></td></tr><tr><td data-num="10"></td><td><pre>django <span class="token operator">=</span> <span class="token string">"*"</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">[</span>requires<span class="token punctuation">]</span>  </pre></td></tr><tr><td data-num="13"></td><td><pre>python_version <span class="token operator">=</span> <span class="token string">"3.7"</span>  <span class="token comment"># python 版本</span></pre></td></tr></table></figure><h3 id="pipfilelock-详细记录环境依赖并且利用了hash算法保证了它完整对应关系"><a class="anchor" href="#pipfilelock-详细记录环境依赖并且利用了hash算法保证了它完整对应关系">#</a> Pipfile.lock, 详细记录环境依赖，并且利用了 Hash 算法保证了它完整对应关系</h3><figure class="highlight ini"><figcaption data-lang="ini"></figcaption><table><tr><td data-num="1"></td><td><pre>&#123;</pre></td></tr><tr><td data-num="2"></td><td><pre>    "_meta": &#123;</pre></td></tr><tr><td data-num="3"></td><td><pre>        "hash": &#123;</pre></td></tr><tr><td data-num="4"></td><td><pre>            "sha256": "d737a1ef2f8b591f86cd0fa6a8cb48918f742d60df2a394ebc3d23aff4748999"</pre></td></tr><tr><td data-num="5"></td><td><pre>        &#125;,</pre></td></tr><tr><td data-num="6"></td><td><pre>        "pipfile-spec": 6,</pre></td></tr><tr><td data-num="7"></td><td><pre>        "requires": &#123;</pre></td></tr><tr><td data-num="8"></td><td><pre>            "python_version": "3.7"</pre></td></tr><tr><td data-num="9"></td><td><pre>        &#125;,</pre></td></tr><tr><td data-num="10"></td><td><pre>        "sources": [</pre></td></tr><tr><td data-num="11"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num="12"></td><td><pre>                "name": "pypi",</pre></td></tr><tr><td data-num="13"></td><td><pre>                "url": "https://pypi.org/simple",</pre></td></tr><tr><td data-num="14"></td><td><pre>                "verify_ssl": true</pre></td></tr><tr><td data-num="15"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num="16"></td><td><pre>        ]</pre></td></tr><tr><td data-num="17"></td><td><pre>    &#125;,</pre></td></tr><tr><td data-num="18"></td><td><pre>    "default": &#123;</pre></td></tr><tr><td data-num="19"></td><td><pre>        "certifi": &#123;</pre></td></tr><tr><td data-num="20"></td><td><pre>            "hashes": [</pre></td></tr><tr><td data-num="21"></td><td><pre>                "sha256:47f9c83ef4c0c621eaef743f133f09fa8a74a9b75f037e8624f83bd1b6626cb7",</pre></td></tr><tr><td data-num="22"></td><td><pre>                "sha256:993f830721089fef441cdfeb4b2c8c9df86f0c63239f06bd025a76a7daddb033"</pre></td></tr><tr><td data-num="23"></td><td><pre>            ],</pre></td></tr><tr><td data-num="24"></td><td><pre>            "version": "<span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">=</span>2018.11.29"</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        &#125;,</pre></td></tr><tr><td data-num="26"></td><td><pre>        "chardet": &#123;</pre></td></tr><tr><td data-num="27"></td><td><pre>            "hashes": [</pre></td></tr><tr><td data-num="28"></td><td><pre>                "sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae",</pre></td></tr><tr><td data-num="29"></td><td><pre>                "sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691"</pre></td></tr><tr><td data-num="30"></td><td><pre>            ],</pre></td></tr><tr><td data-num="31"></td><td><pre>            "version": "<span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">=</span>3.0.4"</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        &#125;,</pre></td></tr><tr><td data-num="33"></td><td><pre>        "django": &#123;</pre></td></tr><tr><td data-num="34"></td><td><pre>            "hashes": [</pre></td></tr><tr><td data-num="35"></td><td><pre>                "sha256:a32c22af23634e1d11425574dce756098e015a165be02e4690179889b207c7a8",</pre></td></tr><tr><td data-num="36"></td><td><pre>                "sha256:d6393918da830530a9516bbbcbf7f1214c3d733738779f06b0f649f49cc698c3"</pre></td></tr><tr><td data-num="37"></td><td><pre>            ],</pre></td></tr><tr><td data-num="38"></td><td><pre>            "index": "pypi",</pre></td></tr><tr><td data-num="39"></td><td><pre>            "version": "<span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">=</span>2.1.5"</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        &#125;,</pre></td></tr><tr><td data-num="41"></td><td><pre>        "idna": &#123;</pre></td></tr><tr><td data-num="42"></td><td><pre>            "hashes": [</pre></td></tr><tr><td data-num="43"></td><td><pre>                "sha256:c357b3f628cf53ae2c4c05627ecc484553142ca23264e593d327bcde5e9c3407",</pre></td></tr><tr><td data-num="44"></td><td><pre>                "sha256:ea8b7f6188e6fa117537c3df7da9fc686d485087abf6ac197f9c46432f7e4a3c"</pre></td></tr><tr><td data-num="45"></td><td><pre>            ],</pre></td></tr><tr><td data-num="46"></td><td><pre>            "version": "<span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">=</span>2.8"</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        &#125;,</pre></td></tr><tr><td data-num="48"></td><td><pre>        "pytz": &#123;</pre></td></tr><tr><td data-num="49"></td><td><pre>            "hashes": [</pre></td></tr><tr><td data-num="50"></td><td><pre>                "sha256:32b0891edff07e28efe91284ed9c31e123d84bea3fd98e1f72be2508f43ef8d9",</pre></td></tr><tr><td data-num="51"></td><td><pre>                "sha256:d5f05e487007e29e03409f9398d074e158d920d36eb82eaf66fb1136b0c5374c"</pre></td></tr><tr><td data-num="52"></td><td><pre>            ],</pre></td></tr><tr><td data-num="53"></td><td><pre>            "version": "<span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">=</span>2018.9"</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        &#125;,</pre></td></tr><tr><td data-num="55"></td><td><pre>        "requests": &#123;</pre></td></tr><tr><td data-num="56"></td><td><pre>            "hashes": [</pre></td></tr><tr><td data-num="57"></td><td><pre>                "sha256:502a824f31acdacb3a35b6690b5fbf0bc41d63a24a45c4004352b0242707598e",</pre></td></tr><tr><td data-num="58"></td><td><pre>                "sha256:7bf2a778576d825600030a110f3c0e3e8edc51dfaafe1c146e39a2027784957b"</pre></td></tr><tr><td data-num="59"></td><td><pre>            ],</pre></td></tr><tr><td data-num="60"></td><td><pre>            "index": "pypi",</pre></td></tr><tr><td data-num="61"></td><td><pre>            "version": "<span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">=</span>2.21.0"</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        &#125;,</pre></td></tr><tr><td data-num="63"></td><td><pre>        "urllib3": &#123;</pre></td></tr><tr><td data-num="64"></td><td><pre>            "hashes": [</pre></td></tr><tr><td data-num="65"></td><td><pre>                "sha256:61bf29cada3fc2fbefad4fdf059ea4bd1b4a86d2b6d15e1c7c0b582b9752fe39",</pre></td></tr><tr><td data-num="66"></td><td><pre>                "sha256:de9529817c93f27c8ccbfead6985011db27bd0ddfcdb2d86f3f663385c6a9c22"</pre></td></tr><tr><td data-num="67"></td><td><pre>            ],</pre></td></tr><tr><td data-num="68"></td><td><pre>            "version": "<span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">=</span>1.24.1"</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num="70"></td><td><pre>    &#125;,</pre></td></tr><tr><td data-num="71"></td><td><pre>    "develop": &#123;&#125;</pre></td></tr><tr><td data-num="72"></td><td><pre>&#125;</pre></td></tr></table></figure><h2 id="虚拟环境管理"><a class="anchor" href="#虚拟环境管理">#</a> 虚拟环境管理</h2><h3 id="创建虚拟环境"><a class="anchor" href="#创建虚拟环境">#</a> 创建虚拟环境</h3><p>进入项目的文件夹，直接 pipenv install xxx 安装你需要的包，就会在当前文件夹下创建虚拟环境，生成 Pipfile 和 Pipfile.lock</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou ~<span class="token punctuation">]</span><span class="token comment"># cd myproject/</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment"># pipenv install requests</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Creating a virtualenv <span class="token keyword">for</span> this project…</pre></td></tr><tr><td data-num="4"></td><td><pre>Pipfile: /root/myproject/Pipfile</pre></td></tr><tr><td data-num="5"></td><td><pre>Using /usr/local/python3/bin/python3.7 <span class="token punctuation">(</span><span class="token number">3.7</span>.2<span class="token punctuation">)</span> to create virtualenv…</pre></td></tr><tr><td data-num="6"></td><td><pre>⠸ Creating virtual environment<span class="token punctuation">..</span>.Already using interpreter /usr/local/python3/bin/python3.7</pre></td></tr><tr><td data-num="7"></td><td><pre>Using base prefix <span class="token string">'/usr/local/python3'</span></pre></td></tr><tr><td data-num="8"></td><td><pre>New python executable <span class="token keyword">in</span> /root/.local/share/virtualenvs/myproject-zKJX12a5/bin/python3.7</pre></td></tr><tr><td data-num="9"></td><td><pre>Also creating executable <span class="token keyword">in</span> /root/.local/share/virtualenvs/myproject-zKJX12a5/bin/python</pre></td></tr><tr><td data-num="10"></td><td><pre>Installing setuptools, pip, wheel<span class="token punctuation">..</span>.</pre></td></tr><tr><td data-num="11"></td><td><pre>done.</pre></td></tr><tr><td data-num="12"></td><td><pre>✔ Successfully created virtual environment<span class="token operator">!</span></pre></td></tr><tr><td data-num="13"></td><td><pre>Virtualenv location: /root/.local/share/virtualenvs/myproject-zKJX12a5</pre></td></tr><tr><td data-num="14"></td><td><pre>Creating a Pipfile <span class="token keyword">for</span> this project…</pre></td></tr><tr><td data-num="15"></td><td><pre>Installing requests…</pre></td></tr><tr><td data-num="16"></td><td><pre>✔ Installation Succeeded</pre></td></tr><tr><td data-num="17"></td><td><pre>Pipfile.lock not found, creating…</pre></td></tr><tr><td data-num="18"></td><td><pre>Locking <span class="token punctuation">[</span>dev-packages<span class="token punctuation">]</span> dependencies…</pre></td></tr><tr><td data-num="19"></td><td><pre>Locking <span class="token punctuation">[</span>packages<span class="token punctuation">]</span> dependencies…</pre></td></tr><tr><td data-num="20"></td><td><pre>✔ Success<span class="token operator">!</span></pre></td></tr><tr><td data-num="21"></td><td><pre>Updated Pipfile.lock <span class="token punctuation">(</span>444a6d<span class="token punctuation">)</span><span class="token operator">!</span></pre></td></tr><tr><td data-num="22"></td><td><pre>Installing dependencies from Pipfile.lock <span class="token punctuation">(</span>444a6d<span class="token punctuation">)</span>…</pre></td></tr><tr><td data-num="23"></td><td><pre>    ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ <span class="token number">5</span>/5 — 00:00:04</pre></td></tr><tr><td data-num="24"></td><td><pre>To activate this project's virtualenv, run pipenv shell.</pre></td></tr><tr><td data-num="25"></td><td><pre>Alternatively, run a <span class="token builtin class-name">command</span> inside the virtualenv with pipenv run.</pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment"># ll -al</span></pre></td></tr><tr><td data-num="27"></td><td><pre>total <span class="token number">12</span></pre></td></tr><tr><td data-num="28"></td><td><pre>drwxr-xr-x.  <span class="token number">2</span> root root   <span class="token number">39</span> Jan <span class="token number">31</span> <span class="token number">14</span>:09 <span class="token builtin class-name">.</span></pre></td></tr><tr><td data-num="29"></td><td><pre>dr-xr-x---. <span class="token number">17</span> root root <span class="token number">4096</span> Jan <span class="token number">31</span> <span class="token number">14</span>:08 <span class="token punctuation">..</span></pre></td></tr><tr><td data-num="30"></td><td><pre>-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">153</span> Jan <span class="token number">31</span> <span class="token number">14</span>:09 Pipfile</pre></td></tr><tr><td data-num="31"></td><td><pre>-rw-r--r--.  <span class="token number">1</span> root root <span class="token number">1914</span> Jan <span class="token number">31</span> <span class="token number">14</span>:09 Pipfile.lock</pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment">#</span></pre></td></tr></table></figure><p>如果需要指定 python 版本的话</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>$ pipenv --three <span class="token comment"># 泛指 python 的版本</span></pre></td></tr><tr><td data-num="2"></td><td><pre>$ pipenv --python <span class="token number">3.7</span> <span class="token comment"># 或者，特指某个 python 版本</span></pre></td></tr><tr><td data-num="3"></td><td><pre>$ pipenv --python <span class="token operator">&lt;</span>path/to/python<span class="token operator">></span> <span class="token comment"># 或者，特指某个位置的 python</span></pre></td></tr></table></figure><h3 id="进入退出删除虚拟环境"><a class="anchor" href="#进入退出删除虚拟环境">#</a> 进入 / 退出 / 删除虚拟环境</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment"># pipenv shell  # 进入虚拟环境</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Launching subshell <span class="token keyword">in</span> virtual environment…</pre></td></tr><tr><td data-num="3"></td><td><pre> <span class="token builtin class-name">.</span> /root/.local/share/virtualenvs/myproject-zKJX12a5/bin/activate</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment">#  . /root/.local/share/virtualenvs/myproject-zKJX12a5/bin/activate</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">(</span>myproject<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment"># exit  # 退出虚拟环境</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token builtin class-name">exit</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment"># pipenv --rm  # 删除整个环境</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Removing virtualenv <span class="token punctuation">(</span>/root/.local/share/virtualenvs/myproject-zKJX12a5<span class="token punctuation">)</span>…</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment">#</span></pre></td></tr></table></figure><h3 id="管理开发环境"><a class="anchor" href="#管理开发环境">#</a> 管理开发环境</h3><p>通常有一些 Python 包只在你的开发环境中需要，而不是在生产环境中，例如单元测试包。 Pipenv 使用–dev 标志区分两个环境。也就是说一个–dev 参数，帮你在同一个虚拟环境中又区分出了开发和非开发环境。</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>$ pipenv <span class="token function">install</span> --dev pytest</pre></td></tr></table></figure><p>在虚拟环境中运行命令，使用 run 参数，提供要运行的命令：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>$ pipenv run python manage.py runserver</pre></td></tr></table></figure><p>这将使用当前虚拟环境关联的 Python 解释器，执行命令。或者简单的执行脚本：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>$ pipenv run python your_script.py</pre></td></tr></table></figure><p>如果你不想每次运行 Python 时都输入这么多字符，可以在 shell 中设置一个别名，例如：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>$ <span class="token builtin class-name">alias</span> <span class="token assign-left variable">prp</span><span class="token operator">=</span><span class="token string">"pipenv run python"</span></pre></td></tr></table></figure><p>冻结 Pipfile，相当于将项目所使用的第三方库列表进行打包输出，类似于 virtualenv 中生成 requirements.txt 文件。通过更新 Pipfile.lock 来冻结库名称及其版本，以及其依赖关系的列表。需要使用 lock 参数：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment"># pipenv lock</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Locking <span class="token punctuation">[</span>dev-packages<span class="token punctuation">]</span> dependencies…</pre></td></tr><tr><td data-num="3"></td><td><pre>Locking <span class="token punctuation">[</span>packages<span class="token punctuation">]</span> dependencies…</pre></td></tr><tr><td data-num="4"></td><td><pre>✔ Success<span class="token operator">!</span></pre></td></tr><tr><td data-num="5"></td><td><pre>Updated Pipfile.lock <span class="token punctuation">(</span><span class="token number">748999</span><span class="token punctuation">)</span><span class="token operator">!</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment">#</span></pre></td></tr></table></figure><p>定位项目路径、虚拟环境、Python 解释器，显示依赖关系，卸载包</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment"># pipenv --where  # 定位项目路径</span></pre></td></tr><tr><td data-num="2"></td><td><pre>/root/myproject</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment"># pipenv --venv  # 定位虚拟环境</span></pre></td></tr><tr><td data-num="4"></td><td><pre>/root/.local/share/virtualenvs/myproject-zKJX12a5</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment"># pipenv --py  # 定位 Python 解释器</span></pre></td></tr><tr><td data-num="6"></td><td><pre>/root/.local/share/virtualenvs/myproject-zKJX12a5/bin/python</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment"># pipenv graph  # 显示依赖关系</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token assign-left variable">atomicwrites</span><span class="token operator">==</span><span class="token number">1.2</span>.1</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token assign-left variable">attrs</span><span class="token operator">==</span><span class="token number">18.2</span>.0</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token assign-left variable">Django</span><span class="token operator">==</span><span class="token number">2.1</span>.5</pre></td></tr><tr><td data-num="11"></td><td><pre>  - pytz <span class="token punctuation">[</span>required: Any, installed: <span class="token number">2018.9</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>more-itertools<span class="token operator">==</span><span class="token number">5.0</span>.0</pre></td></tr><tr><td data-num="13"></td><td><pre>  - six <span class="token punctuation">[</span>required: <span class="token operator">></span><span class="token operator">=</span><span class="token number">1.0</span>.0,<span class="token operator">&lt;</span><span class="token number">2.0</span>.0, installed: <span class="token number">1.12</span>.0<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token assign-left variable">py</span><span class="token operator">==</span><span class="token number">1.7</span>.0</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token assign-left variable">requests</span><span class="token operator">==</span><span class="token number">2.21</span>.0</pre></td></tr><tr><td data-num="16"></td><td><pre>  - certifi <span class="token punctuation">[</span>required: <span class="token operator">></span><span class="token operator">=</span><span class="token number">2017.4</span>.17, installed: <span class="token number">2018.11</span>.29<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  - chardet <span class="token punctuation">[</span>required: <span class="token operator">></span><span class="token operator">=</span><span class="token number">3.0</span>.2,<span class="token operator">&lt;</span><span class="token number">3.1</span>.0, installed: <span class="token number">3.0</span>.4<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  - idna <span class="token punctuation">[</span>required: <span class="token operator">></span><span class="token operator">=</span><span class="token number">2.5</span>,<span class="token operator">&lt;</span><span class="token number">2.9</span>, installed: <span class="token number">2.8</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  - urllib3 <span class="token punctuation">[</span>required: <span class="token operator">></span><span class="token operator">=</span><span class="token number">1.21</span>.1,<span class="token operator">&lt;</span><span class="token number">1.25</span>, installed: <span class="token number">1.24</span>.1<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou myproject<span class="token punctuation">]</span><span class="token comment"># pipenv uninstall --all  # 卸载所有包</span></pre></td></tr><tr><td data-num="21"></td><td><pre>Un-installing all <span class="token punctuation">[</span>dev-packages<span class="token punctuation">]</span> and <span class="token punctuation">[</span>packages<span class="token punctuation">]</span>…</pre></td></tr><tr><td data-num="22"></td><td><pre>Found <span class="token number">12</span> installed package<span class="token punctuation">(</span>s<span class="token punctuation">)</span>, purging…</pre></td></tr></table></figure><h2 id="练习网站"><a class="anchor" href="#练习网站">#</a> 练习网站</h2><p>Pipenv playground 是官方的在线练习网站：<span class="exturl" data-url="aHR0cHM6Ly9yb290bnJvbGwuY29tL2QvcGlwZW52LyVFRiVCQyU4QyVFOSU5RCU5RSVFNSVCOCVCOCVFNiVBMyU5MiVFRiVCQyU4MQ==">https://rootnroll.com/d/pipenv/，非常棒！</span></p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Golang实现简单的客户关系管理系统</title>
    <url>/computer-science/golang/%E5%9F%BA%E4%BA%8EGolang%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%A2%E6%88%B7%E5%85%B3%E7%B3%BB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="目录结构"><a class="anchor" href="#目录结构">#</a> 目录结构</h3><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E5%9F%BA%E4%BA%8EGolang%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%A2%E6%88%B7%E5%85%B3%E7%B3%BB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1.png" alt="目录结构"></p><h3 id="rungo"><a class="anchor" href="#rungo">#</a> run.go</h3><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> main</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token string">"Golang_FamilyAccount/customerManager/utils"</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token comment">// 显示主菜单</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	customerView <span class="token operator">:=</span> utils<span class="token punctuation">.</span>CustomerView<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>		Key<span class="token punctuation">:</span>  <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>		Loop<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token comment">// 对 customerView 结构体的 customerService 字段的初始化</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	customerView<span class="token punctuation">.</span>CustomerService <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">NewCustomerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token comment">// 显示主菜单</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	customerView<span class="token punctuation">.</span><span class="token function">MainMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="customergo"><a class="anchor" href="#customergo">#</a> customer.go</h3><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> utils</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token string">"fmt"</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// Customer 声明一个 Customer 结构体，表示一个客户信息</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">type</span> Customer <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	Id <span class="token builtin">int</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	Name <span class="token builtin">string</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	Gender <span class="token builtin">string</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// NewCustomer 编写一个工厂模式，返回一个 Customer 的实例</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">func</span> <span class="token function">NewCustomer</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> gender <span class="token builtin">string</span><span class="token punctuation">)</span> Customer <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token keyword">return</span> Customer<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>		Id<span class="token punctuation">:</span> id<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>		Name<span class="token punctuation">:</span> name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		Gender<span class="token punctuation">:</span> gender<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">func</span> <span class="token function">NewCustomer2</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> gender <span class="token builtin">string</span><span class="token punctuation">)</span> Customer <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token keyword">return</span> Customer<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		Name<span class="token punctuation">:</span> name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>		Gender<span class="token punctuation">:</span> gender<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">// GetInfo 返回用户的信息</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>customer Customer<span class="token punctuation">)</span> <span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>	info <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%v\t%v\t%v\n"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre>		customer<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> customer<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> customer<span class="token punctuation">.</span>Gender<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>	<span class="token keyword">return</span> info</pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="customerservicego"><a class="anchor" href="#customerservicego">#</a> customerService.go</h3><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> utils</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// CustomerService 该 CustomerService, 完成对 Customer 的操作，包括增删改查</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">type</span> CustomerService <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	customers <span class="token punctuation">[</span><span class="token punctuation">]</span>Customer <span class="token comment">// 客户切片</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	customerNum <span class="token builtin">int</span> <span class="token comment">// 声明一个字段，表示当前切片含有多少个客户</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// NewCustomerService 初始化 CustomerService</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">func</span> <span class="token function">NewCustomerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>CustomerService <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	customerService <span class="token operator">:=</span> CustomerService<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	customerService<span class="token punctuation">.</span>customerNum <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	customer <span class="token operator">:=</span> <span class="token function">NewCustomer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"cyt"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	customerService<span class="token punctuation">.</span>customers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>customerService<span class="token punctuation">.</span>customers<span class="token punctuation">,</span> customer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	<span class="token keyword">return</span> <span class="token operator">&amp;</span>customerService</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// List 显示客户列表，返回客户切片</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CustomerService<span class="token punctuation">)</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Customer <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token keyword">return</span> c<span class="token punctuation">.</span>customers</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// Add 添加客户</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CustomerService<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>customer Customer<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	c<span class="token punctuation">.</span>customerNum<span class="token operator">++</span></pre></td></tr><tr><td data-num="26"></td><td><pre>	customer<span class="token punctuation">.</span>Id <span class="token operator">=</span> c<span class="token punctuation">.</span>customerNum</pre></td></tr><tr><td data-num="27"></td><td><pre>	c<span class="token punctuation">.</span>customers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>customers<span class="token punctuation">,</span> customer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	<span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">// FindById 根据 id 查找客户在切片中对应下标，如果没有该客户，返回 - 1</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CustomerService<span class="token punctuation">)</span> <span class="token function">FindById</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	index <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>customers<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>		<span class="token keyword">if</span> i <span class="token operator">==</span> id <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>			index <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="37"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>	<span class="token keyword">return</span> index</pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">// DelById 根据 id 删除客户</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CustomerService<span class="token punctuation">)</span> <span class="token function">DelById</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>	index <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">FindById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>	<span class="token comment">// 如果 index == -1, 说明没有这个客户</span></pre></td></tr><tr><td data-num="46"></td><td><pre>	<span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>		<span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="48"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>	<span class="token comment">// 从切片中删除一个元素</span></pre></td></tr><tr><td data-num="50"></td><td><pre>	c<span class="token punctuation">.</span>customers <span class="token operator">=</span> c<span class="token punctuation">.</span>customers<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="51"></td><td><pre>	<span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment">// Update 修改客户</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CustomerService<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">,</span> customer Customer<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>	<span class="token comment">// 如果 index == -1, 说明没有这个客户</span></pre></td></tr><tr><td data-num="57"></td><td><pre>	index <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">FindById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>	<span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>		<span class="token keyword">return</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="60"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>	<span class="token comment">// 修改切片内容</span></pre></td></tr><tr><td data-num="62"></td><td><pre>	c<span class="token punctuation">.</span>customers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>customers<span class="token punctuation">,</span> customer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre>	<span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="customerviewgo"><a class="anchor" href="#customerviewgo">#</a> customerView.go</h3><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> utils</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token string">"fmt"</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">type</span> CustomerView <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token comment">// 定义必要字段</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	Key             <span class="token builtin">string</span> <span class="token comment">// 输入字符</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	Loop            <span class="token builtin">bool</span>   <span class="token comment">// 表示是否循环显示菜单</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	CustomerService <span class="token operator">*</span>CustomerService</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">func</span> <span class="token function">NewCustomerView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>CustomerView  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token keyword">return</span> <span class="token operator">&amp;</span>CustomerView<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>		Key<span class="token punctuation">:</span>  <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>		Loop<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// List 显示所有的客户信息</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>cv <span class="token operator">*</span>CustomerView<span class="token punctuation">)</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>	customers <span class="token operator">:=</span> cv<span class="token punctuation">.</span>CustomerService<span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>	<span class="token comment">// 显示</span></pre></td></tr><tr><td data-num="23"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"---------------------------客户列表---------------------------"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"编号\t姓名\t性别\t年龄\t电话\t邮箱\n"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>customers<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>customers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n-------------------------客户列表完成-------------------------\n\n"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">// GetUserInput 填入信息</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>cv <span class="token operator">*</span>CustomerView<span class="token punctuation">)</span> <span class="token function">GetUserInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Customer <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"姓名："</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>	name <span class="token operator">:=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="35"></td><td><pre>	<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"性别："</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>	gender <span class="token operator">:=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="39"></td><td><pre>	<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gender<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>	customer <span class="token operator">:=</span> <span class="token function">NewCustomer2</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>	<span class="token keyword">return</span> customer</pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment">// Add 添加用户</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>cv <span class="token operator">*</span>CustomerView<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>	customer <span class="token operator">:=</span> cv<span class="token punctuation">.</span><span class="token function">GetUserInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>	<span class="token comment">//id 是唯一的，需要系统分配</span></pre></td></tr><tr><td data-num="48"></td><td><pre>	<span class="token comment">// 调用</span></pre></td></tr><tr><td data-num="49"></td><td><pre>	<span class="token keyword">if</span> cv<span class="token punctuation">.</span>CustomerService<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"---------------------添加完成---------------------"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"---------------------添加失败---------------------"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token comment">// Update 修改客户信息</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>cv <span class="token operator">*</span>CustomerView<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入待修改的客户编号(-1)退出:"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>	id <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="60"></td><td><pre>	<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>	<span class="token keyword">if</span> id <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>		<span class="token keyword">return</span> <span class="token comment">// 放弃删除操作</span></pre></td></tr><tr><td data-num="63"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>	customer <span class="token operator">:=</span> cv<span class="token punctuation">.</span><span class="token function">GetUserInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre>	cv<span class="token punctuation">.</span>CustomerService<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> customer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token comment">// Delete 删除用户</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>cv <span class="token operator">*</span>CustomerView<span class="token punctuation">)</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"---------------------删除客户---------------------"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请选择待删除客户编号(-1退出)："</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre>	id <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="73"></td><td><pre>	<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre>	<span class="token keyword">if</span> id <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>		<span class="token keyword">return</span> <span class="token comment">// 放弃删除操作</span></pre></td></tr><tr><td data-num="76"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"确认是否删除(Y/N)："</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre>	<span class="token comment">// 这里可以加入一个循环判断，直到用户输入 y 或者 n, 才退出..</span></pre></td></tr><tr><td data-num="79"></td><td><pre>	choice <span class="token operator">:=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="80"></td><td><pre>	<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>choice<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre>	<span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token operator">||</span> choice <span class="token operator">==</span> <span class="token string">"Y"</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>		<span class="token comment">// 调用 customerService 的 Delete 方法</span></pre></td></tr><tr><td data-num="83"></td><td><pre>		<span class="token keyword">if</span> cv<span class="token punctuation">.</span>CustomerService<span class="token punctuation">.</span><span class="token function">DelById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"---------------------删除完成---------------------"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre>		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"---------------------删除失败，输入的id号不存在----"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="87"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="90"></td><td><pre></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token comment">// Exit 退出系统</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>cv <span class="token operator">*</span>CustomerView<span class="token punctuation">)</span> <span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"确认是否退出(Y/N):"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="94"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>		<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cv<span class="token punctuation">.</span>Key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre>		<span class="token keyword">if</span> cv<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">"Y"</span> <span class="token operator">||</span> cv<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">"N"</span> <span class="token operator">||</span> cv<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token operator">||</span> cv<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">"n"</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>			<span class="token keyword">break</span></pre></td></tr><tr><td data-num="98"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="99"></td><td><pre></pre></td></tr><tr><td data-num="100"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"输入有误, 确认是否退出(Y/N)"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="101"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="102"></td><td><pre></pre></td></tr><tr><td data-num="103"></td><td><pre>	<span class="token keyword">if</span> cv<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">"Y"</span> <span class="token operator">||</span> cv<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>		cv<span class="token punctuation">.</span>Loop <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="105"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="107"></td><td><pre></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token comment">// MainMenu 显示主菜单</span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>cv <span class="token operator">*</span>CustomerView<span class="token punctuation">)</span> <span class="token function">MainMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------客户信息管理软件----------------------"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="112"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"                  1 添加客户"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="113"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"                  2 修改客户"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="114"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"                  3 删除客户"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="115"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"                  4 客户列表"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="116"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"                  5 退   出"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="117"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"请选择(1-5)："</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="118"></td><td><pre></pre></td></tr><tr><td data-num="119"></td><td><pre>		<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cv<span class="token punctuation">.</span>Key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="120"></td><td><pre>		<span class="token keyword">switch</span> cv<span class="token punctuation">.</span>Key <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>		<span class="token keyword">case</span> <span class="token string">"1"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="122"></td><td><pre>			cv<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="123"></td><td><pre>		<span class="token keyword">case</span> <span class="token string">"2"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="124"></td><td><pre>			cv<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="125"></td><td><pre>		<span class="token keyword">case</span> <span class="token string">"3"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="126"></td><td><pre>			cv<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="127"></td><td><pre>		<span class="token keyword">case</span> <span class="token string">"4"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="128"></td><td><pre>			cv<span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="129"></td><td><pre>		<span class="token keyword">case</span> <span class="token string">"5"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="130"></td><td><pre>			cv<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="131"></td><td><pre>		<span class="token keyword">default</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="132"></td><td><pre>			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你的输入有误,请重新输入"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="133"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="134"></td><td><pre></pre></td></tr><tr><td data-num="135"></td><td><pre>		<span class="token keyword">if</span> <span class="token operator">!</span>cv<span class="token punctuation">.</span>Loop <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="136"></td><td><pre>			<span class="token keyword">break</span></pre></td></tr><tr><td data-num="137"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="139"></td><td><pre></pre></td></tr><tr><td data-num="140"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"退出客户关系管理系统"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="141"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Python元类</title>
    <url>/computer-science/python/Python%E5%85%83%E7%B1%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a id="more"></a></p>]]></content>
  </entry>
  <entry>
    <title>基于Golang实现简单家庭收支项目</title>
    <url>/computer-science/golang/%E5%9F%BA%E4%BA%8EGolang%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%AE%B6%E5%BA%AD%E6%94%B6%E6%94%AF%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="目录结构"><a class="anchor" href="#目录结构">#</a> 目录结构</h3><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E5%9F%BA%E4%BA%8EGolang%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%AE%B6%E5%BA%AD%E6%94%B6%E6%94%AF%E9%A1%B9%E7%9B%AE/1.png" alt="目录结构"></p><h3 id="familyaccountgo"><a class="anchor" href="#familyaccountgo">#</a> FamilyAccount.go</h3><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> utils</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token string">"fmt"</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">type</span> FamilyAccount <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	key     <span class="token builtin">string</span>  <span class="token comment">// 保存接受用户输入的选项</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	loop    <span class="token builtin">bool</span>    <span class="token comment">// 控制是否退出 for</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	balance <span class="token builtin">float64</span> <span class="token comment">// 定义账户的余额</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	money   <span class="token builtin">float64</span> <span class="token comment">// 每次收支的金额</span></pre></td></tr><tr><td data-num="10"></td><td><pre>	note    <span class="token builtin">string</span>  <span class="token comment">// 每次收支的说明</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	flag    <span class="token builtin">bool</span>    <span class="token comment">// 记录是否有收支的行为</span></pre></td></tr><tr><td data-num="12"></td><td><pre>	details <span class="token builtin">string</span>  <span class="token comment">// 对收支进行拼接处理</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">type</span> FamilyAccountInterFace <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token function">showDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token function">income</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token function">MainMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// NewFamilyAccount 构造方法，返回一个 * FamilyAccount 实例</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">func</span> <span class="token function">NewFamilyAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>FamilyAccount <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token keyword">return</span> <span class="token operator">&amp;</span>FamilyAccount<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>		key<span class="token punctuation">:</span>     <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>		loop<span class="token punctuation">:</span>    <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>		balance<span class="token punctuation">:</span> <span class="token number">10000.0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="29"></td><td><pre>		money<span class="token punctuation">:</span>   <span class="token number">0.0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>		note<span class="token punctuation">:</span>    <span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre>		flag<span class="token punctuation">:</span>    <span class="token boolean">false</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="32"></td><td><pre>		details<span class="token punctuation">:</span> <span class="token string">"收支\t账户金额\t收支金额\t说明"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="33"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">// 显示明细</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>FamilyAccount<span class="token punctuation">)</span> <span class="token function">showDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------当前收支明细记录----------------------"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>	<span class="token keyword">if</span> this<span class="token punctuation">.</span>flag <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>details<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"当前没有收支明细,来一笔吧!"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">// 登记记录</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>FamilyAccount<span class="token punctuation">)</span> <span class="token function">income</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"本次收入金额:"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>this<span class="token punctuation">.</span>money<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>	this<span class="token punctuation">.</span>balance <span class="token operator">+=</span> this<span class="token punctuation">.</span>money <span class="token comment">// 修改账户余额</span></pre></td></tr><tr><td data-num="51"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"本次收入说明:"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>this<span class="token punctuation">.</span>note<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>	this<span class="token punctuation">.</span>details <span class="token operator">+=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"\n收入\t%v\t%v\t%v"</span><span class="token punctuation">,</span> this<span class="token punctuation">.</span>balance<span class="token punctuation">,</span> this<span class="token punctuation">.</span>money<span class="token punctuation">,</span> this<span class="token punctuation">.</span>note<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>	this<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token comment">// 登记支出</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>FamilyAccount<span class="token punctuation">)</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"本次支出金额:"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>this<span class="token punctuation">.</span>money<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre>	<span class="token keyword">if</span> this<span class="token punctuation">.</span>money <span class="token operator">></span> this<span class="token punctuation">.</span>balance <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"余额不足"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>	this<span class="token punctuation">.</span>balance <span class="token operator">-=</span> this<span class="token punctuation">.</span>money</pre></td></tr><tr><td data-num="66"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"本次支出说明:"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>this<span class="token punctuation">.</span>note<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>	this<span class="token punctuation">.</span>details <span class="token operator">+=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"\n支出\t%v\t%v\t%v"</span><span class="token punctuation">,</span> this<span class="token punctuation">.</span>balance<span class="token punctuation">,</span> this<span class="token punctuation">.</span>money<span class="token punctuation">,</span> this<span class="token punctuation">.</span>note<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>	this<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token comment">// 退出系统</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>FamilyAccount<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"确认退出吗? 确定退出请输入y 否则输入n"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="75"></td><td><pre>	choice <span class="token operator">:=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="76"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>choice<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre>		<span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>			this<span class="token punctuation">.</span>loop <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="80"></td><td><pre>			<span class="token keyword">break</span></pre></td></tr><tr><td data-num="81"></td><td><pre>		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">"n"</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>			<span class="token keyword">break</span></pre></td></tr><tr><td data-num="83"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"输入有误,请重新输入 y/n"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="87"></td><td><pre></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token comment">// 显示主菜单</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>FamilyAccount<span class="token punctuation">)</span> <span class="token function">MainMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre></pre></td></tr><tr><td data-num="91"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\n-----------------家庭收支记账软件-----------------"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="93"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"                  1 收支明细"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="94"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"                  2 登记收入"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="95"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"                  3 登记支出"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"                  4 退出软件"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="97"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"请选择(1-4)："</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="98"></td><td><pre>		fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>this<span class="token punctuation">.</span>key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="99"></td><td><pre>		<span class="token keyword">switch</span> this<span class="token punctuation">.</span>key <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>		<span class="token keyword">case</span> <span class="token string">"1"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="101"></td><td><pre>			this<span class="token punctuation">.</span><span class="token function">showDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="102"></td><td><pre>		<span class="token keyword">case</span> <span class="token string">"2"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="103"></td><td><pre>			this<span class="token punctuation">.</span><span class="token function">income</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="104"></td><td><pre>		<span class="token keyword">case</span> <span class="token string">"3"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="105"></td><td><pre>			this<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="106"></td><td><pre>		<span class="token keyword">case</span> <span class="token string">"4"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="107"></td><td><pre>			this<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="108"></td><td><pre>		<span class="token keyword">default</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="109"></td><td><pre>			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入正确的选项.."</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="110"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="111"></td><td><pre></pre></td></tr><tr><td data-num="112"></td><td><pre>		<span class="token keyword">if</span> <span class="token operator">!</span>this<span class="token punctuation">.</span>loop <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>			<span class="token keyword">break</span></pre></td></tr><tr><td data-num="114"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="116"></td><td><pre></pre></td></tr><tr><td data-num="117"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="rungo"><a class="anchor" href="#rungo">#</a> run.go</h3><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> main</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token string">"Golang_FamilyAccount/Family/utils"</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>	family <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">NewFamilyAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	family<span class="token punctuation">.</span><span class="token function">MainMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>iterator, generator</title>
    <url>/computer-science/python/iterator-generator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a id="more"></a></p>]]></content>
  </entry>
  <entry>
    <title>Python with语法</title>
    <url>/computer-science/python/Python-with%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a id="more"></a></p>]]></content>
  </entry>
  <entry>
    <title>分布式消息队列celery</title>
    <url>/computer-science/python/%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97celery/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="celery基本原理"><a class="anchor" href="#celery基本原理">#</a> celery 基本原理</h3><p>1、客户端也就是 python（django/flask 等）发布任务</p><p>2、发布的任务存到任务队列里面，可以以 redis、rabbitMQ、MessageQueue、MySQL 存储，一般在 django/flask 程序里 redis 居多</p><p>3、任务处理者会不断从任务队列里面获取任务执行</p><h3 id="celery设计"><a class="anchor" href="#celery设计">#</a> Celery 设计</h3><p>celery 由五大模块实现。</p><ol><li><p>Task<br>就是任务，有异步任务和定时任务。</p></li><li><p>Broker<br>中间人，接收生产者发来的消息即 Task，将任务存入队列。任务的消费者是 Worker。Celery 本身不提供队列服务，推荐用 Redis 或 RabbitMQ 实现队列服务。</p></li><li><p>Worker<br>执行任务的单元，它实时监控消息队列，如果有任务就获取任务并执行它。</p></li><li><p>Beat<br>定时任务调度器，根据配置定时将任务发送给 Broler。</p></li><li><p>Backend<br>用于存储任务的执行结果。</p></li></ol><p><img data-src="%E7%BB%84%E6%88%90%E5%85%B3%E7%B3%BB.png" alt=""></p><h3 id="celery安装配置"><a class="anchor" href="#celery安装配置">#</a> Celery 安装配置</h3><p>Celery 4.0 + 及以后版本不支持在 windows 系统上运行。如果你希望在 windows 系统上使用 celery, 有两种方法。<br>1. 安装 3.1.25 版本</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>pip install celery==3<span class="token punctuation">.</span>1<span class="token punctuation">.</span>25</pre></td></tr></table></figure><p>2. 安装 gevent</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>pip install gevent</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 启动 worker</span></pre></td></tr><tr><td data-num="3"></td><td><pre>celery <span class="token operator">-</span>A &lt;module> worker <span class="token operator">-</span>l info <span class="token operator">-</span>P gevent</pre></td></tr></table></figure><h3 id="简单案例"><a class="anchor" href="#简单案例">#</a> 简单案例</h3><p>首先编写一个文件 <span class="exturl" data-url="aHR0cDovL3huLS10YXNrMS1kcTFoMDE2YXV6YS5weQ==">命名为 task1.py</span></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery</pre></td></tr><tr><td data-num="2"></td><td><pre>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'tasks'</span><span class="token punctuation">,</span>broker<span class="token operator">=</span><span class="token string">'redis://192.168.1.102:6379/0'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># redis://192.168.1.102:6379/0 是 redis 数据库地址，无需账号密码验证，也是 ssrf 在获取内网系统权限的方式之一</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'传递 &#123;&#125; + &#123;&#125; = &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> x<span class="token operator">+</span>y</pre></td></tr></table></figure><p>然后启动 redis 数据库<br>接下来再 task1 文件夹执行命令</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>celery <span class="token operator">-</span>A task1 worker <span class="token operator">--</span>loglevel=info</pre></td></tr></table></figure><p>就会看到消息队列都启动<br><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97celery/1.png" alt=""><br>到现在所有的队列都启动，可以向这个队列添加任务等待处理</p><p>方法是再 task1 目录下打开 cmd 窗口，进入 python 交互界面</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> task1 <span class="token keyword">import</span> add</pre></td></tr><tr><td data-num="2"></td><td><pre>add<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>add<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97celery/2.png" alt=""></p><h4 id="保存结果"><a class="anchor" href="#保存结果">#</a> 保存结果</h4><p>上面只是一个发送任务的调用，结果是拿不到的。上面也没有接收返回值，这次把返回值保存到起来<br>修改 task1 内容</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'tasks'</span><span class="token punctuation">,</span>broker<span class="token operator">=</span><span class="token string">'redis://192.168.1.102:6379/0'</span><span class="token punctuation">,</span>backend<span class="token operator">=</span><span class="token string">'redis://192.168.1.102:6379/0'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>然后要重启 Worker，IDLE 也要重启<br>然后这样就能获取结果了</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>t <span class="token operator">=</span> add<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>t<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 还可以设置超时时间 t.get (timeout=5)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># 如果出错，获取错误结果，不触发异常</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 使用命令 t.get (propagate=False)    </span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># t.traceback  （打印异常详细结果）</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># 还可以获取任务状态</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># t.ready () 返回 True 或者 False</span></pre></td></tr></table></figure><h3 id="在项目中使用celery"><a class="anchor" href="#在项目中使用celery">#</a> 在项目中使用 celery</h3><p>可以把 celery 配置成一个应用，假设应用名字是 CeleryPro，目录格式如下：<br>CeleryPro<br>├─__init.py<br><span class="exturl" data-url="aHR0cDovL3huLS1jZWxlcnktMm43Y3BpLnB5">├─celery.py</span><br><span class="exturl" data-url="aHR0cDovL3huLS10YXNrcy0zMDlidWgucHk=">├─tasks.py</span></p><p><span class="exturl" data-url="aHR0cDovL3huLS1jZWxlcnktdnk3aTczY2N4eTg1YXkxNGY5eWpiOGZ0bzNlam94ZWxjYTA5N2JncTZhLnB5">这里的连接文件命名必须为 celery.py</span>，其他名字随意</p><h4 id="celery文件"><a class="anchor" href="#celery文件">#</a> celery 文件</h4><p><span class="exturl" data-url="aHR0cDovL3huLS1jZWxlcnktb3Y3aW04Y2Mxd2ZxM2FnaW55MGJyejB3Zmp6YS5weQ==">这个文件名必须是 celery.py</span>：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token punctuation">,</span> unicode_literals</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'CeleryPro'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>             broker<span class="token operator">=</span><span class="token string">'redis://192.168.1.102:6379'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>             backend<span class="token operator">=</span><span class="token string">'redis://192.168.1.102:6379'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>             include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'CeleryPro.tasks'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>update<span class="token punctuation">(</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    result_expires<span class="token operator">=</span><span class="token number">3600</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    app<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h4 id="tasks文件"><a class="anchor" href="#tasks文件">#</a> tasks 文件</h4><p>这个文件开始两行就多了一个点，这里要导入上面的 celery.py 文件。后面只要写各种任务加上装饰器就可以了：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token punctuation">,</span> unicode_literals</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> time</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"计算2个值的和: %s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">return</span> x<span class="token operator">+</span>y</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">def</span> <span class="token function">upper</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> v<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h4 id="启动worker"><a class="anchor" href="#启动worker">#</a> 启动 worker</h4><p>这里注意用的都是 CeleryPro：</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>celery <span class="token operator">-</span>A CeleryPro worker <span class="token operator">-</span>loglevel=info  <span class="token comment"># 前台启动不推荐</span></pre></td></tr><tr><td data-num="2"></td><td><pre>celery <span class="token operator">-</span>A CeleryPro worker <span class="token operator">-</span>l info  <span class="token comment"># 前台启动简写</span></pre></td></tr><tr><td data-num="3"></td><td><pre>celery multi <span class="token function">start</span> w1 <span class="token operator">-</span>A  CeleryPro <span class="token operator">-</span>l info  <span class="token comment"># 推荐用后台启动</span></pre></td></tr></table></figure><h4 id="定时任务"><a class="anchor" href="#定时任务">#</a> 定时任务</h4><p>主要修改 celery.py 文件</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token punctuation">,</span> unicode_literals</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontab</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'CeleryPro'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>             broker<span class="token operator">=</span><span class="token string">'redis://192.168.1.102'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>             backend<span class="token operator">=</span><span class="token string">'redis://192.168.1.102'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>             include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'CeleryPro.tasks'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>CELERYBEAT_SCHEDULE <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token string">'add every 10 seconds'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'CeleryPro.tasks.add'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  </pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token comment"># 可以用 timedelta 对象</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment"># 'schedule': 10,  # 也支持直接用数字表示秒数</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token string">'upper every 2 minutes'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'CeleryPro.tasks.upper'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> crontab<span class="token punctuation">(</span>minute<span class="token operator">=</span><span class="token string">'*/2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment"># app.conf.CELERY_TIMEZONE = 'UTC'</span></pre></td></tr><tr><td data-num="27"></td><td><pre>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>CELERY_TIMEZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment"># Optional configuration, see the application user guide.</span></pre></td></tr><tr><td data-num="30"></td><td><pre>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>update<span class="token punctuation">(</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    CELERY_TASK_RESULT_EXPIRES<span class="token operator">=</span><span class="token number">3600</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    app<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>启动使用命令</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>celery <span class="token operator">-</span>A CeleryPro beat <span class="token operator">-</span>l info</pre></td></tr><tr><td data-num="2"></td><td><pre>celery <span class="token operator">-</span>A CeleryPro worker <span class="token operator">-</span>l info</pre></td></tr></table></figure><h3 id="新例子"><a class="anchor" href="#新例子">#</a> 新例子</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># tasks.py</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># coding:utf-8</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery<span class="token punctuation">,</span>platforms</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'tasks'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>app<span class="token punctuation">.</span>config_from_object<span class="token punctuation">(</span><span class="token string">'config'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>platforms<span class="token punctuation">.</span>C_FORCE_ROOT <span class="token operator">=</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">return</span> x <span class="token operator">+</span> y</pre></td></tr></table></figure><p>和另一个文件</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># config.py</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># coding:utf-8</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontab</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>BROKER_URL <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/0'</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>CELERYBEAT_SCHEDULE <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token string">'add-every-2-seconds'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'tasks.add'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>CELERY_TIMEZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span></pre></td></tr></table></figure><p>然后打开三个 cmd 窗口，依次输入：</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>celery <span class="token operator">-</span>A tasks beat <span class="token operator">-</span>l info</pre></td></tr><tr><td data-num="2"></td><td><pre>celery <span class="token operator">-</span>A tasks worker <span class="token operator">-</span>l info</pre></td></tr><tr><td data-num="3"></td><td><pre>celery <span class="token operator">-</span>A tasks flower</pre></td></tr></table></figure><p>然后访问本地 5555 端口即可～</p><h4 id="查看异步任务情况"><a class="anchor" href="#查看异步任务情况">#</a> 查看异步任务情况</h4><p>Celery 提供了一个工具 flower，将各个任务的执行情况、各个 worker 的健康状态进行监控并以可视化的方式展现</p><p>安装 flower:</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>pip install flower</pre></td></tr></table></figure><p>启动 flower（默认会启动一个 webserver，端口为 5555）</p><p>在另一个 Terminal 中：</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>celery <span class="token operator">-</span>A task1 flower</pre></td></tr></table></figure><p>这里的 task1 是上面创建的 py 文件</p><p>进入</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>http:<span class="token operator">/</span><span class="token operator">/</span>localhost:5555</pre></td></tr></table></figure><p>查看</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器的使用</title>
    <url>/computer-science/python/%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a id="more"></a></p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>循环引用问题</title>
    <url>/computer-science/python/%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a id="more"></a></p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>鸭子类型</title>
    <url>/computer-science/python/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是鸭子类型"><a class="anchor" href="#什么是鸭子类型">#</a> 什么是鸭子类型</h3><blockquote><p>当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就是鸭子。</p></blockquote><p>关注点在对象包含哪些方法，而不是类型 (duck typing)</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Duck</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">quack</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"gua gua"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">quack</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是人类，我也会gua gua"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">def</span> <span class="token function">in_the_forest</span><span class="token punctuation">(</span>duck<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    duck<span class="token punctuation">.</span>quack<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">def</span> <span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    Trump <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    Donald <span class="token operator">=</span> Duck<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    in_the_forest<span class="token punctuation">(</span>Trump<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    in_the_forest<span class="token punctuation">(</span>Donald<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>game<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><pre><code class="language-Python">我是人类，我也会gua gua
gua gua
</code></pre>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>408计算机网络-数据链路层</title>
    <url>/kaoyan/internet/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="功能"><a class="anchor" href="#功能">#</a> 功能</h2><h3 id="数据链路层基本概念"><a class="anchor" href="#数据链路层基本概念">#</a> 数据链路层基本概念</h3><p>数据链路层负责通过一条链路从一个结点向另一个物理链路直接相连的相邻结点传送数据报。</p><p>结点：主机、路由器 &lt;br&gt;<br>链路：网络中两个结点之间的<strong>物理通道</strong>。链路的传输介质主要有双绞线、光纤和微波。分为有限链路和无线链路。&lt;br&gt;<br>数据链路：网络中两个结点之间的<strong>逻辑通道</strong>。把实现控制协议的硬件和软件加到链路上就构成数据链路。&lt;br&gt;<br>帧：链路层的协议数据单元。&lt;br&gt;</p><p>数据链路层在物理层提供服务的基础上<span class="red">向网络层提供服务</span>。其最基本的服务是将源自网络层来的数据可靠的传输到相邻节点的目标机网络层。其主要作用是 &lt;font color=&quot;red&quot;&gt;[加强物理层传输原始比特流的功能]&lt;/font&gt;，将物理层提供的可能出错的物理连接改造成 &lt; font color=&quot;red&quot;&gt;[逻辑上无差错的数据链路]&lt;/font&gt;，使之对网络层表现为一条无差错的链路。*</p><p>功能一：为网络层提供服务。无确认无连接服务。有确认无连接服务。有确认面向连接服务。&lt;br&gt;<br>功能二：链路管理，即连接的建立、维持、释放（用于面向连接的服务）。&lt;br&gt;<br>功能二：组帧。&lt;br&gt;<br>功能四：流量控制。&lt;br&gt;<br>功能五：差错控制。（帧错 / 位错）。</p><h3 id="封装成帧透明传输"><a class="anchor" href="#封装成帧透明传输">#</a> 封装成帧 &amp; 透明传输</h3><h4 id="封装成帧"><a class="anchor" href="#封装成帧">#</a> 封装成帧</h4><p>封装成帧就是在一段数据的首部和尾部添加一段数据，这段数据被称为帧定界符。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。</p><h4 id="透明传输"><a class="anchor" href="#透明传输">#</a> 透明传输</h4><p>透明传输是指不管所传数据是什么样的比特组合，都应当能在链路上传送。</p><h4 id="组帧的四种方法"><a class="anchor" href="#组帧的四种方法">#</a> 组帧的四种方法</h4><ol><li>字符计数法：帧首部使用一个记数字段（第一个字节，八位）来标明帧内字符数。</li><li>字符填充法：即在数据中心添加转义字符，防止内容中二进制字符与帧首部和尾部字符冲突。<ol><li>当传送的帧是文本文件时（文本文件的字符都是键盘上输入的，都是 ASCII 码）。不管从键盘上输入什么字符都可以放进帧内传送过去。（透明传输）</li><li>当传送的帧是由非 ASCII 码得文本文件组成时（二进制代码的程序或者图像）就要采用字符填充方法实现透明传输。</li></ol></li><li>零比特填充法：在发送端，扫描整个信息字段，<strong>只要有连续 5 个 1，就立即填入 1 个 0</strong>. 在接收端收到一个帧时，先找到标志字段确定边界，再用硬件对比特流进行扫描。<strong>发现连续 5 个 1 时，就把后面的 0 删除</strong>。</li><li>违规编码法：参考曼彻斯特编码，与它不同的是，违规编码法用高 - 高，低 - 低来定界帧的起始和结束。</li></ol><p>由于字节计数法中 Count 字段的脆弱性及字符填充法的复杂性和不兼容性。目前普遍使用的是<strong>零比特填充法</strong>和<strong>违规编码法</strong>。</p><h3 id="差错控制"><a class="anchor" href="#差错控制">#</a> 差错控制</h3><h4 id="差错从何而来"><a class="anchor" href="#差错从何而来">#</a> 差错从何而来</h4><ol><li>（全局性）由于线路本身电气特性所产生的<strong>随机噪声</strong> (热噪声)，是信道固有的，随机存在的。解决方法：提高信噪比来减少和避免干扰。(对传感器下手)</li><li>（局部性）外界特定的短暂原因所造成的的<strong>冲击噪声</strong>，是产生差错的原因。解决办法：通常利用编码技术来解决。</li></ol><h4 id="差错"><a class="anchor" href="#差错">#</a> 差错</h4><ol><li>位错 -- 比特位出错，1 变 0,0 变 1.</li><li>帧错<ol><li>丢失</li><li>重复</li><li>失序</li></ol></li></ol><h4 id="差错控制-2"><a class="anchor" href="#差错控制-2">#</a> 差错控制</h4><ol><li>检错编码<ol><li>奇偶校验码<ol><li>奇校验码：在 n-1 位的信息元之前加上一位的校验元，使 1 的个数为奇数</li></ol></li><li>循环冗余码 CRC：冗余码的生成以及接收端 CRC 检验都是硬件实现，处理很迅速，因此不会延误数据的传输。</li></ol></li><li>纠错编码<ol><li>海明码<ol><li>海明距离：两个合法编码的对应比特取值不同的比特数称为这两个码字的<strong>海明距离 (码距)</strong></li><li>一个有效编码集中，任意<strong>两个合法编码 (码字) 的海明距离的最小值</strong>称为该编码集的海明距离 (码距)</li><li>海明码纠错 d 位，需要码距为 2d+1 的编码方案；检错 d 位，只需要码距为 d+1。</li></ol></li></ol></li></ol><p>凡是接收端数据链路层接受的帧，我们都能以非常接近于 1 的概率认为这些帧在传输过程中没有产生差错。</p><p>可靠传输：数据链路层发送端发什么，接收端就收到什么<br>链路层使用 CRC 检验，能够实现无比特差错的传输，但这还不是可靠传输。</p><h3 id="数据链路层的流量控制"><a class="anchor" href="#数据链路层的流量控制">#</a> 数据链路层的流量控制</h3><p><strong>较高的发送速度</strong>和<strong>较低的接受能力</strong>的不匹配，会造成传输出错，因此流量控制也是数据链路层的一项重要工作。</p><p>数据链路层的流量控制是<strong>点对点的</strong>，而传输层的流量控制是<strong>端到端的</strong>。</p><p>数据链路的流量控制手段：接收方收不下就不回复确认。</p><p>传输层流量控制手段：接收端给发送端一个窗口公告。</p><h3 id="流量控制方法"><a class="anchor" href="#流量控制方法">#</a> 流量控制方法</h3><ol><li>停止等待协议 (特殊滑动窗口协议): 每发送完一个帧就停止发送，等待对方的确认，在收到确认后再发送下一个帧。</li><li>滑动窗口协议<ol><li>后退 N 帧协议 (GBN)</li><li>选择重传协议 (SR)</li></ol></li></ol><p>停止 - 等待协议 ---&gt; 发送窗口大小 = 1，接受窗口大小 = 1<br>后退 N 帧协议 (GBN)---&gt; 发送窗口大小 &gt; 1, 接受窗口大小 = 1<br>选择重传协议 (SR)---&gt; 发送窗口大小 &gt; 1, 接受窗口大小 &gt; 1</p><p>可靠传输：发送端发啥，接收端接啥<br>流量控制：控制发送速率，使接收方由足够的缓冲空间来接受每一个帧</p><p>滑动窗口解决</p><ol><li>流量控制 (收不下就不给确认，想发也不发不了)</li><li>可靠传输 (发送方自动重传)</li></ol><h3 id="停止-等待协议"><a class="anchor" href="#停止-等待协议">#</a> 停止 - 等待协议</h3><p>特点:</p><ol><li>简单</li><li>信道利用率太低<ol><li>信道利用率：发送方在一个发送周期内，有效地发送数据所需要的时间占整个发送周期的比率。</li><li>信道利用率 =(L/C)/T。</li><li>T: 发送周期，从开始发送数据，到收到第一个确认帧为止</li><li>L：T 内发送 L 比特数据</li><li>C：发送方数据传速率</li></ol></li></ol><p>信道吞吐率 = 信道利用率 * 发送方发送速率</p><h3 id="后退n帧协议"><a class="anchor" href="#后退n帧协议">#</a> 后退 N 帧协议</h3><p>发送窗口：发送方维持一组持续的允许发送的帧的序号<br>接受窗口：接收方维持一组连续的允许接受帧的序号</p><p>GBN 发送方必须响应的三件事</p><ol><li>上层的调用</li><li>收到一个 ack: GBN 协议中，对 n 号帧的确认采用 **&lt;font color=&quot;red&quot;&gt;[累计确认]**&lt;/font &gt; 的方式，标明接收方已经收到 N 号帧和他之前的全部帧</li><li>超时事件</li></ol><p>GBN 接收方需要做的事</p><ol><li>如果正确收到 N 号帧，并且按序，那么接收方为 n 帧发送一个 ACK，并且将该帧中的数据部分交付给上层</li><li>其余情况都丢弃帧，并为最近按序接受的帧重新发送 ack。接收方无需缓存任何失序帧，只需维护一个信息：expectedseqnum（下一个按序接收的帧序号）</li></ol><h4 id="滑动窗口长度"><a class="anchor" href="#滑动窗口长度">#</a> 滑动窗口长度</h4><p>若采用 n 个比特对帧编号，那么发送窗口的尺寸 Wt 应满足 1 《 Wt 《 2^n-1。因为发送窗口尺寸过大，就会使得接收方无法区别新帧和旧帧。</p><h4 id="gbn协议重点"><a class="anchor" href="#gbn协议重点">#</a> GBN 协议重点</h4><ol><li>累积确认 (偶尔捎带确认)</li><li>接收方只按顺序接受帧，不按序无情丢弃</li><li>确认序列号最大、按序到达的帧</li><li>发送窗口最大为 2^n-1， 接收窗口大小为 1</li></ol><h4 id="gbn协议性能分析"><a class="anchor" href="#gbn协议性能分析">#</a> GBN 协议性能分析</h4><ol><li>因连续发送数据帧而提高了信道利用率</li><li>在重传时必须把原来已经正确传送的数据帧重传，使传送效率降低</li></ol><h3 id="选择重传协议"><a class="anchor" href="#选择重传协议">#</a> 选择重传协议</h3><h4 id="sr协议重点"><a class="anchor" href="#sr协议重点">#</a> SR 协议重点</h4><ol><li>对数据帧逐一确认，收一个确认一个</li><li>只重传出错帧</li><li>接收方有缓存</li><li>最大发送窗口和接收窗口为 2^(n-1)</li></ol><h3 id="信道划分介质访问控制"><a class="anchor" href="#信道划分介质访问控制">#</a> 信道划分介质访问控制</h3><p>信道划分介质访问控制：将使用介质的每个设备与来自同一信道上的其他设备的<strong>通信隔离开</strong>，把 **&lt;font color=&quot;red&quot;&gt;[时域和频域资源]&lt;/font&gt;** 合理地分配给网络上的设备。</p><p>多路复用技术：把多个信号组合在一条物理信道上进行传输，使得多个计算机或者终端设备 **&lt;font color=&quot;red&quot;&gt;[共享信道资源]&lt;/font&gt;**，提高信道利用率。</p><p>共享信道：把一条广播信道，逻辑上分成几条用于两个节点之间通信的互不干扰的子信道，<strong>&lt;font color=&quot;red&quot;&gt;[实际上就是把广播信道转变为点对点信道]。&lt;/font&gt;</strong></p><p>传输数据使用的两种链路</p><ol><li>点对点链路：<ol><li>两个相邻节点通过一个链路相连，没有第三者。</li><li>应用：PPP 协议，常用于广域网</li></ol></li><li>广播室链路<ol><li>所有主机共享通信介质</li><li>应用：早起的总线以太网、无线局域网，常用于局域网</li><li>典型拓扑结构：总线型、星型 (逻辑总线型)</li></ol></li></ol><h4 id="介质访问控制"><a class="anchor" href="#介质访问控制">#</a> 介质访问控制</h4><p>采用一定的措施，使得两对节点之间的通信不会发生互相干扰的情况。</p><ol><li>静态划分信道<ol><li>频分多路复用 FDM</li><li>时分多路复用 TDM</li><li>波分多路复用 WDM</li><li>码分多路复用 CDM</li></ol></li><li>动态分配信道<ol><li>轮询访问介质访问控制<ol><li>令牌传递协议</li></ol></li><li>随机访问介质访问控制<ol><li>ALOHA 协议</li><li>CSMA 协议</li><li>CSMA/CD 协议</li><li>CSMA/CA 协议</li></ol></li></ol></li></ol><p><strong>信道划分介质访问控制 (MAC) 协议</strong>：</p><ol><li>基于多路复用技术划分资源。</li><li>网络负载重：共享信道效率高，且公平。</li><li>网络负载轻：共享信道效率低。</li></ol><p><strong>随机访问 MAC 协议 (冲突)</strong>:</p><ol><li>用户根据意愿<strong>随机</strong>发送消息，发送消息时可独占信道带宽。</li><li>网络负载重：产生冲突开销。</li><li>网络负载轻：共享信道效率高，单个结点可利用信道全部带宽。</li></ol><p><strong>轮询访问 MAC 协议 / 轮流协议 / 轮转访问 MAC 协议</strong>：</p><ol><li>既要<strong>不产生冲突</strong>，又要发送时<strong>占全部带宽</strong>。</li></ol><h4 id="频分多路复用fdm"><a class="anchor" href="#频分多路复用fdm">#</a> 频分多路复用 FDM</h4><ol><li>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。<strong>频分复用的所有用户在同样的时间占用不同的带宽 (频率带宽) 资源</strong>。</li><li>充分利用传输介质带宽，系统<strong>效率较高</strong>：由于技术比较成熟，实现也比较<strong>容易</strong>。</li></ol><h4 id="时分多路复用tdm"><a class="anchor" href="#时分多路复用tdm">#</a> 时分多路复用 TDM</h4><ol><li>将时间划分为一段段等长的时分复用帧 (<strong>TDM 帧</strong>)。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙，所有用户轮流占用信道。</li><li><strong>&lt;font color=&quot;red&quot;&gt;[TDM 帧是在物理层传送的比特流所划分的帧，标志一个周期]&lt;/font&gt;</strong>。</li></ol><p>时分多路复用 -- 并发<br>频分多路复用 -- 并行</p><h4 id="改进的时分复用-统计时分复用stdm"><a class="anchor" href="#改进的时分复用-统计时分复用stdm">#</a> 改进的时分复用 -- 统计时分复用 STDM</h4><h4 id="波分多路复用wdm"><a class="anchor" href="#波分多路复用wdm">#</a> 波分多路复用 WDM</h4><p>波分多路复用就是 **&lt;font color=&quot;red&quot;&gt;[光的频分多路复用]&lt;/font&gt;**</p><h4 id="码分多路复用cdm"><a class="anchor" href="#码分多路复用cdm">#</a> 码分多路复用 CDM</h4><p>码分多址 (CDMA) 是码分复用的一种方式</p><h4 id="aloha协议-font-colorred不听就说font"><a class="anchor" href="#aloha协议-font-colorred不听就说font">#</a> ALOHA 协议 ---<strong>&lt;font color=&quot;red&quot;&gt; 不听就说 &lt;/font&gt;</strong></h4><p>纯 ALOHA 协议：不监听信道、不按时间槽发送，随机重发。(想发就发)</p><p>时隙 ALOHA 协议：把时间分成若干个相同的时间片，所有用户在时间片开始时刻同步接入网络信道，若发生冲突，则必须等到下一个时间片开始时刻再发送。(控制想发就发的随意性)</p><ol><li>纯 ALOHA 协议比时隙 ALOHA 吞吐量更低，效率更低</li><li>纯 ALOHA 协议想发就发，时隙 ALOHA 只有在时间片段开始时才能发。</li></ol><h4 id="csma协议载波监听多路访问协议-font-colorred先听再说font"><a class="anchor" href="#csma协议载波监听多路访问协议-font-colorred先听再说font">#</a> CSMA 协议 (载波监听多路访问协议)---<strong>&lt;font color=&quot;red&quot;&gt; 先听再说 &lt;/font&gt;</strong></h4><ol><li>CS: 载波监听 / 监听，每一个站在发送数据之前要检测一下总线上是否有其他计算机在发送数据。</li><li>MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线上。</li><li>协议思想：发送帧之前，<strong>监听</strong>信道。</li><li>如何监听：当几个站同时在总线上发数据时，总线上的信号<strong>电压摆动值</strong>会增大。当一个站检测到的信号电压摆动值超过一定门限时，就认为总线上至少有两个站同时在发送数据，表面产生了碰撞，即发生了冲突。</li><li>监听结果：<ol><li>信道空闲：发送完整帧</li><li>信道忙：推迟发送</li></ol></li></ol><h5 id="1-坚持csma"><a class="anchor" href="#1-坚持csma">#</a> 1 - 坚持 CSMA</h5><p>坚持指的是对于监听信道忙之后的坚持。</p><p>1 - 坚持 CSMA 思想：如果一个主机要发送消息，那么它先监听信道。</p><ol><li>空闲则直接传输，不必等待</li><li>忙则一直监听，直到空闲马上传输</li><li>如果有冲突 (一段时间内未收到肯定回复)，则等待一个随机长的时间再监听，重复上述过程。<br>优点：只要媒体空闲，站点就马上发送，避免了媒体利用率的损失。&lt;br&gt;<br>缺点：如果有两个或者两个以上的站点有数据要发送，冲突就不可避免。</li></ol><h5 id="非坚持csma"><a class="anchor" href="#非坚持csma">#</a> 非坚持 CSMA</h5><p>非坚持指的是对于监听信道忙之后就不继续监听。</p><p>非坚持 CSMA 思想：如果一个主机要发送消息，那么它先监听信道。</p><ol><li>空闲则直接传输，不必等待</li><li>忙则等待一个随机的时间之后再进行监听<br>优点：采用随机的重发延迟时间可以减少冲突发送的可能。&lt;br&gt;<br>缺点：可能存在大家都在延迟等待的过程中，使得媒体仍可能处于空闲状态，媒体使用率降低。</li></ol><h5 id="p-坚持csma"><a class="anchor" href="#p-坚持csma">#</a> p - 坚持 CSMA</h5><p>p - 坚持指的是对于监听信道空闲的处理</p><p>p - 坚持 CSMA 思想：</p><ol><li>如果一个主机要发送消息，那么它先监听信道</li><li>空闲则以 p 概率直接传输，不必等待；概率 1-p 等待到下一个时间槽再传输。</li><li>忙则持续监听直到信道空闲在以 p 概率发送。</li><li>若冲突则等到下一个时间槽开始再监听并重复上述过程。<br>优点：既能像非坚持算法那样减少冲突，又能像 1 - 坚持算法那样减少媒体空闲时间的这种方案。&lt;br&gt;<br>缺点：发送冲突后还是要坚持把数据帧发送完，造成了浪费。</li></ol><h4 id="csmacd协议载波监听多点接入碰撞检测协议-font-colorred先听再说边听边说font"><a class="anchor" href="#csmacd协议载波监听多点接入碰撞检测协议-font-colorred先听再说边听边说font">#</a> CSMA/CD 协议 (载波监听多点接入 / 碰撞检测协议)---<strong>&lt;font color=&quot;red&quot;&gt; 先听再说，边听边说 &lt;/font&gt;</strong></h4><ol><li>CS: 载波监听 / 监听，每一个站在<strong>发送数据之前</strong>及<strong>发送数据时</strong>要检测一下总线上是否有其他计算机在发送数据。</li><li>MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线上。</li><li>CD：碰撞检测 (冲突检测)，&quot;<strong>&lt;font color=&quot;red&quot;&gt;[边发送边监听]</strong>&lt;/font&gt;&quot;, 适配器边发送数据边检测信道上信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。</li></ol><h5 id="先听后发为什么还会冲突"><a class="anchor" href="#先听后发为什么还会冲突">#</a> 先听后发为什么还会冲突？</h5><p>因为电磁波在总线上总是以有限的速率传播。</p><h5 id="如何确定碰撞后的重传时机"><a class="anchor" href="#如何确定碰撞后的重传时机">#</a> 如何确定碰撞后的重传时机</h5><p><strong>截断二进制指数规避算法</strong></p><ol><li>确定基本推迟时间为争用期 2τ</li><li>定义参数 k，它等于重传次数，但 k 不超过 10，即 k=min [重传次数，10]。当重传次数不超过 10 次时，k 等于重传次数；当重传次数大于 10 时，k 就不在增大而一直等于 10。</li><li>从离散的整数集合 [0,1,,2^k-1] 中随机抽取一个数 r，重传所需退避时间就是 r 倍的基本退避时间，即 2rτ。</li><li>当重传达 &lt;font color=&quot;red&quot;&gt;<strong>[16 次]</strong>&lt;/font&gt; 仍不能成功时，说明网络太拥挤，认为此帧永远无法正确发出，抛弃此帧并向高层报告出错。</li></ol><p>若连续多次产生冲突，就标明可能有 &lt;font color=&quot;red&quot;&gt;<strong>[较多的站参与争用]</strong>&lt;/font&gt; 信道。使用此算法可使重传需要推迟的平均时间随重传次数的增大而增大，因而减小发送碰撞的概率，有利于整个系统的稳定。</p><h5 id="最小帧长"><a class="anchor" href="#最小帧长">#</a> 最小帧长</h5><p>帧的传输时延至少要两倍于信号在总线中的传播时延</p><p>最小帧长 = 总线传播时延 * 数据传输速率 * 2 = 2τ * 数据传输速率</p><p><strong>以太网规定最短帧长为 64B，凡是长度小于 64B 的都是由于冲突而异常终止的无效帧。</strong></p><h4 id="csmaca协议载波监听多点接入碰撞避免协议-font-colorred先听再说font"><a class="anchor" href="#csmaca协议载波监听多点接入碰撞避免协议-font-colorred先听再说font">#</a> CSMA/CA 协议 (载波监听多点接入 / 碰撞避免协议)---<strong>&lt;font color=&quot;red&quot;&gt; 先听再说 &lt;/font&gt;</strong></h4><ol><li>发送数据前，先检测信道是否空闲。</li><li>空闲则发出<strong> RTS</strong>，RTS 包括发射端的地址、接收端的地址、下一份数据将持续发送的时间等信息；信道忙则等待。</li><li>接收端收到 RTS 后，则响应<strong> CTS</strong></li><li>发送端收到 CTS 后，开始发送数据帧 (同时预约信道：发送方告知其他站点自己要传多久数据)</li><li>接收端收到数据帧后，将用 CRC 来检验数据是否正确，正确则响应 ACK 帧。</li><li>发送方收到 ACK 就可以进行下一个数据帧的发送，若没有则一直重传至规定重发次数为止 (采用二进制指数退避算法来确定随机的推迟时间)。</li></ol><h4 id="csmacd与csmaca"><a class="anchor" href="#csmacd与csmaca">#</a> CSMA/CD 与 CSMA/CA</h4><p>相同点：</p><ol><li>CSMA/CD 与 CSMA/CA 机制都从属于 CSMA 的思路，其核心是 **&lt;font color=&quot;red&quot;&gt;[先听后说]&lt;/font&gt;**。换言之，两个在接入信道之前都须要进行监听。当发现信道空闲后，才能进行接入。<br>不同点：</li><li>传输介质不同: CSMA/CD 用于总线式以太网 (有线)，而 CSMA/CA 用于无线局域网 (无线)。</li><li>载波检测方式不同：因传输介质不同，CSMA/CD 与 CSMA/CA 的检测方式不用。CSMA/CD 通过电缆中电压的变化来检测，当数据发生碰撞时，电缆中的电压会随着发生变化；而 CSMA/CA 采用能量检测 (ED)、载波检测 (CS) 和能量载波混合检测三种检测信道空闲的方式。</li><li>CSMA/CD 检测冲突，CSMA/CA 避免冲突，二者出现冲突后都会进行<strong>有上限的重传</strong>。</li></ol><h4 id="轮询协议"><a class="anchor" href="#轮询协议">#</a> 轮询协议</h4><p>主节点轮流<strong>邀请</strong>从属节点发送数据。</p><h4 id="令牌传递协议"><a class="anchor" href="#令牌传递协议">#</a> 令牌传递协议</h4><ol><li>令牌：一个特殊格式的<strong> MAC</strong> 控制帧，不含任何信息。控制信道的使用，确保同一时刻只有一个结点独占信道。</li><li>每个节点都可以在一定的时间内 (令牌持有时间) 获得发送数据的权利，并不是无限制地持有令牌。</li><li>应用于令牌环网 (<strong>物理星型拓扑、逻辑环型拓扑</strong>)。</li><li>令牌传送方式的网络常用于<strong>负载较重、通信量较大</strong>的网络中。</li></ol><h3 id="局域网"><a class="anchor" href="#局域网">#</a> 局域网</h3><p>在<strong>某一区域内</strong>由多台计算机互连组成的计算机组，使用<strong>广播信道</strong></p><h4 id="局域网介质访问控制方法"><a class="anchor" href="#局域网介质访问控制方法">#</a> 局域网介质访问控制方法</h4><ol><li>CSMA/CD 常用于<strong>总线型局域网</strong>，也用于树形网络</li><li>令牌总线，常用于<strong>总线型局域网</strong>，也用于树形网络</li><li>令牌环， 用于<strong>环型局域网</strong>，比如令牌环网</li></ol><h4 id="局域网的分类"><a class="anchor" href="#局域网的分类">#</a> 局域网的分类</h4><ol><li>以太网 (IEEE802.3)</li><li>令牌环网 (IEEE802.5)</li><li>FDDI 网 (IEEE802.8)</li><li>ATM 网</li><li>无线局域网 (IEEE802.11)</li></ol><h4 id="mac子层和llc子层"><a class="anchor" href="#mac子层和llc子层">#</a> MAC 子层和 LLC 子层</h4><p>IEEE802 标准所描述的局域网参考模型只对应 OSI 参考模型的<strong>数据链路层与物理层</strong>，它将数据链路层划分为<strong>逻辑链路层 LLC 子层</strong>和<strong>介质访问控制 MAC 子层</strong>。</p><ol><li>LLC 负责识别网络层协议，然后对他们进行封装。</li><li>MAC 子层的主要功能包括<strong>数据帧的封装 / 卸装</strong>，<strong>帧的寻址和识别</strong>，<strong>帧的接受与发送</strong>，链路的管理，帧的差错控制等。MAC 子层的存在屏蔽了不同物理链路种类的差异性。</li></ol><h4 id="以太网"><a class="anchor" href="#以太网">#</a> 以太网</h4><p>指由 Xerox 公司创建并由 Xerox、Intel 和 DEC 公司联合开发的 &lt;font color=&quot;red&quot;&gt;<strong> 基带总线局域网规范</strong> &lt;/font&gt;，是当今现有局域网采用的最通用的通信协议标准。以太网络使用<strong> CSMA/CD</strong> 技术。</p><ol><li>造价低廉</li><li>是应用最广泛的局域网技术</li><li>比令牌环网、ATM 网便宜、简单</li><li>满足网络速率要求：10Mb/s-10Gb/s</li></ol><p>以太网标准：</p><ol><li>DIX Ethernet V2: 第一个局域网产品 (以太网) 规约。</li><li>IEEE802.3：IEEE802 委员会 802.3 工作组制定的第一个 IEEE 的以太网标准。(帧格式有一丢丢改动)</li></ol><h5 id="以太网提供无连接-不可靠的服务"><a class="anchor" href="#以太网提供无连接-不可靠的服务">#</a> 以太网提供无连接、不可靠的服务</h5><ol><li>无连接：发送方和接收方之间无<strong>握手过程</strong></li><li>不可靠：不对发送方的数据帧<strong>编号</strong>，接收方不向发送方进行<strong>确认</strong>，差错帧直接丢弃，差错纠正由高层负责。</li></ol><p>&lt;font color=&quot;red&quot;&gt;<strong> 以太网只实现无差错接收，不实现可靠传输。</strong>&lt;/font&gt;</p><h5 id="以太网传输介质与拓扑结构的发展"><a class="anchor" href="#以太网传输介质与拓扑结构的发展">#</a> 以太网传输介质与拓扑结构的发展</h5><p>以太网拓扑：逻辑上总线型，物理上星型。</p><h5 id="10bast-t以太网"><a class="anchor" href="#10bast-t以太网">#</a> 10BAST-T 以太网</h5><ol><li>10BAST-T 是传送<strong>基带信号</strong>的双绞线以太网，T 表示采用双绞线，现 10BAST-T 采用的是<strong>无屏蔽双绞线</strong> (UTP), 传输速率是<strong> 10Mb</strong>/s。</li><li>物理上采用星型拓扑，逻辑上总线型拓扑，每段双绞线最长为 100M。</li><li>采用曼彻斯特编码。</li><li>采用 CSMA/CD 介质访问控制。</li></ol><h5 id="高速以太网"><a class="anchor" href="#高速以太网">#</a> 高速以太网</h5><p>速度<strong>大于 100Mb/s</strong> 的以太网称为高速以太网。</p><ol><li><p>100BAST-T 以太网:</p><ol><li>在<strong>双绞线</strong>上传送<strong> 100Mb/s 基带信号</strong>的<strong>星型</strong>拓扑以太网，仍使用 IEEE802.3 的 CSMA/CD 协议。</li><li>支持全双工和半双工，可在全双工方式下工作而无冲突。</li></ol></li><li><p>吉比特以太网</p><ol><li>在<strong>光纤或者双绞线</strong>上传送<strong> 1Gb/s 信号</strong></li><li>支持全双工和半双工，可在全双工方式下工作而无冲突</li></ol></li><li><p>10 吉比特</p><ol><li>10 吉比特以太网在<strong>光纤</strong>上传送<strong> 10Gb/s 信号</strong>。</li></ol></li></ol><h5 id="以太网mac帧"><a class="anchor" href="#以太网mac帧">#</a> 以太网 MAC 帧</h5><p>最常用的 MAC 帧是<strong>以太网 V2</strong> 的格式。</p><p>以太网 V2 与 IEEE802.3 的区别：</p><ol><li>第三个字段是长度 / 类型</li><li>当长度 / 类型字段值小于 0x600 时，数据字段必须装入 LLC 子层。</li></ol><h4 id="适配器和mac地址"><a class="anchor" href="#适配器和mac地址">#</a> 适配器和 MAC 地址</h4><ol><li>计算机与外界有局域网的连接是通过<strong>通信适配器</strong>的。</li><li>在局域网中，硬件地址又称为物理地址，或<strong> MAC 地址</strong>（实际上是标识符）。</li><li>MAC 地址：每个适配器有一个全球唯一的 48 位二进制地址，前 24 位代表厂家 (由 IEEE 规定)，后 24 位厂家自己指定。常用 6 个十六进制数表示。</li></ol><h4 id="ieee-80211"><a class="anchor" href="#ieee-80211">#</a> IEEE 802.11</h4><p>IEEE 802.11 是<strong>无线局域网</strong>通用的标准，它是由 IEEE 所定义的无线网络通信的标准。</p><h3 id="广域网"><a class="anchor" href="#广域网">#</a> 广域网</h3><p>使用<strong>分组交换技术</strong>。</p><h4 id="ppp协议"><a class="anchor" href="#ppp协议">#</a> PPP 协议</h4><p>点对点协议，目前使用最广泛的数据链路层协议，用户使用拨号电话接入因特网时一般都用 PPP 协议。</p><ol><li>font color=&quot;red&quot;&gt;<strong> 只支持全双工链路。</strong>&lt;/font&gt;</li></ol><p>ppp 协议应满足的要求：</p><ol><li>简单：对于链路层的帧，无需纠错，无需序号，无需流量控制</li><li>封装成帧</li><li>透明传输</li><li>多种网络层协议</li><li>多种类型链路</li><li>差错检测</li><li>检测连接状态</li><li>最大传送单元</li><li>网络层地址协商</li><li>数据压缩协商</li></ol><p>PPP 协议无需满足的要求：</p><ol><li>纠错</li><li>流量控制</li><li>序号</li><li>不支持多点线路</li></ol><p>PPP 协议组成部分</p><ol><li>一个将 IP 数据报封装到串行链路 (同步串行 / 异步串行) 的方法</li><li>链路控制协议 LCP：建立并维护数据链路连接。(<strong>身份验证</strong>)</li><li>网络控制协议 NCP：PPP 可支持多种网络层协议，每个不同的网络层协议都要一个相应地 NCP 来配置，为网络层协议建立和配置逻辑连接。</li></ol><h4 id="hdlc协议"><a class="anchor" href="#hdlc协议">#</a> HDLC 协议</h4><p>高级数据链路控制协议，是一个在同步网上传输数据、<strong>面向比特</strong>的数据链路层协议。</p><ol><li>&lt;font color=&quot;red&quot;&gt;<strong> 采用全双工通信。</strong>&lt;/font&gt;</li><li>所有帧采用<strong> CRC 检验</strong>，对信息帧进行顺序<strong>编号</strong>，可防止漏收或重份，传输可靠性高。</li></ol><h5 id="hdlc的站"><a class="anchor" href="#hdlc的站">#</a> HDLC 的站</h5><ol><li>主站</li><li>从站</li><li>复合站</li></ol><p>三种数据操作方式</p><ol><li>正常响应方式</li><li>异步平衡方式</li><li>异步响应方式</li></ol><p>HDLC 帧的类型：</p><ol><li>信息帧，用来传输数据信息</li><li>监督帧，用来流量控制盒差错控制</li><li>无编号帧，用来提供对链路的建立、拆除等多种控制功能。</li></ol><h4 id="ppp协议和hdlc协议"><a class="anchor" href="#ppp协议和hdlc协议">#</a> PPP 协议和 HDLC 协议</h4><p>相同点：</p><ol><li>只支持全双工链路</li><li>都可以实现透明传输</li><li>都可以实现差错检测，但不纠正差错</li></ol><p>不同点：</p><ol><li>PPP 协议面向字节，HDLC 面向比特</li><li>PPP 协议不可靠，HDLC 协议可靠</li><li>PPP 协议无序号和确认机制，HDLC 协议有编号和确认机制</li><li>PPP 协议有 2B 的协议字段，HDLC 无</li></ol><h3 id="链路层设备"><a class="anchor" href="#链路层设备">#</a> 链路层设备</h3><h4 id="网桥"><a class="anchor" href="#网桥">#</a> 网桥</h4><p>网桥根据<strong> MAC 帧的目的地址</strong>对帧进行<strong>转发</strong>和<strong>过滤</strong>。</p><p>网桥优点：</p><ol><li>过滤通信量，增大吞吐量</li><li>扩大了物理范围</li><li>提高可靠性</li><li>可互连不同物理层、不同 MAC 子层和不同速率的以太网。</li></ol><h4 id="透明网桥源路由网桥"><a class="anchor" href="#透明网桥源路由网桥">#</a> 透明网桥 &amp; 源路由网桥</h4><ol><li>透明网桥：指以太网上的站点并不知道所发送的帧将经过哪几个网桥，是一种即插即用设备 -- 自学习。</li><li>源路由网桥：在发送帧时，把详细的最佳路由信息 (路由最少 / 时间最短) 放在帧的首部中。方法：源站以广播方式向欲通信的目的站发送一个<strong>发现帧</strong>。</li></ol><h4 id="多接口网桥-以太网交换机"><a class="anchor" href="#多接口网桥-以太网交换机">#</a> 多接口网桥 -- 以太网交换机</h4><p>独占媒体带宽</p><ol><li><p>直通式交换机</p><ol><li>查完目的地址 (6B) 就立刻转发。</li><li>延迟小，可靠性低，无法支持具有不同速率的端口的交换。</li></ol></li><li><p>存储转发式交换机 (常用)</p><ol><li>将帧放入高速缓存，并检查是否正确，正确则转发，错误则丢弃。</li><li><strong>延迟大，可靠性高</strong>，可以支持具有不同速率的端口的交换。</li></ol></li></ol><h2 id="应用"><a class="anchor" href="#应用">#</a> 应用</h2>]]></content>
      <categories>
        <category>考研</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>408计算机网络-计算机网络体系</title>
    <url>/kaoyan/internet/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="计算机网络"><a class="anchor" href="#计算机网络">#</a> 计算机网络</h3><p>是一个将分散的、具有独立功能的计算机系统，通过通信设备和线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。</p><p>计算机网络是互连得、自治的计算机集合</p><ol><li>互连 - 通过通信链路互联互通</li><li>自治 - 无主从关系</li></ol><p>计算机网络的功能</p><ol><li>数据通信</li><li>资源共享</li><li>分布式处理</li><li>提高可靠性</li><li>负载均衡</li></ol><h3 id="计算机网络的发展"><a class="anchor" href="#计算机网络的发展">#</a> 计算机网络的发展</h3><h4 id="第一阶段"><a class="anchor" href="#第一阶段">#</a> 第一阶段</h4><p>ARPAnet 阿帕网 --&gt; internet (interconnected netword) 互联网 --&gt; Internet 因特网</p><ol><li>网络把许多的计算机连接在一起</li><li>互联网把许多的网络连接在一起</li><li>因特网是世界上最大的互联网</li></ol><h4 id="第二阶段-三级结构"><a class="anchor" href="#第二阶段-三级结构">#</a> 第二阶段 - 三级结构</h4><h4 id="第三阶段-多层次isp结构"><a class="anchor" href="#第三阶段-多层次isp结构">#</a> 第三阶段 - 多层次 ISP 结构</h4><h3 id="计算机网络的组成"><a class="anchor" href="#计算机网络的组成">#</a> 计算机网络的组成</h3><p>组成部分：硬件、软件、协议（一系列规则和约定的集合）</p><p>工作方式</p><ol><li>边缘部分</li><li>核心部分</li></ol><p>功能组成<br>数据通信和资源共享</p><ol><li>通信子网：实现数据通信</li><li>资源子网：实现资源共享 / 数据处理</li></ol><h3 id="计算机网络的分类"><a class="anchor" href="#计算机网络的分类">#</a> 计算机网络的分类</h3><p>按范围分布</p><ol><li>广域网 WAN--&gt; 交换技术</li><li>城域网 MAN</li><li>局域网 LAN--&gt; 广播技术</li><li>个人区域网 PAN</li></ol><p>按使用者分</p><ol><li>公用网</li><li>专用网</li></ol><p>按交换技术分</p><ol><li>电路交换</li><li>报文交换</li><li>分组交换</li></ol><p>按拓扑结构分</p><ol><li>总线型</li><li>星型</li><li>环型</li><li>网状型 -- 常用于广域网</li></ol><p>按传输技术分</p><ol><li>广播式网络 -- 共享公共通信信道</li><li>点对点网络 -- 使用分组存储转发和路由选择机制</li></ol><h3 id="计算机网络的标准化工作"><a class="anchor" href="#计算机网络的标准化工作">#</a> 计算机网络的标准化工作</h3><p>标准的分类</p><ol><li>法定标准：osi</li><li>事实标准: tcp/ip</li></ol><h3 id="标准化工作的相关组织"><a class="anchor" href="#标准化工作的相关组织">#</a> 标准化工作的相关组织</h3><p>国际标准化组织 ISO-- 制定了 OSI 参考模型、HDLC 协议<br>国际电信联盟 ITU-- 制定通信规则<br>国际电气电子工程师协会 IEEE-- 学术机构、IEEE802 系列标准、5G<br>internet 工程任务组 IETF-- 负责因特网相关标准的制定</p><h3 id="计算机网络性能指标"><a class="anchor" href="#计算机网络性能指标">#</a> 计算机网络性能指标</h3><h4 id="速率"><a class="anchor" href="#速率">#</a> 速率</h4><p>即数据率或者称数据传输率或比特率</p><h4 id="比特"><a class="anchor" href="#比特">#</a> 比特</h4><p>表现形式：1/0 单位：位</p><p>连接在计算机网络上的主机在数字信道上传送数据位数的速率单位是 b/s, kb/s, Mb/s, Gb/s, Tb/s</p><h4 id="存储容量"><a class="anchor" href="#存储容量">#</a> 存储容量</h4><p>1Byte (字节)=8bit (比特)</p><h4 id="带宽"><a class="anchor" href="#带宽">#</a> 带宽</h4><p>计算机网络中，带宽用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的 “最高数据率”。单位是 b/s, kb/s, Mb/s, Gb/s, Tb/s</p><h4 id="吞吐量"><a class="anchor" href="#吞吐量">#</a> 吞吐量</h4><p>表示在单位时间内通过某个网络 (或信道、接口) 的数据量。单位是 b/s, kb/s, Mb/s 等<br>吞吐量受网络的带宽限制</p><h4 id="时延"><a class="anchor" href="#时延">#</a> 时延</h4><p>指数据从网络的一端传送到另一端所需的时间。也叫延迟，单位是 s</p><ol><li>发送时延：从发送分组的第一个比特算起，到该分组的最后一个比特发送完毕所需的时间。发送时延 = 数据长度 / 信道带宽</li><li>传播时延：取决于电磁波传播速度和链路长度。传播时延 = 信道长度 / 电磁波在信道上的传播速率</li><li>排队时延</li><li>处理时延</li></ol><p>时延带宽积<br>时延带宽积 = 传播时延 * 带宽<br>以比特位单位的链路长度，即 “某段链路现在有多少比特”</p><h4 id="往返使用rtt"><a class="anchor" href="#往返使用rtt">#</a> 往返使用 RTT</h4><p>从发送方发送数据开始，到发送方收到接收方的确认，总共经历的时延。<br>RTT 越大，在收到确认之前，可以发送的数据越多。&lt;br&gt;<br>RTT 包括</p><ol><li>往返传播时延 = 传播时延 * 2</li><li>末端处理时间</li></ol><p>利用率</p><ol><li>信道利用率：有数据通过的时间 /（有 + 无）数据通过时间</li><li>网络利用率：信道利用率加权平均值</li></ol><h3 id="综合概念"><a class="anchor" href="#综合概念">#</a> 综合概念</h3><ol><li>网络体系结构是从功能上描述计算机网络结构 &lt;br&gt;</li><li>计算机网络体系结构简称网络体系结构是分层结构 &lt;br&gt;</li><li>每层遵循某个网络以完成本层功能 &lt;br&gt;</li><li>计算机网络体系结构是计算机网络的各层及其协议的集合 &lt;br&gt;</li><li>第 N 层在向 N+1 层提供服务时，此服务不仅包含第 N 层本身的功能，还包含由下层服务提供的功能 &lt;br&gt;</li><li>仅仅在相邻层有接口，且所提供的服务的具体实现细节对上一层完全屏蔽 &lt;br&gt;</li><li>体系结构是抽象的，而实现是指能运行的一些软件和硬件 &lt;br&gt;</li></ol><p>协议与服务有何区别？</p><ol><li>协议是水平的，即协议是控制两个对等实体之间通信的规则。服务是垂直的。即服务室由下层通过层间接口向上层提供。</li><li></li></ol>]]></content>
      <categories>
        <category>考研</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机操作系统概述</title>
    <url>/kaoyan/system/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="操作系统的概念"><a class="anchor" href="#操作系统的概念">#</a> 操作系统的概念</h2><ol><li>** 操作系统是系统资源的管理者。** 控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境。它是计算机系统中最基本的系统软件。</li><li><strong>操作系统向上层提供方便易用的服务。</strong></li><li><strong>最接近硬件的一层软件。</strong></li></ol><p>操作系统提供的功能：</p><ol><li>设备管理</li><li>存储器管理</li><li>处理机 (CPU) 管理</li><li>文件管理</li></ol><p>操作系统向上层提供的易用的服务:</p><ol><li>GUI: 图形化用户接口</li><li>命令接口<ol><li>联机命令接口 (交互式命令接口)</li><li>脱机命令接口 (批处理命令接口)</li></ol></li><li>程序接口：可以再程序中进行系统调用来使用程序接口。普通用户不能直接使用程序接口，只能通过程序代码间接使用。有一系列的系统调用组成。</li></ol><h3 id="操作系统的功能和目标"><a class="anchor" href="#操作系统的功能和目标">#</a> 操作系统的功能和目标</h3><p>需要实现<strong>对硬件机器的拓展</strong>。&lt;br&gt;<br>没有任何软件支持的计算机称为<strong>裸机</strong>。在裸机上安装的操作系统，可以提供资源管理功能和方便用户的服务功能，将裸机改造成功能更强，使用更方便的机器。&lt;br&gt;<br>通常把覆盖了软件的机器称为<strong>扩充机器</strong>，又称之为<strong>虚拟机</strong>.</p><p>操作系统对硬件机器的扩展：&lt;br&gt;<br>将 CPU、内存、显示器、键盘灯硬件合理地组合起来，让各种硬件能够相互协调配合，实现更复杂的功能。</p>]]></content>
      <categories>
        <category>考研</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>408计算机组成原理-计算机系统概述</title>
    <url>/kaoyan/computer-composition/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是计算机系统"><a class="anchor" href="#什么是计算机系统">#</a> 什么是计算机系统</h2><p>计算机系统 = 硬件 + 软件</p><h3 id="软件"><a class="anchor" href="#软件">#</a> 软件</h3><ol><li>系统软件：用来管理整个计算机系统<ol><li>操作系统</li><li>数据库管理系统</li><li>标准程序库</li><li>网络软件</li><li>语言处理程序</li><li>服务程序</li></ol></li><li>应用软件：按任务需要编制的各种程序</li></ol><h2 id="11-计算机发展历程"><a class="anchor" href="#11-计算机发展历程">#</a> 1.1 计算机发展历程</h2><h3 id="计算机的四代变化"><a class="anchor" href="#计算机的四代变化">#</a> 计算机的四代变化</h3><ol><li>1946-1957 电子管时代（语言：机器语言，内存：磁鼓、汞延迟线，外存：穿孔卡片、纸带）</li><li>1958-1964 晶体管时代（语言：面向过程的 FORTRAN，内存：磁芯存储器，外存：磁带，有了操作系统的雏形）</li><li>1965-1971 中小规模集成电路时代（高级语言迅速发展，有了分时操作系统，内存：半导体存储器，外存：磁带、磁盘）</li><li>1972 至今 超大规模集成电路时代（出现了微处理器 (cpu)，微型计算机）</li></ol><h3 id="计算机元件的更新换代"><a class="anchor" href="#计算机元件的更新换代">#</a> 计算机元件的更新换代</h3><ol><li>摩尔定律。当价格不变时，集成电路上的晶体管数目约隔 18 个月便会增加一倍，性能也提升一倍。18 个月后同样的钱买到的 CPU，后者性能是前者的两倍。</li><li>半导体存储器发展。1970 年第一个半导体存储器由仙童半导体公司生产。半导体存储器到现在经历了 11 代发展。</li><li>微处理器。处理器中的 32 位，64 位是指计算机进行一次整数运算所能处理的二进制数据的位数。</li></ol><h3 id="计算机的分类和发展方向"><a class="anchor" href="#计算机的分类和发展方向">#</a> 计算机的分类和发展方向</h3><p>两极分化：<br>一极是微信计算机向更微型化、网络化、高性能、多用途方向发展。&lt;br&gt;<br>另一极是巨型化向更巨型化、超高速、并行处理、智能化方向发展。</p><h3 id="冯诺依曼计算机的特点"><a class="anchor" href="#冯诺依曼计算机的特点">#</a> 冯诺依曼计算机的特点</h3><ol><li>计算机由五大部件组成：运算器、储存器、控制器、输入设备、输出设备</li><li>指令和数据以同等地位存于存储器，并可按地址寻访</li><li>指令和数据用二进制表示</li><li>指令有操作码和地址码组成<br>5 . 指令在存储器内按顺序存放（<strong>存储程序</strong>）.exe 文件执行时先按顺序存放到存储器中，然后存储器一条条执行</li><li>机器以运算器为中心，输入输出设备与存储器间的数据传送通过运算器完成</li></ol><p>现代计算机：&lt;font color=&quot;red&quot;&gt;<strong> 以存储器为核心</strong> &lt;/font&gt;。CPU = 运算器 + 控制器。</p><p>在计算机系统中，<strong>软件和硬件在逻辑上是 &lt;font color=&quot;red&quot;&gt; 等效 &lt;/font &gt; 的</strong>。</p><h3 id="存储器"><a class="anchor" href="#存储器">#</a> 存储器</h3><p>计算机的存储部件，用来存放数据和程序</p><p>存储器分为主存储器 (内存) 和辅存储器 (外存)。CPU 能够直接访问主存，辅存的信息比如调入主存，cpu 才能访问。</p><p>主存储器构成：</p><ol><li>存储体：用来存放数据，由一系列存储元件构成，用来存放二进制 0 或 1，数据在存储体内按地址存储。<ol><li>存储单元：每个存储单元存放一串二进制代码</li><li>存储字 (word)：存储单元中二进制代码的组合</li><li>存储字长：存储单元中二进制代码的位数</li><li>即存储二进制的电子元件，每个存储元件可存 1bt</li></ol></li><li>地址寄存器 (MAR) 存放访存地址，用于寻址，其位数对应存储单元的个数，如 MAR 有 10 位，则有 2^10=1024 个单元，为 1k</li><li>数据寄存器 (MDR) 用于暂存从存储体中读或写的信息，其位数代表存储字长。</li></ol><p>MAR 与 MDR 虽然是存储器的一部分，但在现代 CPU 中是存在于 CPU 中，高速缓存 (Cache) 也存在 CPU 中</p><h3 id="运算器"><a class="anchor" href="#运算器">#</a> 运算器</h3><p>用于实现算术运算 (加减乘除)、逻辑运算 (与或非)。</p><p>基本组成</p><ol><li>ACC: 累加器，用来存放操作数，或运算结果</li><li>MQ：乘商寄存器，在乘、除运算时，用来存放操作数和运算结果</li><li>X：通用的操作数寄存器，用来存放操作数。</li><li>ALU：算术逻辑单元，通过内部复杂的电路实现算术运算、逻辑运算。</li></ol><h3 id="控制器"><a class="anchor" href="#控制器">#</a> 控制器</h3><p>基本组成</p><ol><li>CU：控制单元，分析指令，给出控制信号</li><li>IR：指令寄存器，存放当前执行指令</li><li>PC：程序计数器，存放下一条指令地址，有自动加 1 功能</li></ol><p>完成一条指令：取指令 (PC--&gt;IR)---&gt; 分析指令 (CU)----&gt; 执行 (CU)</p><p><strong>CPU 区分指令和数据的依据: &lt;font color=&quot;red&quot;&gt; 指令周期的不同阶段 &lt;/font&gt;</strong></p><h3 id="计算机系统的层次结构"><a class="anchor" href="#计算机系统的层次结构">#</a> 计算机系统的层次结构</h3><p>虚拟机器 M4 (高级机器语言：用编译程序翻译成汇编语言程序)---&gt; 虚拟机器 M3 (汇编语言机器：用汇编程序翻译成机器语言程序)--&gt; 虚拟机器 M2 (操作系统机器：向上提供 &quot;广义指令&quot;(系统调用))---&gt; 传统机器 M1 (用机器语言的机器：执行二进制机器指令)---&gt; 微程序机器 M0 (微指令系统：由硬件直接执行微指令)</p><p>M4,M3,M2 属于软件层次，M1,M0 属于硬件层次</p><p>计算机系统层次，<strong>&lt;font color=&quot;red&quot;&gt; 下层是上层的基础，上层是下层的扩展 &lt;/font&gt;</strong></p><p>编译程序：将高级语言编写的源程序<strong>全部语句一次全部翻译成机器语言程序</strong>，而后再执行机器语言程序 (只需要翻译一次)<br>解释程序：将源程序的一条语句翻译成对于机器语言的语句，并立即执行。紧接着再翻译下一句。(每次执行都要翻译)</p><h3 id="计算机工作的过程"><a class="anchor" href="#计算机工作的过程">#</a> 计算机工作的过程</h3><ol><li>把程序和数据装入主存储器</li><li>将源程序换为可执行文件</li><li>从可执行文件的首地址开始逐条执行指令</li></ol><h3 id="什么是存储程序原理"><a class="anchor" href="#什么是存储程序原理">#</a> 什么是存储程序原理</h3><p>存储程序是指将指令以代码的形式事先输入计算机主存储器，然后按其在存储器中的首地址执行程序的第一条指令，以后就按该程序的规定顺序执行其他指令，直至程序执行结束。</p><h2 id="13-计算机的主要性能指标"><a class="anchor" href="#13-计算机的主要性能指标">#</a> 1.3 计算机的主要性能指标</h2><h3 id="存储器的性能指标"><a class="anchor" href="#存储器的性能指标">#</a> 存储器的性能指标</h3><p>MAR 位数反应存储单元的个数，MDR 位数 = 存储字长 = 每个存储单元的大小。<br>总容量 = 存储单元个数 x 存储字长 bit = 存储单元个 = 数存储字长 x 存储字长 / 8 Byte</p><h3 id="cpu的性能指标"><a class="anchor" href="#cpu的性能指标">#</a> CPU 的性能指标</h3><ol><li>CPU 主频: CPU 内数字脉冲信号震荡的频率。每秒内 CPU 数字脉冲信号震荡的次数 (单位：HZ)。CPU 主频 = 1 / CPU 时钟周期。</li><li>CPU 时钟周期：每个 CPU 脉冲的时间 (单位：微妙、纳秒)。</li><li>CPI：执行一条指令所需要的时钟周期数。</li><li>IPS: 每秒执行多少条指令。IPS= 主频 / 平均 CPI<ol><li>MIPS，即每秒执行百万条指令。</li></ol></li><li>FLOPS：每秒执行多少次浮点运算。<ol><li>MFLOPS</li><li>GFLOPS</li><li>TFLOPS<br>&lt;font color=&quot;red&quot;&gt;<strong> 执行一条指令的耗时 = CPI * CPU 时钟周期</strong> &lt;/font&gt;<br>CPU 执行时间 = CPU 时钟周期数 / 主频 = (指令条数 * CPI)/ 主频</li></ol></li></ol><h3 id="系统整体性能的指标"><a class="anchor" href="#系统整体性能的指标">#</a> 系统整体性能的指标</h3><h4 id="数据通路带宽"><a class="anchor" href="#数据通路带宽">#</a> 数据通路带宽</h4><p>数据总线一次所能并行传送信息的位数（各硬件部件通过数据总线传输数据）</p><h4 id="吞吐量"><a class="anchor" href="#吞吐量">#</a> 吞吐量</h4><p>指系统在单位时间内处理请求的数量。</p><h4 id="响应时间"><a class="anchor" href="#响应时间">#</a> 响应时间</h4><p>指从用户向计算机发送一个请求，该系统对该请求作出响应并获得所需结果的等待时间。</p><h4 id="基准程序跑分软件"><a class="anchor" href="#基准程序跑分软件">#</a> 基准程序 (跑分软件)</h4><p>是用来测量计算机处理速度的一种实用程序，以便于被测量的计算机性能可以与运行相同程序的其它计算机性能进行比较。</p><h3 id="机器字长"><a class="anchor" href="#机器字长">#</a> 机器字长</h3><p>指计算机进行一次整数运算所能处理的二进制数据的位数。机器字长一般等于内部寄存器的大小。</p><h2 id="思考问题"><a class="anchor" href="#思考问题">#</a> 思考问题</h2><h3 id="主频高的cpu一定比主频低的cpu快吗"><a class="anchor" href="#主频高的cpu一定比主频低的cpu快吗">#</a> 主频高的 CPU 一定比主频低的 CPU 快吗？</h3><p>不一定。还要看 CPI 和指令系统。</p>]]></content>
      <categories>
        <category>考研</category>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>考研</tag>
        <tag>计算机组成</tag>
      </tags>
  </entry>
  <entry>
    <title>408计算机网络-物理层</title>
    <url>/kaoyan/internet/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%89%A9%E7%90%86%E5%B1%82/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="通信基础"><a class="anchor" href="#通信基础">#</a> 通信基础</h2><h3 id="基本概念"><a class="anchor" href="#基本概念">#</a> 基本概念</h3><p>物理层解决如何 &lt;font color=Red&gt;<strong> 在各种计算机的传输媒体上传输数据比特流</strong> &lt;/font&gt;，而不是指 &lt; font color=Red&gt;<strong> 具体的传输媒体</strong> &lt;/font&gt;。</p><p>物理层主要任务：确定与传输媒体接口有关的一些特性 ——&gt; 定义标准</p><ol><li>机械特性。定义物理连接的特性，规定物理连接时采用的规格，接口形状，引线数目，引脚数量和排列情况。</li><li>电气特性。规定传输二进制位时，线路上信号的电压范围、阻抗匹配、传输速率和距离限制等。</li><li>功能特性。指明某条线上出现的某一电平表示何种意义，接口部件的信号线用途。</li><li>规程特性。定义各条物理线路的工作规程和时序关系。</li></ol><h4 id="数据通信相关术语"><a class="anchor" href="#数据通信相关术语">#</a> 数据通信相关术语</h4><ol><li>数据 data：传送信息的实体，通常是有意义的符号序列。数据通信指在不同计算机之间传输表示信息的二进制数 0、1 序列的过程。</li><li>信号：数据的电气 / 电磁的表现，是数据在传输过程中的存在形式。<ol><li>数字信号 / 离散信号：代表消息的参数的取值是离散的。</li><li>模拟信号 / 连续信号：代表消息的参数的取值是连续的。</li></ol></li><li>信源：产生和发送数据的源头。</li><li>信宿：接受数据的终点。</li><li>信道：信号的传输媒介。<ol><li>按传输信号分：模拟信道 (传送模拟信号) 数字信号 (传送数字信号)</li><li>按传输介质分：无线信道 有线信道</li></ol></li></ol><h4 id="三种通信方式"><a class="anchor" href="#三种通信方式">#</a> 三种通信方式</h4><ol><li>单工</li><li>半双工</li><li>全双工</li></ol><h4 id="数据传输方式"><a class="anchor" href="#数据传输方式">#</a> 数据传输方式</h4><ol><li>串行传输 -- 将表示一个字符的 8 位二进制数按由低位到高位的顺序依次发送</li><li>并行传输 -- 将一个字符的 8 位二进制数同时通过 8 条信道发送</li></ol><h4 id="同步传输异步传输"><a class="anchor" href="#同步传输异步传输">#</a> 同步传输 &amp; 异步传输</h4><ol><li>同步传输 --&gt; 在同步传输的模式下，数据的传送是以一个数据区块为单位，因此同步传输又称为区块传输。在传输数据时，需先送出一个或者多个同步字符，再送出整批的数据。</li><li>异步传输</li></ol><h4 id="码元"><a class="anchor" href="#码元">#</a> 码元</h4><p>是指用一个固定时长的信号波形（数字脉冲）。是数字信号中数字信号的计量单位。当码元的离散状态由 M 个时，此时码元为 M 进制码元。1 码元可以携带多个比特的信息量。<br>K 进制码元 ---4 进制码元 ——&gt; 码元的离散状态由 4 个 ——&gt;4 种高低不同的信号波形 00、01、10、11</p><h4 id="速率"><a class="anchor" href="#速率">#</a> 速率</h4><p>也叫数据率，指数据的传输速率。可以用码元传输速率和信息传输速率表示。</p><ol><li>码元传输速率：表示单位时间内数字通信系统所传输的码元个数</li></ol><h4 id="带宽"><a class="anchor" href="#带宽">#</a> 带宽</h4><ol><li>在模拟信号系统中，高频与低频之间的差值就是系统的通频带宽，单位是 HZ</li><li>在数字设备中，表示单位时间内从网络的某一点到另一点所能通过的最高数据率 / 单位时间内通过链路的数量，单位是比特每秒</li></ol><h3 id="两个公式只有在这两个公式这带宽才用hz"><a class="anchor" href="#两个公式只有在这两个公式这带宽才用hz">#</a> 两个公式（只有在这两个公式这带宽才用 HZ）</h3><h4 id="失真"><a class="anchor" href="#失真">#</a> 失真</h4><p>影响失真程度的因素：</p><ol><li>码元传输速率</li><li>信号传输距离</li><li>噪声干扰</li><li>传输媒体质量</li></ol><p>失真的一种现象 -- 码间串扰 &lt;br&gt;<br>接收端接收到的信号波形失去了码元之间清晰界限的现象</p><h4 id="奈氏准则奈奎斯特定理"><a class="anchor" href="#奈氏准则奈奎斯特定理">#</a> 奈氏准则（奈奎斯特定理）</h4><p>在理想低通（无噪声，带宽受限）条件下，为了避免码间串扰。极限码元传输速率为 2WBaud，W 是信道带宽，单位是 HZ。&lt;br&gt;<br>奈氏准则求极限数据率，理想低通信道下的极限数据传速率 = 2Wlog2V</p><p>根据奈氏准则得出结论：</p><ol><li>在任何信道中，码元传输的速率是有上限的。若传输速率超过此上限。就会出现严重的码间串扰问题，是接收端对码元的完全正确识别成为不可能。</li><li>信道的频带越宽，就可以用更高的速率进行码元的有效传输</li><li>奈氏准则给出了码元传输速率的限制，但并没有对信息传输速率给出限制</li><li>由于码元的传输速率受奈氏准则的制约，所以要提高数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量。这就需要采用多元制的调制方法。</li></ol><h4 id="香农定理"><a class="anchor" href="#香农定理">#</a> 香农定理</h4><p>在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。&lt;br&gt;<br>如果题目中给出的信噪比带有单位 dB，则需要先求 S/N：&lt;br&gt;<br>信噪比 (dB) = 10log10 (S/N) &lt;br&gt;<br>信道的极限数据传输速率 = Wlog2 (1+S/N)&lt;br&gt;</p><p>根据香农定理得出结论:</p><ol><li>信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高</li><li>对一定的传输带宽和一定的信噪比，信息传输速率的上限就确定了</li><li>只要信息的传输速率低于信道的极限传输速率，就一定能找到某种方法来实现无差错的传输</li><li>香农定理得出的为极限信息传输速率，实际信道能达到的传输速率要比它低不少</li></ol><h3 id="数据交换方式"><a class="anchor" href="#数据交换方式">#</a> 数据交换方式</h3><h4 id="电路交换"><a class="anchor" href="#电路交换">#</a> 电路交换</h4><p>电路交换原理：在数据传输期间，源节点与目的节点之间有一条由中间节点构成的专用物理连接线路，在数据传输结束之前，这条线路一直保持 &lt;br&gt;<br>电路交换的阶段：建立连接 (呼叫 / 电路建立) --&gt; 通信 (数据传输) --&gt; 释放连接 (拆除电路)&lt;br&gt;<br>特点：独占资源。适用于远程批处理信息传输或系统间实时性要求高的大量数据传输的情况。&lt;br&gt;</p><h4 id="报文交换"><a class="anchor" href="#报文交换">#</a> 报文交换</h4><p>报文：是网络中交换与传输的数据单元，即站点一次性要送的数据块。&lt;br&gt;<br>报文交换的原理：无需在两个站点之间建立一条专用通路，其数据传输的单位是报文，传送过程采用存储转发的方式。&lt;br&gt;</p><h4 id="分组交换"><a class="anchor" href="#分组交换">#</a> 分组交换</h4><p>分组：大多数计算机网络都不能连续地传送任意长的数据，所以实际上网络系统把数据分割成小块，然后逐块地发送，这种小块称作分组 (packet)&lt;br&gt;<br>分组交换原理：分组交换与报文交换工作方式相同，都采用存储转发。形式上差别，分组交换网中要限制所传输的数据单位的长度，一般选 128B。&lt;br&gt;</p><ol><li>数据报方式<ol><li>数据报方式为网络层提供无连接服务。发送方可随时发送分组，网络中的节点可随时接收分组。(无连接服务：不事先为分组的传输确定传输路径，每个分组独立确定传输路径)</li><li>同一报文的不同分组达到目的结点时可能发生乱序、重复与丢失。</li><li>每个分组在传输过程中都必须携带源地址和目的地址，以及分组号</li><li>分组在交换结点存储转发时，需要排队等候处理，这会带来一定的时延。当通过交换结点的通信量较大或网络发送拥塞时，这种时延会大大增加，交换结点还可能根绝情况丢弃部分分组。</li><li>网络具有冗余路径，当某一交换结点或一段链路出现故障时，可相应地更新转发表，寻找另一条路径转发分组，对故障的适应能力强，适用于突发性通信，不适于长报文，会话式通信。</li></ol></li><li>虚电路方式<br>虚电路将数据报方式和电路交换方式结合。<br>一条源主机到目的主机类似于电路的路径 (逻辑连接)，路径上所有结点都要维持这条虚电路的建立，都维持一张虚电路表。<ol><li>虚电路方式为网络层提供连接服务。源节点和目的结点之间建立一条逻辑连接，而非实际物理连接。(连接服务：首先为分组的传输确定传输路径，然后沿该路径传输系列分组，传输结束后拆除连接)</li><li>一次通信的所有分组都通过虚电路顺序传送，分组不需要携带源地址<br>目的地址等信息，同一报文的不同分组到达目的结点时不会乱序、重复和丢失。</li><li>分组通过虚电路上的每个节点时，节点只进行差错检测，不需要路由选择。</li><li>每个节点可能与多个节点之间建立虚电路，每条虚电路支持特定两个端系统间的数据传输，可以对两个数据端点的流量进行控制。两个端系统之间也可以有多条虚电路为不同的进程服务。</li><li>致命弱点：当网络中的某个节点或者某条链路出故障而彻底失效时，则所有经过该节点或者该链路的虚电路将遭到破坏</li></ol></li></ol><h2 id="编码与调制"><a class="anchor" href="#编码与调制">#</a> 编码与调制</h2><ol><li>基带信号 --&gt; 将数字信号 1 和 0 直接用两种不同的电压表示，再送到数字信道上去传输 (基带传输)</li><li>宽带信号 --&gt; 将基带信号进行调制后形成的频分复用模拟信号，再传送到模拟信道上去传输 (宽带传输)</li></ol><p>再传输距离较近时，计算机网络采用基带传输方式。在距离较远时，计算机网络采用宽带传输方式。</p><p>数字数据 --（数字发送器）-&gt; 数字信号 编码 &lt;br&gt;<br>数字数据 --（调制器）-&gt; 模拟信号 调制 &lt;br&gt;</p><p>模拟数据 --（PCM 编码器）-&gt; 数字信号 编码 &lt;br&gt;<br>模拟数据 --（放大器调制器）-&gt; 模拟信号 调制 &lt;br&gt;</p><p>数字数据编码为数字信号</p><ol><li>非归零编码 (NRZ)</li><li>曼彻斯特编码 --&gt; 一个码元中信号变化 2 次</li><li>差分曼彻斯特编码</li><li>归零编码 (RZ)</li><li>反向不归零编码 (NRZI)</li><li>4B/5B 编码</li></ol><p>数字数据调制为模拟信号</p><p>模拟数据编码为数字信号</p><h2 id="传输介质设备"><a class="anchor" href="#传输介质设备">#</a> 传输介质 &amp; 设备</h2><h3 id="传输介质"><a class="anchor" href="#传输介质">#</a> 传输介质</h3><h4 id="导向传输介质"><a class="anchor" href="#导向传输介质">#</a> 导向传输介质</h4><p>电磁被导向沿着固体媒介 (铜线 / 光纤) 传播。&lt;br&gt;</p><ol><li><p>双绞线。最古老，最常用的传输介质，由两根采用一定规则并排绞合的、相互绝缘的铜导线组成。</p><ol><li>屏蔽双绞线 (STP)</li><li>非屏蔽双绞线 (UTP)</li></ol></li><li><p>同轴电缆</p><ol><li>基带同轴电缆，传送基带数字信号</li><li>宽带同轴电缆，传送宽带信号</li></ol></li><li><p>光纤</p><ol><li><p>多模光纤<br>定义：有多种传输光信号模式的光纤<br>光源：发光二极管<br>易失真，适合近距离传输</p></li><li><p>单模光纤<br>定义：一种在横向模式直接传输光信号的光纤<br>光源：定向性很好的激光二极管<br>特点：衰耗小，适合远距离传输</p></li></ol><p>光纤的特点：&lt;br&gt;</p><ol><li>传输损耗小</li><li>抗雷电和电磁干扰性能好</li><li>保密性好，不易被窃听和截取数据</li><li>体积小、重量轻</li></ol></li></ol><h4 id="非导向传输介质"><a class="anchor" href="#非导向传输介质">#</a> 非导向传输介质</h4><p>自由空间，介质可以是空气、真空、海水等。</p><ol><li><p>无线电波：信号向所有方向传播。较强穿透能力，可传远距离，广泛用于通信领域。</p></li><li><p>微波：信号固定方向传播。微波通信频率较高、频段范围宽，因此数据率很高。</p><ol><li>地面微波接力通信</li><li>卫星通信</li></ol></li><li><p>红外线、激光：信号固定方向传播。把要传输的信号分别转换为各自的信号格式，即红外光信号和激光信号，再在空气中传播。</p></li></ol><h3 id="物理层设备"><a class="anchor" href="#物理层设备">#</a> 物理层设备</h3><h4 id="中继器"><a class="anchor" href="#中继器">#</a> 中继器</h4><p>诞生原因：由于存在损耗，在线路上传输的信号功率会逐渐衰减，衰减到一定程度失真，因此会导致接收错误。&lt;br&gt;<br>中继器的功能：对信号进行再生和还原，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度。&lt;br&gt;<br>中继器的两端：</p><ol><li>两端的网络部分是网段，而不是子网，适用于完全相同的两类网络互连。</li><li>两端可连接相同媒体，也可以连接不同媒体。</li><li>中继器两端的网段一定要是同一个协议，中继器不会存储转发。</li></ol><h4 id="集线器多口中继器"><a class="anchor" href="#集线器多口中继器">#</a> 集线器 (多口中继器)</h4><p>集线器的功能：对信号进行再生放大转发，对衰减信号放大，接着转发到其他所有处于工作状态的端口上，以增加信号传输的距离，延长网络的长度。不具备信号的定向传送能力，是一个共享式设备。</p><ol><li>集线器不能分割冲突域</li><li>连在集线器上的工作主机平分带宽</li></ol>]]></content>
      <categories>
        <category>考研</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF解决vue请求跨域问题</title>
    <url>/computer-science/python/django/DRF%E8%A7%A3%E5%86%B3vue%E8%AF%B7%E6%B1%82%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是跨域"><a class="anchor" href="#什么是跨域">#</a> 什么是跨域</h3><p>在浏览器上当前访问的网站向另一个网站发送请求获取数据的过程就是跨域请求。<br>跨域是浏览器同源策略造成；协议，域名，端口，三者有一不同就会产出跨域。</p><h3 id="怎么解决跨域"><a class="anchor" href="#怎么解决跨域">#</a> 怎么解决跨域</h3><p>前端 JSONP 和 CORS</p><h4 id="cors跨域资源共享"><a class="anchor" href="#cors跨域资源共享">#</a> CORS (跨域资源共享)</h4><p>它允许浏览器向跨源服务器发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。</p><p>整个 CORS 通信过程都是浏览器自动完成的，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多一次附加的请求，但用户不会有感觉。因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。</p><h4 id="django后端解决"><a class="anchor" href="#django后端解决">#</a> django 后端解决</h4><h5 id="安装第三方包"><a class="anchor" href="#安装第三方包">#</a> 安装第三方包</h5><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>pip install django<span class="token operator">-</span>cors<span class="token operator">-</span>headers</pre></td></tr></table></figure><h5 id="配置settingspy文件"><a class="anchor" href="#配置settingspy文件">#</a> 配置 settings.py 文件</h5><h6 id="在installed_apps里添加-corsheaders"><a class="anchor" href="#在installed_apps里添加-corsheaders">#</a> 在 INSTALLED_APPS 里添加 &quot;corsheaders&quot;</h6><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token string">'corsheaders'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">]</span></pre></td></tr></table></figure><h6 id="在middleware_classes添加中间件"><a class="anchor" href="#在middleware_classes添加中间件">#</a> 在 MIDDLEWARE_CLASSES 添加中间件</h6><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>MIDDLEWARE_CLASSES <span class="token operator">=</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token string">'corsheaders.middleware.CorsMiddleware'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">)</span></pre></td></tr></table></figure><p>最好添加到第一行，要放在 csrfview 之前。</p><h6 id="配置白名单配置settingspy"><a class="anchor" href="#配置白名单配置settingspy">#</a> 配置白名单 (<span class="exturl" data-url="aHR0cDovL3huLS1zZXR0aW5ncy12ejJ2ZTEyay5weQ==">配置 settings.py</span>)</h6><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 单个配置</span></pre></td></tr><tr><td data-num="2"></td><td><pre>CORS_ORIGIN_WHITELIST <span class="token operator">=</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token string">'域名'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 正则配置</span></pre></td></tr><tr><td data-num="7"></td><td><pre>CORS_ORIGIN_REGEX_WHITELIST <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">r'^(https?://)?(\w+\.)?jim\.com $'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h6 id="允许所有主机跨域"><a class="anchor" href="#允许所有主机跨域">#</a> 允许所有主机跨域</h6><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>CORS_ORIGIN_ALLOW_ALL <span class="token operator">=</span> <span class="token boolean">True</span></pre></td></tr></table></figure><h6 id="允许携带cookie"><a class="anchor" href="#允许携带cookie">#</a> 允许携带 cookie</h6><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>CORS_ALLOW_CREDENTALS <span class="token operator">=</span> <span class="token boolean">True</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>django-form使用和验证</title>
    <url>/computer-science/python/django/django-form%E4%BD%BF%E7%94%A8%E5%92%8C%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="创建form"><a class="anchor" href="#创建form">#</a> 创建 Form</h3><p><span class="exturl" data-url="aHR0cDovL3huLS1mb3JtLWZ6MmhyNzVhLnB5">新建 form.py</span></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> django <span class="token keyword">import</span> forms</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">LoginForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    username <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    password <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>规定 form 表单中字段的长度</p><h3 id="使用form验证post数据"><a class="anchor" href="#使用form验证post数据">#</a> 使用 form 验证 Post 数据</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">LoginView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'user/login.html'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token comment"># 通过用户名和密码查询用户是否存在</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            user_name <span class="token operator">=</span> LoginForm<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            password <span class="token operator">=</span> LoginForm<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            user <span class="token operator">=</span> authenticate<span class="token punctuation">(</span>username<span class="token operator">=</span>user_name<span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">if</span> user <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                login<span class="token punctuation">(</span>request<span class="token punctuation">,</span> user<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">return</span> HttpResponseRedirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'user/login.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'login_form'</span><span class="token punctuation">:</span> form<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django使用命令makemigrations提示NoChanges</title>
    <url>/computer-science/python/django/Django%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4makemigrations%E6%8F%90%E7%A4%BANoChanges/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在项目中，遇到 models 模型变动，变动后合并发生问题，故当时做了删除应用文件夹下 migrations 文件，由于数据库里无较多新数据，故删除后重建，但重建后执行模型合并操作结果为 No Changes，不会对应用模型进行变动。</p><p>解决方法：</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>python manage<span class="token punctuation">.</span>py makemigrations <span class="token operator">--</span>empty appname<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>python manage<span class="token punctuation">.</span>py makemigrations</pre></td></tr><tr><td data-num="3"></td><td><pre>python manage<span class="token punctuation">.</span>py migrate</pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>排错记录</tag>
      </tags>
  </entry>
  <entry>
    <title>django继承默认User表</title>
    <url>/computer-science/python/django/django%E7%BB%A7%E6%89%BF%E9%BB%98%E8%AE%A4User%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="继承默认user表"><a class="anchor" href="#继承默认user表">#</a> 继承默认 User 表</h3><p>models.py 中继承 AbstractUser 类</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> AbstractUser</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span>AbstractUser<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token triple-quoted-string string">"""</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    用户信息</pre></td></tr><tr><td data-num="6"></td><td><pre>    """</pre></td></tr><tr><td data-num="7"></td><td><pre>    nickname <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">'昵称'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    telephone <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">'手机号码'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    avatar <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">'头像'</span><span class="token punctuation">,</span> upload_to<span class="token operator">=</span><span class="token string">'avatar/'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"avatar/default.png"</span><span class="token punctuation">)</span>  <span class="token comment"># 保存图片</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    create_time <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">'创建时间'</span><span class="token punctuation">,</span> auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>并在 settings.py 中指明 AUTH_USER_MODEL</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>AUTH_USER_MODEL <span class="token operator">=</span> <span class="token string">'user.UserInfo'</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>django集成支付宝</title>
    <url>/computer-science/python/django/django%E9%9B%86%E6%88%90%E6%94%AF%E4%BB%98%E5%AE%9D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="支付宝支付"><a class="anchor" href="#支付宝支付">#</a> 支付宝支付</h3><h4 id="alipay"><a class="anchor" href="#alipay">#</a> Alipay</h4><p>阿里的支付也就是支付宝，官网以及出了 Python 的 SDK 了～所以要先下载</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>pip install alipay<span class="token operator">-</span>sdk<span class="token operator">-</span>python</pre></td></tr></table></figure><h4 id="具体操作"><a class="anchor" href="#具体操作">#</a> 具体操作</h4><h5 id="第一步-访问沙箱环境地址注册一个商家账户"><a class="anchor" href="#第一步-访问沙箱环境地址注册一个商家账户">#</a> 第一步 访问沙箱环境地址，注册一个商家账户</h5><p><span class="exturl" data-url="aHR0cHM6Ly9vcGVuaG9tZS5hbGlwYXkuY29tL3BsYXRmb3JtL2FwcERhaWx5Lmh0bT90YWI9aW5mbw==">https://openhome.alipay.com/platform/appDaily.htm?tab=info</span><br>按照他要求的方式生成商户的公钥和私钥<sub>把公钥放入网站</sub>私钥自己留着签名用～～</p><p>下面是商户信息以及卖家信息<sub>下载一个支付宝的沙箱环境</sub></p><p>然后按照下面的账号和密码登录和支付<s>只支持安卓的～<br>按照他要求的方式生成商户的公钥和私钥<sub>把公钥放入网站</sub>私钥自己留着签名用</s></p><p>下面是商户信息以及卖家信息<sub>下载一个支付宝的沙箱环境</sub></p><p>然后按照下面的账号和密码登录和支付～～只支持安卓的～</p><h5 id="第二步-阅读文档-找到一个适合自己的api"><a class="anchor" href="#第二步-阅读文档-找到一个适合自己的api">#</a> 第二步 阅读文档 找到一个适合自己的 API</h5><h5 id="代码实例"><a class="anchor" href="#代码实例">#</a> 代码实例</h5><pre><code class="language-Python">from django.conf.urls import url
from django.contrib import admin
from demo.views import AliPayView, PayHandlerView
urlpatterns = [
  url(r'^admin/', admin.site.urls),
  url(r'^pay$', AliPayView.as_view()),
  url(r'^alipay_handler', PayHandlerView.as_view()),
]
</code></pre><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span> redirect</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">from</span> alipay<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>api<span class="token punctuation">.</span>DefaultAlipayClient <span class="token keyword">import</span> DefaultAlipayClient</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">from</span> alipay<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>api<span class="token punctuation">.</span>AlipayClientConfig <span class="token keyword">import</span> AlipayClientConfig</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">from</span> alipay<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>api<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>AlipayTradePrecreateModel <span class="token keyword">import</span> AlipayTradePrecreateModel</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">from</span> alipay<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>api<span class="token punctuation">.</span>request<span class="token punctuation">.</span> AlipayTradePrecreateRequest <span class="token keyword">import</span> AlipayTradePrecreateRequest</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">from</span> alipay<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>api<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>AlipayTradePagePayModel <span class="token keyword">import</span> AlipayTradePagePayModel</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">from</span> alipay<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>api<span class="token punctuation">.</span>request<span class="token punctuation">.</span>AlipayTradePagePayRequest <span class="token keyword">import</span> AlipayTradePagePayRequest</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">import</span> time</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment"># Create your views here.</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment"># 沙箱环境地址：https://openhome.alipay.com/platform/appDaily.htm?tab=info</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment"># "https://openapi.alipaydev.com/gateway.do", APP_ID, APP_PRIVATE_KEY, "json", CHARSET, ALIPAY_PUBLIC_KEY, "RSA2"</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">def</span> <span class="token function">ali_pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token comment"># 为阿里支付实例化一个配置信息对象</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  alipay_config <span class="token operator">=</span> AlipayClientConfig<span class="token punctuation">(</span>sandbox_debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token comment"># 初始化各种配置信息</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token comment"># 阿里提供服务的接口</span></pre></td></tr><tr><td data-num="20"></td><td><pre>  alipay_config<span class="token punctuation">.</span>server_url <span class="token operator">=</span> <span class="token string">"https://openapi.alipaydev.com/gateway.do"</span></pre></td></tr><tr><td data-num="21"></td><td><pre>  <span class="token comment"># 申请的沙箱环境的 app_id</span></pre></td></tr><tr><td data-num="22"></td><td><pre>  alipay_config<span class="token punctuation">.</span>app_id <span class="token operator">=</span> <span class="token string">"2016091800540924"</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token comment"># 商户的私钥</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"keys/app_private_key.txt"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> alipay_config<span class="token punctuation">.</span>app_private_key <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token comment"># 阿里的公钥</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"keys/alipay_public_key.txt"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> alipay_config<span class="token punctuation">.</span>alipay_public_key <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token comment"># 实例化一个支付对象并返回</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  alipay_client <span class="token operator">=</span> DefaultAlipayClient<span class="token punctuation">(</span>alipay_client_config<span class="token operator">=</span>alipay_config<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token keyword">return</span> alipay_client</pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">AliPayView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"pay.html"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token comment"># 生成支付宝自带页面的 API</span></pre></td></tr><tr><td data-num="36"></td><td><pre>  <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment"># 得到阿里支付的实例化对象</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    client <span class="token operator">=</span> ali_pay<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token comment"># 为 API 生成一个模板对象 初始化参数用的</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    model <span class="token operator">=</span> AlipayTradePagePayModel<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token comment"># 订单号</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    model<span class="token punctuation">.</span>out_trade_no <span class="token operator">=</span> <span class="token string">"pay"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token comment"># 金额</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    model<span class="token punctuation">.</span>total_amount <span class="token operator">=</span> <span class="token number">8888</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment"># 商品标题</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    model<span class="token punctuation">.</span>subject <span class="token operator">=</span> <span class="token string">"测试"</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token comment"># 商品详细内容</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    model<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"支付宝测试"</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token comment"># 销售产品码，与支付宝签约的产品码名称</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    model<span class="token punctuation">.</span>product_code <span class="token operator">=</span> <span class="token string">"FAST_INSTANT_TRADE_PAY"</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token comment"># 实例化一个请求对象</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    request <span class="token operator">=</span> AlipayTradePagePayRequest<span class="token punctuation">(</span>biz_model<span class="token operator">=</span>model<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token comment"># get 请求 用户支付成功后返回的页面请求地址</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    request<span class="token punctuation">.</span>return_url <span class="token operator">=</span> <span class="token string">"http://140.143.63.45:8000/alipay_handler"</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token comment"># post 请求 用户支付成功通知商户的请求地址</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    request<span class="token punctuation">.</span>notify_url <span class="token operator">=</span> <span class="token string">"http://140.143.63.45:8000/alipay_handler"</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token comment"># 利用阿里支付对象发一个获得页面的请求 参数是 request</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    response <span class="token operator">=</span> client<span class="token punctuation">.</span>page_execute<span class="token punctuation">(</span>request<span class="token punctuation">,</span> http_method<span class="token operator">=</span><span class="token string">"GET"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>response<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre>  <span class="token keyword">class</span> <span class="token class-name">PayHandlerView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="64"></td><td><pre>      <span class="token comment"># return_url 的回调地址</span></pre></td></tr><tr><td data-num="65"></td><td><pre>      <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>      <span class="token comment"># 用户支付成功之后回到哪</span></pre></td></tr><tr><td data-num="67"></td><td><pre>      <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"return_url测试"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="69"></td><td><pre>      <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment"># 用户支付成功 在这里修改订单状态以及优惠券贝里等等情况</span></pre></td></tr><tr><td data-num="70"></td><td><pre>      <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"notify_url"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre>views<span class="token punctuation">.</span>py</pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>django设置media文件夹存储</title>
    <url>/computer-science/python/django/django%E8%AE%BE%E7%BD%AEmedia%E6%96%87%E4%BB%B6%E5%A4%B9%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="media文件夹设置和使用"><a class="anchor" href="#media文件夹设置和使用">#</a> Media 文件夹设置和使用</h3><p>在 settings.py 文件中写入</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>MEDIA_URL <span class="token operator">=</span> <span class="token string">'/media/'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>MEDIA_ROOT <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'media'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>urls.py 中写入路径</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> BookShop<span class="token punctuation">.</span>settings <span class="token keyword">import</span> MEDIA_ROOT <span class="token comment"># 从配置中导入 MEDIA_ROOT</span></pre></td></tr><tr><td data-num="2"></td><td><pre>url<span class="token punctuation">(</span><span class="token string">r'^media/(?P&lt;path>.*)$'</span><span class="token punctuation">,</span> serve<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"document_root"</span><span class="token punctuation">:</span>MEDIA_ROOT<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment"># media 文件夹路径</span></pre></td></tr></table></figure><p>models.py 中使用</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>avatar <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">'头像'</span><span class="token punctuation">,</span> upload_to<span class="token operator">=</span><span class="token string">'avatar/'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"avatar/default.png"</span><span class="token punctuation">)</span>  <span class="token comment"># 保存图片</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>drf配置redis缓存</title>
    <url>/computer-science/python/django/drf%E9%85%8D%E7%BD%AEredis%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装django-redisdrf-extensions"><a class="anchor" href="#安装django-redisdrf-extensions">#</a> 安装 django-redis,drf-extensions</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>pip install django<span class="token operator">-</span>redis</pre></td></tr><tr><td data-num="2"></td><td><pre>pip install drf<span class="token operator">-</span>extensions</pre></td></tr></table></figure><h3 id="settingpy配置"><a class="anchor" href="#settingpy配置">#</a> setting.py 配置</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>CACHES <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token string">"BACKEND"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.cache.RedisCache"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token string">"LOCATION"</span><span class="token punctuation">:</span> <span class="token string">"redis://127.0.0.1:6379/1"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token string">"OPTIONS"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token string">"CLIENT_CLASS"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.client.DefaultClient"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="在视图函数中设置"><a class="anchor" href="#在视图函数中设置">#</a> 在视图函数中设置</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> rest_framework_extensions<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>mixins <span class="token keyword">import</span> CacheResponseMixin</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">GoodlistViewSet</span><span class="token punctuation">(</span>CacheResponseMixin<span class="token punctuation">,</span> mixins<span class="token punctuation">.</span>ListModelMixin<span class="token punctuation">,</span> mixins<span class="token punctuation">.</span>RetrieveModelMixin<span class="token punctuation">,</span> viewsets<span class="token punctuation">.</span>GenericViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 继承 CacheResponseMixin</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment"># mixins.RetrieveModelMixin 详情</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token triple-quoted-string string">"""</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    list:</pre></td></tr><tr><td data-num="7"></td><td><pre>        商品列表数据</pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    """</pre></td></tr><tr><td data-num="10"></td><td><pre>    queryset <span class="token operator">=</span> Goods<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    serializer_class <span class="token operator">=</span> GoodsSerializer</pre></td></tr><tr><td data-num="12"></td><td><pre>    throttle_classes <span class="token operator">=</span> <span class="token punctuation">(</span>UserRateThrottle<span class="token punctuation">,</span> AnonRateThrottle<span class="token punctuation">,</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    pagination_class <span class="token operator">=</span> LargeResultsSetPagination</pre></td></tr><tr><td data-num="14"></td><td><pre>    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>DjangoFilterBackend<span class="token punctuation">,</span> filters<span class="token punctuation">.</span>SearchFilter<span class="token punctuation">,</span> filters<span class="token punctuation">.</span>OrderingFilter<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    filter_class <span class="token operator">=</span> GoodsFilter</pre></td></tr><tr><td data-num="16"></td><td><pre>    search_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'=goods_sn'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'=goods_num'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    ordering_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'sold_num'</span><span class="token punctuation">,</span> <span class="token string">'add_time'</span><span class="token punctuation">,</span> <span class="token string">'shop_price'</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>drf使用jwt登录验证及判断是否登录和对象拥有者</title>
    <url>/computer-science/python/django/drf%E4%BD%BF%E7%94%A8jwt%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E5%8F%8A%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E7%99%BB%E5%BD%95%E5%92%8C%E5%AF%B9%E8%B1%A1%E6%8B%A5%E6%9C%89%E8%80%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装"><a class="anchor" href="#安装">#</a> 安装</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>pip install djangorestframework<span class="token operator">-</span>jwt</pre></td></tr></table></figure><h3 id="settingpy中配置"><a class="anchor" href="#settingpy中配置">#</a> setting.py 中配置</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token string">'DEFAULT_AUTHENTICATION_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre>            <span class="token string">'rest_framework.authentication.BasicAuthentication'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token string">'rest_framework.authentication.SessionAuthentication'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="urlspy中配置"><a class="anchor" href="#urlspy中配置">#</a> urls.py 中配置</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>views <span class="token keyword">import</span> obtain_jwt_token</pre></td></tr><tr><td data-num="2"></td><td><pre>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment"># url (r'^api-token-auth/', views.obtain_auth_token),  # drf 自带的认证模式</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    url<span class="token punctuation">(</span><span class="token string">r'^login/'</span><span class="token punctuation">,</span> obtain_jwt_token<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># jwt 的认证接口</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">]</span></pre></td></tr></table></figure><h3 id="视图中的配置在需要登录验证的函数中加入"><a class="anchor" href="#视图中的配置在需要登录验证的函数中加入">#</a> 视图中的配置，在需要登录验证的函数中加入</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAuthenticated</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> JSONWebTokenAuthentication</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> SessionAuthentication</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">from</span> apps<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsOwnerOrReadOnly</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">UserFavViewSet</span><span class="token punctuation">(</span>mixins<span class="token punctuation">.</span>CreateModelMixin<span class="token punctuation">,</span>mixins<span class="token punctuation">.</span>ListModelMixin<span class="token punctuation">,</span>mixins<span class="token punctuation">.</span>RetrieveModelMixin<span class="token punctuation">,</span>mixins<span class="token punctuation">.</span>DestroyModelMixin<span class="token punctuation">,</span>viewsets<span class="token punctuation">.</span>GenericViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>IsAuthenticated<span class="token punctuation">,</span> IsOwnerOrReadOnly<span class="token punctuation">)</span>  <span class="token comment"># 判断用户是否登录</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">(</span>JSONWebTokenAuthentication<span class="token punctuation">,</span> SessionAuthentication<span class="token punctuation">)</span>  <span class="token comment"># jwt 验证，session 验证</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> Model<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>user<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>  <span class="token comment"># 获取当前登录用户的数据</span></pre></td></tr></table></figure><blockquote><p>JSONWebTokenAuthentication 为 jwt 验证<br>SessionAuthentication 为 session 验证<br>IsAuthenticated 判断是否已登录<br>IsOwnerOrReadOnly 判断是否为对象拥有者，继承 rest_framework.permissions.permissions</p></blockquote><h4 id="isownerorreadonly代码-permissionspy"><a class="anchor" href="#isownerorreadonly代码-permissionspy">#</a> IsOwnerOrReadOnly 代码 <span class="exturl" data-url="aHR0cDovL3Blcm1pc3Npb25zLnB5">permissions.py</span></h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> permissions</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">IsOwnerOrReadOnly</span><span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token triple-quoted-string string">"""</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    对象级权限仅允许对象的所有者对其进行编辑</pre></td></tr><tr><td data-num="7"></td><td><pre>    假设模型实例具有`owner`属性。</pre></td></tr><tr><td data-num="8"></td><td><pre>    """</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">has_object_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment"># 任何请求都允许读取权限，</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token comment"># 所以我们总是允许 GET，HEAD 或 OPTIONS 请求.</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token keyword">in</span> permissions<span class="token punctuation">.</span>SAFE_METHODS<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment"># 示例必须要有一个名为 `owner` 的属性</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>user <span class="token operator">==</span> request<span class="token punctuation">.</span>user</pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx+uwsgi部署django项目步骤</title>
    <url>/computer-science/python/django/nginx+uwsgi%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="项目部署"><a class="anchor" href="#项目部署">#</a> 项目部署</h3><h4 id="项目环境准备"><a class="anchor" href="#项目环境准备">#</a> 项目环境准备</h4><p>安装启动 nginx</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nginx</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> /etc/init.d/nginx restart</pre></td></tr></table></figure><p>验证<br>打开浏览器输入: 127.0.0.1:80 -&gt; Welcome to Nginx</p><p>安装 uwsgi</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> pip3 <span class="token function">install</span> uwsgi</pre></td></tr></table></figure><h4 id="部署配置"><a class="anchor" href="#部署配置">#</a> 部署配置</h4><h5 id="1-在项目目录中新建文件sourcelistuwsgiini文件"><a class="anchor" href="#1-在项目目录中新建文件sourcelistuwsgiini文件">#</a> 1. 在项目目录中新建文件 SourcelistUwsgi.ini 文件</h5><p>在配置文件中写入如下内容：</p><figure class="highlight ini"><figcaption data-lang="ini"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">[uwsgi]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 指定和 nginx 通信的端口</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token constant">socket</span><span class="token attr-value"><span class="token punctuation">=</span>127.0.0.1:8001</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 项目路径</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token constant">chdir</span><span class="token attr-value"><span class="token punctuation">=</span>/home/sourcelist/project/Sourcelist</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># wsgi.py 路径</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token constant">wsgi-file</span><span class="token attr-value"><span class="token punctuation">=</span>Sourcelist/wsgi.py</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment"># 进程数</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token constant">processes</span><span class="token attr-value"><span class="token punctuation">=</span>4</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># 线程数</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token constant">thread</span><span class="token attr-value"><span class="token punctuation">=</span>2</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment"># uwsgi 自身占用端口</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token constant">stats</span><span class="token attr-value"><span class="token punctuation">=</span>127.0.0.1:8080</span></pre></td></tr></table></figure><h5 id="2-配置nginx"><a class="anchor" href="#2-配置nginx">#</a> 2. 配置 nginx</h5><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token builtin class-name">cd</span> /etc/nginx/sites-enabled/</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">vi</span> projectNginx.conf</pre></td></tr></table></figure><p>内容：</p><figure class="highlight ini"><figcaption data-lang="ini"></figcaption><table><tr><td data-num="1"></td><td><pre>server&#123;</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">        # 指定本项目监听端口，浏览器输入端口</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        listen 80;</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">        # 域名</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        server_name 127.0.0.1:80;</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">        # 指定字符集</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        charset utf-8;</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">        # 指定收集静态文件路径</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        location /static&#123;</pre></td></tr><tr><td data-num="10"></td><td><pre>            alias /home/sourcelist/project/Sourcelist/static;</pre></td></tr><tr><td data-num="11"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">        # 指定收集媒体文件路径</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        location /media&#123;</pre></td></tr><tr><td data-num="14"></td><td><pre>          alias /home/sourcelist/project/Sourcelist/media;</pre></td></tr><tr><td data-num="15"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">        # 和 uwsgi 通信端口和通信文件</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        location /&#123;</pre></td></tr><tr><td data-num="18"></td><td><pre>          include uwsgi_params;</pre></td></tr><tr><td data-num="19"></td><td><pre>          uwsgi_pass 127.0.0.1:8001;</pre></td></tr><tr><td data-num="20"></td><td><pre>      &#125;            </pre></td></tr><tr><td data-num="21"></td><td><pre>    &#125;</pre></td></tr></table></figure><h6 id="3-拷贝uwsgi_params到项目根目录"><a class="anchor" href="#3-拷贝uwsgi_params到项目根目录">#</a> 3. 拷贝 uwsgi_params 到项目根目录</h6><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token builtin class-name">cd</span> /etc/nginx</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">cp</span> uwsgi_params /home/sourcelist/project/Sourcelist</pre></td></tr></table></figure><h6 id="4-改掉nginx默认的server80"><a class="anchor" href="#4-改掉nginx默认的server80">#</a> 4. 改掉 nginx 默认的 server (80)</h6><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token builtin class-name">cd</span> /etc/nginx/sites-enabled</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">vi</span> deault <span class="token comment">#把 listen 的端口由 80 改为 800</span></pre></td></tr></table></figure><blockquote><p>server {<br>listen 800 default_server;<br>listen [::]:80 default_server;</p></blockquote><h6 id="5-重启nginx服务"><a class="anchor" href="#5-重启nginx服务">#</a> 5. 重启 nginx 服务</h6><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> /etc/init.d/nginx restart</pre></td></tr></table></figure><h6 id="6-收集静态文件"><a class="anchor" href="#6-收集静态文件">#</a> 6. 收集静态文件</h6><ol><li>在 settings.py 文件中添加路径 (STATIC_ROOT)<br>STATIC_ROOT = '/home/sourcelist/project/Sourcelist/static'</li><li>收集静态文件</li></ol><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token builtin class-name">cd</span> /home/sourcelist/project/Sourcelist</pre></td></tr><tr><td data-num="2"></td><td><pre>python3 manage.py collectstatic</pre></td></tr></table></figure><h6 id="7-uwsgi启动项目"><a class="anchor" href="#7-uwsgi启动项目">#</a> 7. uwsgi 启动项目</h6><p>在项目根目录启动项目</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>uwsgi --ini fruitdayUwsgi.ini</pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>throttle设置api的访问速率</title>
    <url>/computer-science/python/django/throttle%E8%AE%BE%E7%BD%AEapi%E7%9A%84%E8%AE%BF%E9%97%AE%E9%80%9F%E7%8E%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="settingpy设置"><a class="anchor" href="#settingpy设置">#</a> setting.py 设置</h3><p>在 setting.py 中添加</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token string">'DEFAULT_THROTTLE_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre>      <span class="token string">'rest_framework.throttling.AnonRateThrottle'</span><span class="token punctuation">,</span>  </pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token string">'rest_framework.throttling.UserRateThrottle'</span>   </pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token string">'DEFAULT_THROTTLE_RATES'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token string">'anon'</span><span class="token punctuation">:</span> <span class="token string">'20000/day'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'30000/day'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>DEFAULT_THROTTLE_CLASSES 是判断类型</p><blockquote><p>AnonRateThrottle 是未登录情况下，判断 IP 地址<br>UserRateThrottle 是登录情况下，判断 token</p></blockquote><p>DEFAULT_THROTTLE_RATES 是限速策略。</p><h3 id="在视图函数中设置"><a class="anchor" href="#在视图函数中设置">#</a> 在视图函数中设置</h3><p>在需要限速的 api 中添加 throttle_classes</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>throttling <span class="token keyword">import</span> UserRateThrottle<span class="token punctuation">,</span> AnonRateThrottle</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">GoodlistViewSet</span><span class="token punctuation">(</span>CacheResponseMixin<span class="token punctuation">,</span> mixins<span class="token punctuation">.</span>ListModelMixin<span class="token punctuation">,</span> mixins<span class="token punctuation">.</span>RetrieveModelMixin<span class="token punctuation">,</span> viewsets<span class="token punctuation">.</span>GenericViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment"># mixins.RetrieveModelMixin 详情</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token triple-quoted-string string">"""</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    list:</pre></td></tr><tr><td data-num="7"></td><td><pre>        商品列表数据</pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    """</pre></td></tr><tr><td data-num="10"></td><td><pre>    queryset <span class="token operator">=</span> Goods<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    serializer_class <span class="token operator">=</span> GoodsSerializer</pre></td></tr><tr><td data-num="12"></td><td><pre>    throttle_classes <span class="token operator">=</span> <span class="token punctuation">(</span>UserRateThrottle<span class="token punctuation">,</span> AnonRateThrottle<span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token comment"># api 限速</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    pagination_class <span class="token operator">=</span> LargeResultsSetPagination</pre></td></tr><tr><td data-num="14"></td><td><pre>    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>DjangoFilterBackend<span class="token punctuation">,</span> filters<span class="token punctuation">.</span>SearchFilter<span class="token punctuation">,</span> filters<span class="token punctuation">.</span>OrderingFilter<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    filter_class <span class="token operator">=</span> GoodsFilter</pre></td></tr><tr><td data-num="16"></td><td><pre>    search_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'=goods_sn'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'=goods_num'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    ordering_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'sold_num'</span><span class="token punctuation">,</span> <span class="token string">'add_time'</span><span class="token punctuation">,</span> <span class="token string">'shop_price'</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Cookiecutter快速搭建Django应用</title>
    <url>/computer-science/python/django/%E4%BD%BF%E7%94%A8Cookiecutter%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BADjango%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装cookiecutter"><a class="anchor" href="#安装cookiecutter">#</a> 安装 Cookiecutter</h2><p>在 Python3 环境中使用 pip3 安装：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>$ yum <span class="token function">install</span> <span class="token function">git</span>  <span class="token comment"># 先在系统上安装 git</span></pre></td></tr><tr><td data-num="2"></td><td><pre>$ pip3 <span class="token function">install</span> cookiecutter</pre></td></tr><tr><td data-num="3"></td><td><pre>$ <span class="token function">ln</span> -s /usr/local/python3/bin/cookiecutter /usr/bin/cookiecutter  <span class="token comment"># 创建软链接，/usr/local/python3 / 是 Python3 的安装路径</span></pre></td></tr></table></figure><p>然后到你想要创建项目的目录，执行如下命令：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>$ cookiecutter https://github.com/pydanny/cookiecutter-django.git</pre></td></tr></table></figure><p>配置过程如下：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>project_name <span class="token punctuation">[</span>My Awesome Project<span class="token punctuation">]</span>: myproject  <span class="token comment"># 项目名称</span></pre></td></tr><tr><td data-num="2"></td><td><pre>project_slug <span class="token punctuation">[</span>myproject<span class="token punctuation">]</span>: app01  <span class="token comment"># slug</span></pre></td></tr><tr><td data-num="3"></td><td><pre>description <span class="token punctuation">[</span>Behold My Awesome Project<span class="token operator">!</span><span class="token punctuation">]</span>: This is the first application<span class="token operator">!</span>  <span class="token comment"># 项目描述</span></pre></td></tr><tr><td data-num="4"></td><td><pre>author_name <span class="token punctuation">[</span>Daniel Roy Greenfeld<span class="token punctuation">]</span>: __oreki__  <span class="token comment"># 作者</span></pre></td></tr><tr><td data-num="5"></td><td><pre>domain_name <span class="token punctuation">[</span>example.com<span class="token punctuation">]</span>:   <span class="token comment"># 部署的域名</span></pre></td></tr><tr><td data-num="6"></td><td><pre>email <span class="token punctuation">[</span>__oreki__@example.com<span class="token punctuation">]</span>:   <span class="token comment"># 邮箱</span></pre></td></tr><tr><td data-num="7"></td><td><pre>version <span class="token punctuation">[</span><span class="token number">0.1</span>.0<span class="token punctuation">]</span>:  <span class="token comment"># 版本号，默认为 0.1.0</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Select open_source_license:  <span class="token comment"># 选择项目 License</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">1</span> - MIT</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token number">2</span> - BSD</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token number">3</span> - GPLv3</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token number">4</span> - Apache Software License <span class="token number">2.0</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token number">5</span> - Not <span class="token function">open</span> <span class="token builtin class-name">source</span></pre></td></tr><tr><td data-num="14"></td><td><pre>Choose from <span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span> <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: <span class="token number">5</span></pre></td></tr><tr><td data-num="15"></td><td><pre>timezone <span class="token punctuation">[</span>UTC<span class="token punctuation">]</span>: Asia/Shanghai  <span class="token comment"># Django settings 中的 TIME_ZONE</span></pre></td></tr><tr><td data-num="16"></td><td><pre>windows <span class="token punctuation">[</span>n<span class="token punctuation">]</span>: n <span class="token comment"># 是否是 Windows 环境</span></pre></td></tr><tr><td data-num="17"></td><td><pre>use_pycharm <span class="token punctuation">[</span>n<span class="token punctuation">]</span>: y  <span class="token comment"># 是否使用 Pycharm 开发</span></pre></td></tr><tr><td data-num="18"></td><td><pre>use_docker <span class="token punctuation">[</span>n<span class="token punctuation">]</span>: y  <span class="token comment"># 是否使用 Docker 容器</span></pre></td></tr><tr><td data-num="19"></td><td><pre>Select postgresql_version:  <span class="token comment"># 选择 Postgres 数据库版本，cookiecutter-django 默认只支持 Postgres</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token number">1</span> - <span class="token number">10.5</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token number">2</span> - <span class="token number">10.4</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token number">3</span> - <span class="token number">10.3</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token number">4</span> - <span class="token number">10.2</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token number">5</span> - <span class="token number">10.1</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token number">6</span> - <span class="token number">9.6</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token number">7</span> - <span class="token number">9.5</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token number">8</span> - <span class="token number">9.4</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token number">9</span> - <span class="token number">9.3</span></pre></td></tr><tr><td data-num="29"></td><td><pre>Choose from <span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">6</span>, <span class="token number">7</span>, <span class="token number">8</span>, <span class="token number">9</span> <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">6</span>, <span class="token number">7</span>, <span class="token number">8</span>, <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: <span class="token number">1</span></pre></td></tr><tr><td data-num="30"></td><td><pre>Select js_task_runner:  <span class="token comment"># js 运行方式</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token number">1</span> - None</pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token number">2</span> - Gulp</pre></td></tr><tr><td data-num="33"></td><td><pre>Choose from <span class="token number">1</span>, <span class="token number">2</span> <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: <span class="token number">1</span></pre></td></tr><tr><td data-num="34"></td><td><pre>custom_bootstrap_compilation <span class="token punctuation">[</span>n<span class="token punctuation">]</span>: n  <span class="token comment"># 是否自定义 bootstrap 压缩</span></pre></td></tr><tr><td data-num="35"></td><td><pre>use_compressor <span class="token punctuation">[</span>n<span class="token punctuation">]</span>: n  <span class="token comment"># 是否使用压缩</span></pre></td></tr><tr><td data-num="36"></td><td><pre>use_celery <span class="token punctuation">[</span>n<span class="token punctuation">]</span>: n  <span class="token comment"># 是否使用 celery，一个异步任务队列</span></pre></td></tr><tr><td data-num="37"></td><td><pre>use_mailhog <span class="token punctuation">[</span>n<span class="token punctuation">]</span>: n  <span class="token comment"># 是否使用 mailhog，Django 项目中发送邮件的，也可以使用 Mailgun 代替</span></pre></td></tr><tr><td data-num="38"></td><td><pre>use_sentry <span class="token punctuation">[</span>n<span class="token punctuation">]</span>: n  <span class="token comment"># 是否使用错误日志日志监控，sentry 也是不错的开源 python 项目</span></pre></td></tr><tr><td data-num="39"></td><td><pre>use_whitenoise <span class="token punctuation">[</span>n<span class="token punctuation">]</span>: y  <span class="token comment"># 是否使用 whitenoise</span></pre></td></tr><tr><td data-num="40"></td><td><pre>use_heroku <span class="token punctuation">[</span>n<span class="token punctuation">]</span>: n  <span class="token comment"># 是否使用 heroku，heroku 是国外著名的云服务厂商之一，提供 PaaS</span></pre></td></tr><tr><td data-num="41"></td><td><pre>use_travisci <span class="token punctuation">[</span>n<span class="token punctuation">]</span>: n  <span class="token comment"># 是否使用 travisci，类似于 jekins，用于 DevOps 中的持续集成与发布</span></pre></td></tr><tr><td data-num="42"></td><td><pre>keep_local_envs_in_vcs <span class="token punctuation">[</span>y<span class="token punctuation">]</span>: y  <span class="token comment"># 对于本地环境变量使用版本控制</span></pre></td></tr><tr><td data-num="43"></td><td><pre>debug <span class="token punctuation">[</span>n<span class="token punctuation">]</span>: y  <span class="token comment"># 是否开启 debug 模式，settings 中配置</span></pre></td></tr><tr><td data-num="44"></td><td><pre> <span class="token punctuation">[</span>SUCCESS<span class="token punctuation">]</span>: Project initialized, keep up the good work<span class="token operator">!</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou ~<span class="token punctuation">]</span><span class="token comment">#</span></pre></td></tr></table></figure><p>安装完成后，完整项目结构如下：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou ~<span class="token punctuation">]</span><span class="token comment"># cd app01/</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou app01<span class="token punctuation">]</span><span class="token comment"># tree  # 如果没有，先 yum install tree</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token builtin class-name">.</span></pre></td></tr><tr><td data-num="4"></td><td><pre>├── app01</pre></td></tr><tr><td data-num="5"></td><td><pre>│   ├── conftest.py</pre></td></tr><tr><td data-num="6"></td><td><pre>│   ├── contrib</pre></td></tr><tr><td data-num="7"></td><td><pre>│   │   ├── __init__.py</pre></td></tr><tr><td data-num="8"></td><td><pre>│   │   └── sites</pre></td></tr><tr><td data-num="9"></td><td><pre>│   │       ├── __init__.py</pre></td></tr><tr><td data-num="10"></td><td><pre>│   │       └── migrations</pre></td></tr><tr><td data-num="11"></td><td><pre>│   │           ├── 0001_initial.py</pre></td></tr><tr><td data-num="12"></td><td><pre>│   │           ├── 0002_alter_domain_unique.py</pre></td></tr><tr><td data-num="13"></td><td><pre>│   │           ├── 0003_set_site_domain_and_name.py</pre></td></tr><tr><td data-num="14"></td><td><pre>│   │           └── __init__.py</pre></td></tr><tr><td data-num="15"></td><td><pre>│   ├── __init__.py</pre></td></tr><tr><td data-num="16"></td><td><pre>│   ├── static  <span class="token comment"># 静态文件</span></pre></td></tr><tr><td data-num="17"></td><td><pre>│   │   ├── css</pre></td></tr><tr><td data-num="18"></td><td><pre>│   │   │   └── project.css</pre></td></tr><tr><td data-num="19"></td><td><pre>│   │   ├── fonts</pre></td></tr><tr><td data-num="20"></td><td><pre>│   │   ├── images</pre></td></tr><tr><td data-num="21"></td><td><pre>│   │   │   └── favicons</pre></td></tr><tr><td data-num="22"></td><td><pre>│   │   │       └── favicon.ico</pre></td></tr><tr><td data-num="23"></td><td><pre>│   │   ├── js</pre></td></tr><tr><td data-num="24"></td><td><pre>│   │   │   └── project.js</pre></td></tr><tr><td data-num="25"></td><td><pre>│   │   └── sass</pre></td></tr><tr><td data-num="26"></td><td><pre>│   │       ├── custom_bootstrap_vars.scss</pre></td></tr><tr><td data-num="27"></td><td><pre>│   │       └── project.scss</pre></td></tr><tr><td data-num="28"></td><td><pre>│   ├── templates  <span class="token comment"># 模板</span></pre></td></tr><tr><td data-num="29"></td><td><pre>│   │   ├── 403_csrf.html</pre></td></tr><tr><td data-num="30"></td><td><pre>│   │   ├── <span class="token number">404</span>.html</pre></td></tr><tr><td data-num="31"></td><td><pre>│   │   ├── <span class="token number">500</span>.html</pre></td></tr><tr><td data-num="32"></td><td><pre>│   │   ├── account</pre></td></tr><tr><td data-num="33"></td><td><pre>│   │   │   ├── account_inactive.html</pre></td></tr><tr><td data-num="34"></td><td><pre>│   │   │   ├── base.html</pre></td></tr><tr><td data-num="35"></td><td><pre>│   │   │   ├── email_confirm.html</pre></td></tr><tr><td data-num="36"></td><td><pre>│   │   │   ├── email.html</pre></td></tr><tr><td data-num="37"></td><td><pre>│   │   │   ├── login.html</pre></td></tr><tr><td data-num="38"></td><td><pre>│   │   │   ├── logout.html</pre></td></tr><tr><td data-num="39"></td><td><pre>│   │   │   ├── password_change.html</pre></td></tr><tr><td data-num="40"></td><td><pre>│   │   │   ├── password_reset_done.html</pre></td></tr><tr><td data-num="41"></td><td><pre>│   │   │   ├── password_reset_from_key_done.html</pre></td></tr><tr><td data-num="42"></td><td><pre>│   │   │   ├── password_reset_from_key.html</pre></td></tr><tr><td data-num="43"></td><td><pre>│   │   │   ├── password_reset.html</pre></td></tr><tr><td data-num="44"></td><td><pre>│   │   │   ├── password_set.html</pre></td></tr><tr><td data-num="45"></td><td><pre>│   │   │   ├── signup_closed.html</pre></td></tr><tr><td data-num="46"></td><td><pre>│   │   │   ├── signup.html</pre></td></tr><tr><td data-num="47"></td><td><pre>│   │   │   ├── verification_sent.html</pre></td></tr><tr><td data-num="48"></td><td><pre>│   │   │   └── verified_email_required.html</pre></td></tr><tr><td data-num="49"></td><td><pre>│   │   ├── base.html</pre></td></tr><tr><td data-num="50"></td><td><pre>│   │   ├── pages</pre></td></tr><tr><td data-num="51"></td><td><pre>│   │   │   ├── about.html</pre></td></tr><tr><td data-num="52"></td><td><pre>│   │   │   └── home.html</pre></td></tr><tr><td data-num="53"></td><td><pre>│   │   └── <span class="token function">users</span></pre></td></tr><tr><td data-num="54"></td><td><pre>│   │       ├── user_detail.html</pre></td></tr><tr><td data-num="55"></td><td><pre>│   │       ├── user_form.html</pre></td></tr><tr><td data-num="56"></td><td><pre>│   │       └── user_list.html</pre></td></tr><tr><td data-num="57"></td><td><pre>│   └── <span class="token function">users</span>  <span class="token comment"># 用户模块</span></pre></td></tr><tr><td data-num="58"></td><td><pre>│       ├── adapters.py</pre></td></tr><tr><td data-num="59"></td><td><pre>│       ├── admin.py</pre></td></tr><tr><td data-num="60"></td><td><pre>│       ├── apps.py</pre></td></tr><tr><td data-num="61"></td><td><pre>│       ├── forms.py</pre></td></tr><tr><td data-num="62"></td><td><pre>│       ├── __init__.py</pre></td></tr><tr><td data-num="63"></td><td><pre>│       ├── migrations</pre></td></tr><tr><td data-num="64"></td><td><pre>│       │   ├── 0001_initial.py</pre></td></tr><tr><td data-num="65"></td><td><pre>│       │   └── __init__.py</pre></td></tr><tr><td data-num="66"></td><td><pre>│       ├── models.py</pre></td></tr><tr><td data-num="67"></td><td><pre>│       ├── tests</pre></td></tr><tr><td data-num="68"></td><td><pre>│       │   ├── factories.py</pre></td></tr><tr><td data-num="69"></td><td><pre>│       │   ├── __init__.py</pre></td></tr><tr><td data-num="70"></td><td><pre>│       │   ├── test_forms.py</pre></td></tr><tr><td data-num="71"></td><td><pre>│       │   ├── test_models.py</pre></td></tr><tr><td data-num="72"></td><td><pre>│       │   ├── test_urls.py</pre></td></tr><tr><td data-num="73"></td><td><pre>│       │   └── test_views.py</pre></td></tr><tr><td data-num="74"></td><td><pre>│       ├── urls.py</pre></td></tr><tr><td data-num="75"></td><td><pre>│       └── views.py</pre></td></tr><tr><td data-num="76"></td><td><pre>├── compose  <span class="token comment"># docker compose</span></pre></td></tr><tr><td data-num="77"></td><td><pre>│   ├── <span class="token builtin class-name">local</span>  <span class="token comment"># 开发环境</span></pre></td></tr><tr><td data-num="78"></td><td><pre>│   │   └── django</pre></td></tr><tr><td data-num="79"></td><td><pre>│   │       ├── Dockerfile</pre></td></tr><tr><td data-num="80"></td><td><pre>│   │       └── start</pre></td></tr><tr><td data-num="81"></td><td><pre>│   └── production  <span class="token comment"># 生产环境</span></pre></td></tr><tr><td data-num="82"></td><td><pre>│       ├── caddy  <span class="token comment"># caddy 用于 https 部署</span></pre></td></tr><tr><td data-num="83"></td><td><pre>│       │   ├── Caddyfile</pre></td></tr><tr><td data-num="84"></td><td><pre>│       │   └── Dockerfile</pre></td></tr><tr><td data-num="85"></td><td><pre>│       ├── django  <span class="token comment"># django 应用容器</span></pre></td></tr><tr><td data-num="86"></td><td><pre>│       │   ├── Dockerfile</pre></td></tr><tr><td data-num="87"></td><td><pre>│       │   ├── entrypoint</pre></td></tr><tr><td data-num="88"></td><td><pre>│       │   └── start</pre></td></tr><tr><td data-num="89"></td><td><pre>│       └── postgres  <span class="token comment"># 数据库容器</span></pre></td></tr><tr><td data-num="90"></td><td><pre>│           ├── Dockerfile</pre></td></tr><tr><td data-num="91"></td><td><pre>│           └── maintenance</pre></td></tr><tr><td data-num="92"></td><td><pre>│               ├── backup</pre></td></tr><tr><td data-num="93"></td><td><pre>│               ├── backups</pre></td></tr><tr><td data-num="94"></td><td><pre>│               ├── restore</pre></td></tr><tr><td data-num="95"></td><td><pre>│               └── _sourced</pre></td></tr><tr><td data-num="96"></td><td><pre>│                   ├── constants.sh</pre></td></tr><tr><td data-num="97"></td><td><pre>│                   ├── countdown.sh</pre></td></tr><tr><td data-num="98"></td><td><pre>│                   ├── messages.sh</pre></td></tr><tr><td data-num="99"></td><td><pre>│                   └── yes_no.sh</pre></td></tr><tr><td data-num="100"></td><td><pre>├── config  <span class="token comment"># Django 的配置</span></pre></td></tr><tr><td data-num="101"></td><td><pre>│   ├── __init__.py</pre></td></tr><tr><td data-num="102"></td><td><pre>│   ├── settings</pre></td></tr><tr><td data-num="103"></td><td><pre>│   │   ├── base.py</pre></td></tr><tr><td data-num="104"></td><td><pre>│   │   ├── __init__.py</pre></td></tr><tr><td data-num="105"></td><td><pre>│   │   ├── local.py  <span class="token comment"># 开发环境</span></pre></td></tr><tr><td data-num="106"></td><td><pre>│   │   ├── production.py  <span class="token comment"># 生产环境</span></pre></td></tr><tr><td data-num="107"></td><td><pre>│   │   └── test.py  <span class="token comment"># 测试环境</span></pre></td></tr><tr><td data-num="108"></td><td><pre>│   ├── urls.py</pre></td></tr><tr><td data-num="109"></td><td><pre>│   └── wsgi.py</pre></td></tr><tr><td data-num="110"></td><td><pre>├── docs <span class="token comment"># 项目文档</span></pre></td></tr><tr><td data-num="111"></td><td><pre>│   ├── conf.py</pre></td></tr><tr><td data-num="112"></td><td><pre>│   ├── deploy.rst</pre></td></tr><tr><td data-num="113"></td><td><pre>│   ├── docker_ec2.rst</pre></td></tr><tr><td data-num="114"></td><td><pre>│   ├── index.rst</pre></td></tr><tr><td data-num="115"></td><td><pre>│   ├── __init__.py</pre></td></tr><tr><td data-num="116"></td><td><pre>│   ├── install.rst</pre></td></tr><tr><td data-num="117"></td><td><pre>│   ├── make.bat</pre></td></tr><tr><td data-num="118"></td><td><pre>│   ├── Makefile</pre></td></tr><tr><td data-num="119"></td><td><pre>│   └── pycharm</pre></td></tr><tr><td data-num="120"></td><td><pre>│       ├── configuration.rst</pre></td></tr><tr><td data-num="121"></td><td><pre>│       └── images</pre></td></tr><tr><td data-num="122"></td><td><pre>│           ├── <span class="token number">1</span>.png</pre></td></tr><tr><td data-num="123"></td><td><pre>│           ├── <span class="token number">2</span>.png</pre></td></tr><tr><td data-num="124"></td><td><pre>│           ├── <span class="token number">3</span>.png</pre></td></tr><tr><td data-num="125"></td><td><pre>│           ├── <span class="token number">4</span>.png</pre></td></tr><tr><td data-num="126"></td><td><pre>│           ├── <span class="token number">7</span>.png</pre></td></tr><tr><td data-num="127"></td><td><pre>│           ├── <span class="token number">8</span>.png</pre></td></tr><tr><td data-num="128"></td><td><pre>│           ├── f1.png</pre></td></tr><tr><td data-num="129"></td><td><pre>│           ├── f2.png</pre></td></tr><tr><td data-num="130"></td><td><pre>│           ├── f3.png</pre></td></tr><tr><td data-num="131"></td><td><pre>│           ├── f4.png</pre></td></tr><tr><td data-num="132"></td><td><pre>│           ├── issue1.png</pre></td></tr><tr><td data-num="133"></td><td><pre>│           └── issue2.png</pre></td></tr><tr><td data-num="134"></td><td><pre>├── locale</pre></td></tr><tr><td data-num="135"></td><td><pre>│   └── README.rst</pre></td></tr><tr><td data-num="136"></td><td><pre>├── local.yml</pre></td></tr><tr><td data-num="137"></td><td><pre>├── manage.py</pre></td></tr><tr><td data-num="138"></td><td><pre>├── merge_production_dotenvs_in_dotenv.py</pre></td></tr><tr><td data-num="139"></td><td><pre>├── production.yml</pre></td></tr><tr><td data-num="140"></td><td><pre>├── pytest.ini</pre></td></tr><tr><td data-num="141"></td><td><pre>├── README.rst</pre></td></tr><tr><td data-num="142"></td><td><pre>├── requirements  <span class="token comment"># 包和模块</span></pre></td></tr><tr><td data-num="143"></td><td><pre>│   ├── base.txt  <span class="token comment"># 必备的</span></pre></td></tr><tr><td data-num="144"></td><td><pre>│   ├── local.txt  <span class="token comment"># 开发环境，可能包含一些测试用的包</span></pre></td></tr><tr><td data-num="145"></td><td><pre>│   └── production.txt  <span class="token comment"># 生产环境</span></pre></td></tr><tr><td data-num="146"></td><td><pre>└── setup.cfg</pre></td></tr><tr><td data-num="147"></td><td><pre></pre></td></tr><tr><td data-num="148"></td><td><pre><span class="token number">34</span> directories, <span class="token number">109</span> files</pre></td></tr><tr><td data-num="149"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou app01<span class="token punctuation">]</span><span class="token comment">#</span></pre></td></tr></table></figure><h2 id="包环境管理"><a class="anchor" href="#包环境管理">#</a> 包环境管理</h2><h3 id="pipenv创建环境"><a class="anchor" href="#pipenv创建环境">#</a> pipenv 创建环境</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou ~<span class="token punctuation">]</span><span class="token comment"># cd app01/</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou app01<span class="token punctuation">]</span><span class="token comment"># pipenv --python 3.7</span></pre></td></tr><tr><td data-num="3"></td><td><pre>Creating a virtualenv <span class="token keyword">for</span> this project…</pre></td></tr><tr><td data-num="4"></td><td><pre>Pipfile: /root/app01/Pipfile</pre></td></tr><tr><td data-num="5"></td><td><pre>Using /usr/bin/python3 <span class="token punctuation">(</span><span class="token number">3.7</span>.2<span class="token punctuation">)</span> to create virtualenv…</pre></td></tr><tr><td data-num="6"></td><td><pre>⠙ Creating virtual environment<span class="token punctuation">..</span>.Using base prefix <span class="token string">'/usr/local/python3'</span></pre></td></tr><tr><td data-num="7"></td><td><pre>New python executable <span class="token keyword">in</span> /root/.local/share/virtualenvs/app01-DYWCxUWF/bin/python3</pre></td></tr><tr><td data-num="8"></td><td><pre>Also creating executable <span class="token keyword">in</span> /root/.local/share/virtualenvs/app01-DYWCxUWF/bin/python</pre></td></tr><tr><td data-num="9"></td><td><pre>Installing setuptools, pip, wheel<span class="token punctuation">..</span>.</pre></td></tr><tr><td data-num="10"></td><td><pre>done.</pre></td></tr><tr><td data-num="11"></td><td><pre>Running virtualenv with interpreter /usr/bin/python3</pre></td></tr><tr><td data-num="12"></td><td><pre>✔ Successfully created virtual environment<span class="token operator">!</span></pre></td></tr><tr><td data-num="13"></td><td><pre>Virtualenv location: /root/.local/share/virtualenvs/app01-DYWCxUWF</pre></td></tr><tr><td data-num="14"></td><td><pre>Creating a Pipfile <span class="token keyword">for</span> this project…</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou app01<span class="token punctuation">]</span><span class="token comment">#</span></pre></td></tr></table></figure><h3 id="安装包并lock"><a class="anchor" href="#安装包并lock">#</a> 安装包并 lock</h3><p>安装前先将 requirements/local.txt 中的</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token assign-left variable">psycopg2</span><span class="token operator">==</span><span class="token number">2.7</span>.4 --no-binary psycopg2  <span class="token comment"># https://github.com/psycopg/psycopg2</span></pre></td></tr></table></figure><p>改成</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>psycopg2 --no-binary psycopg2  <span class="token comment"># https://github.com/psycopg/psycopg2</span></pre></td></tr></table></figure><p>否则会安装失败。</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou app01<span class="token punctuation">]</span><span class="token comment"># pipenv install -r requirements/local.txt --skip-lock</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Requirements <span class="token function">file</span> provided<span class="token operator">!</span> Importing into Pipfile…</pre></td></tr><tr><td data-num="3"></td><td><pre>Installing dependencies from Pipfile…</pre></td></tr><tr><td data-num="4"></td><td><pre>  ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ <span class="token number">28</span>/28 — 00:00:13</pre></td></tr><tr><td data-num="5"></td><td><pre>To activate this project's virtualenv, run pipenv shell.</pre></td></tr><tr><td data-num="6"></td><td><pre>Alternatively, run a <span class="token builtin class-name">command</span> inside the virtualenv with pipenv run.</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span>root@shiyanlou app01<span class="token punctuation">]</span><span class="token comment">#</span></pre></td></tr></table></figure><p>如何有提示 An error occurred while installing xxx，重新运行一遍就行了，因为 pipenv 不稳定。</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库文档生成</title>
    <url>/computer-science/python/django/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="django迁移数据库加字段注释"><a class="anchor" href="#django迁移数据库加字段注释">#</a> django 迁移数据库加字段注释</h3><p>源码修改：django/db/backends/base/schema.py 的 column_sql 方法最后添加</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># Return the sql</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 增加针对 mysql 注释的处理</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">if</span> self<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>client<span class="token punctuation">.</span>executable_name <span class="token operator">==</span> <span class="token string">'mysql'</span> <span class="token keyword">and</span> field<span class="token punctuation">.</span>verbose_name<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    sql <span class="token operator">+=</span> <span class="token string">" COMMENT '%s'"</span> <span class="token operator">%</span> field<span class="token punctuation">.</span>verbose_name</pre></td></tr></table></figure><h3 id="生成word版"><a class="anchor" href="#生成word版">#</a> 生成 word 版</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>pip install Mysql2docx</pre></td></tr></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> Mysql2docx <span class="token keyword">import</span> Mysql2docx</pre></td></tr><tr><td data-num="2"></td><td><pre>m <span class="token operator">=</span> Mysql2docx<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>m<span class="token punctuation">.</span>do<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'kcnet_prod'</span><span class="token punctuation">,</span><span class="token number">3306</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="html-markdown-pdf版"><a class="anchor" href="#html-markdown-pdf版">#</a> HTML、Markdown、PDF 版</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#!/usr/bin/env python</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># -*- coding: utf-8 -*-</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> mysql<span class="token punctuation">.</span>connector <span class="token keyword">as</span> mysql</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> sys</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> getopt</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">def</span> <span class="token function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'help:'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--host db server,default localhost'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--port db port,default 3306'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--user db username,default root'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--password db password,default blank'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--database db name'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--output markdown output file,default current path'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        opts<span class="token punctuation">,</span>args <span class="token operator">=</span> getopt<span class="token punctuation">.</span>getopt<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"help"</span><span class="token punctuation">,</span><span class="token string">"host="</span><span class="token punctuation">,</span><span class="token string">"port="</span><span class="token punctuation">,</span><span class="token string">"database="</span><span class="token punctuation">,</span><span class="token string">"user="</span><span class="token punctuation">,</span><span class="token string">"password="</span><span class="token punctuation">,</span><span class="token string">"output="</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">except</span> getopt<span class="token punctuation">.</span>GetoptError<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">if</span> <span class="token string">'help'</span> <span class="token keyword">in</span> args<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        usage<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    host <span class="token operator">=</span> <span class="token string">'localhost'</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    user <span class="token operator">=</span> <span class="token string">'root'</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    password <span class="token operator">=</span> <span class="token string">'123456'</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    database <span class="token operator">=</span> <span class="token string">'gulimall_admin'</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    port <span class="token operator">=</span> <span class="token number">3307</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">#生成的 md 路径 (windows 的改成你自己的盘)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    output <span class="token operator">=</span> <span class="token string">'/project/ExportTable/markdown.out'</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">for</span> op<span class="token punctuation">,</span>value <span class="token keyword">in</span> opts<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">if</span> op <span class="token operator">==</span> <span class="token string">'--host'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            host <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'--port'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            port <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'--database'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            database <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'--user'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            user <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'--password'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            password <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'--output'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            output <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'-h'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            usage<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token keyword">if</span> database <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            usage<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token comment">#    sys.exit()</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    conn <span class="token operator">=</span> mysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span>host<span class="token punctuation">,</span>port<span class="token operator">=</span>port<span class="token punctuation">,</span>user<span class="token operator">=</span>user<span class="token punctuation">,</span>password<span class="token operator">=</span>password<span class="token punctuation">,</span>database<span class="token operator">=</span><span class="token string">'information_schema'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select table_name,table_comment from information_schema.tables where table_schema='%s' and table_type='base table'"</span> <span class="token operator">%</span> database<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    tables <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>    markdown_table_header <span class="token operator">=</span> <span class="token triple-quoted-string string">"""### %s (%s)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>字段名 | 字段类型 | 默认值 | 注解</pre></td></tr><tr><td data-num="60"></td><td><pre>---- | ---- | ---- | ---- """</pre></td></tr><tr><td data-num="61"></td><td><pre>    markdown_table_row <span class="token operator">=</span> <span class="token triple-quoted-string string">"""</span></pre></td></tr><tr><td data-num="62"></td><td><pre>%s | %s | %s | %s """</pre></td></tr><tr><td data-num="63"></td><td><pre>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token keyword">for</span> table <span class="token keyword">in</span> tables<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select COLUMN_NAME,COLUMN_TYPE,COLUMN_DEFAULT,COLUMN_COMMENT from information_schema.COLUMNS where table_schema='%s' and table_name='%s'"</span><span class="token operator">%</span> <span class="token punctuation">(</span>database<span class="token punctuation">,</span>table<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        tmp_table <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        p <span class="token operator">=</span> markdown_table_header <span class="token operator">%</span> table<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        <span class="token keyword">for</span> col <span class="token keyword">in</span> tmp_table<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="69"></td><td><pre>            p <span class="token operator">+=</span> markdown_table_row <span class="token operator">%</span> col</pre></td></tr><tr><td data-num="70"></td><td><pre>        f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>p<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'generate markdown success！'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>找到生成文件，复制文件中的代码，打开<span class="exturl" data-url="aHR0cHM6Ly9tYXhpYW5nLmlvLw==">马克飞象</span>，新建文件并粘贴。然后选择自己喜欢的格式导出。</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium的使用</title>
    <url>/computer-science/python/spider/Selenium%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="selenium的使用"><a class="anchor" href="#selenium的使用">#</a> Selenium 的使用</h2><h3 id="模拟谷歌浏览器访问百度首页并输入python关键字搜索"><a class="anchor" href="#模拟谷歌浏览器访问百度首页并输入python关键字搜索">#</a> 模拟谷歌浏览器访问百度首页，并输入 python 关键字搜索</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#初始化一个浏览器（如：谷歌，使用 Chrome 需安装 chromedriver）</span></pre></td></tr><tr><td data-num="8"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">#driver = webdriver.PhantomJS () #无界面浏览器</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">#请求网页</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">#查找 id 值为 kw 的节点对象（搜索输入框）</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token builtin">input</span> <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">#模拟键盘输入字串内容</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token builtin">input</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">#模拟键盘点击回车键</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token builtin">input</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">#显式等待，最长 10 秒</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">#等待条件：10 秒内必须有个 id 属性值为 content_left 的节点加载出来，否则抛异常。</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span><span class="token string">'content_left'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment"># 输出响应信息</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>current_url<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">finally</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token comment">#关闭浏览器</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">#driver.close()</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">pass</span></pre></td></tr></table></figure><h3 id="声明浏览器对象"><a class="anchor" href="#声明浏览器对象">#</a> 声明浏览器对象</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#谷歌 需：ChromeDriver 驱动</span></pre></td></tr><tr><td data-num="4"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>FireFox<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#火狐 需：GeckoDriver 驱动</span></pre></td></tr><tr><td data-num="5"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span><span class="token punctuation">)</span>  </pre></td></tr><tr><td data-num="6"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Safari<span class="token punctuation">(</span><span class="token punctuation">)</span>  </pre></td></tr><tr><td data-num="7"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>PhantomJS<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#无界面浏览器</span></pre></td></tr></table></figure><h3 id="访问页面"><a class="anchor" href="#访问页面">#</a> 访问页面</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#driver = webdriver.PhantomJS()</span></pre></td></tr><tr><td data-num="5"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.taobao.com"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#driver.close()</span></pre></td></tr></table></figure><h3 id="查找节点"><a class="anchor" href="#查找节点">#</a> 查找节点</h3><h4 id="获取单个节点的方法"><a class="anchor" href="#获取单个节点的方法">#</a> 获取单个节点的方法</h4><blockquote><p>find_element_by_id()<br>find_element_by_name()<br>find_element_by_xpath()<br>find_element_by_link_text()<br>find_element_by_partial_link_text()<br>find_element_by_tag_name()<br>find_element_by_class_name()<br>find_element_by_css_seletor()</p></blockquote><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#创建浏览器对象</span></pre></td></tr><tr><td data-num="5"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#driver = webdriver.PhantomJS()</span></pre></td></tr><tr><td data-num="7"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.taobao.com"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">#下面都是获取 id 属性值为 q 的节点对象</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token builtin">input</span> <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token builtin">input</span> <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">"#q"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token builtin">input</span> <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//*[@id='q']"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">#效果同上</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token builtin">input</span> <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span><span class="token string">"q"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">#driver.close()</span></pre></td></tr></table></figure><h4 id="获取多个节点的方法"><a class="anchor" href="#获取多个节点的方法">#</a> 获取多个节点的方法</h4><blockquote><p>find_elements_by_id()<br>find_elements_by_name()<br>find_elements_by_xpath()<br>find_elements_by_link_text()<br>find_elements_by_partial_link_text()<br>find_elements_by_tag_name()<br>find_elements_by_class_name()<br>find_elements_by_css_seletor()</p></blockquote><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> time</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#创建浏览器对象</span></pre></td></tr><tr><td data-num="5"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#driver = webdriver.PhantomJS()</span></pre></td></tr><tr><td data-num="7"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.taobao.com"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">#下面都是获取 id 属性值为 q 的节点对象</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token builtin">input</span> <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">#模拟键盘输入 iphone</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token builtin">input</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'iphone'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">#清空输入框</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token builtin">input</span><span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">#模拟键盘输入 iPad</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token builtin">input</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'iPad'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">#获取搜索按钮节点</span></pre></td></tr><tr><td data-num="18"></td><td><pre>botton <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">"btn-search"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">#触发点击动作</span></pre></td></tr><tr><td data-num="20"></td><td><pre>botton<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">#driver.close()</span></pre></td></tr></table></figure><h4 id="动态链"><a class="anchor" href="#动态链">#</a> 动态链</h4><p>ActionChains 是一种自动化低级别交互的方法，如鼠标移动，鼠标按钮操作，按键操作和上下文菜单交互。这对于执行更复杂的操作（如悬停和拖放）很有用.</p><blockquote><p>move_to_element（to_element ）-- 将鼠标移到元素的中间<br>move_by_offset（xoffset，yoffset ）-- 将鼠标移至当前鼠标位置的偏移量<br>drag_and_drop（源，目标）-- 然后移动到目标元素并释放鼠标按钮。<br>pause（秒）-- 以秒为单位暂停指定持续时间的所有输入<br>perform（）-- 执行所有存储的操作。<br>release（on_element = None ）释放元素上的一个持有鼠标按钮。<br>reset_actions（）-- 清除已存储在远程端的操作。<br>send_keys（* keys_to_send ）-- 将键发送到当前的焦点元素。<br>send_keys_to_element（element，* keys_to_send ）-- 将键发送到一个元素。</p></blockquote><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#创建浏览器对象</span></pre></td></tr><tr><td data-num="2"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#加载指定 url 地址</span></pre></td></tr><tr><td data-num="4"></td><td><pre>url <span class="token operator">=</span> <span class="token string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span></pre></td></tr><tr><td data-num="5"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 切换 Frame 窗口    </span></pre></td></tr><tr><td data-num="7"></td><td><pre>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'iframeResult'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">#获取两个 div 节点对象</span></pre></td></tr><tr><td data-num="9"></td><td><pre>source <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">"#draggable"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>target <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">"#droppable"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">#创建一个动作链对象</span></pre></td></tr><tr><td data-num="12"></td><td><pre>actions <span class="token operator">=</span> ActionChains<span class="token punctuation">(</span>driver<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">#将一个拖拽操作添加到动作链队列中</span></pre></td></tr><tr><td data-num="14"></td><td><pre>actions<span class="token punctuation">.</span>drag_and_drop<span class="token punctuation">(</span>source<span class="token punctuation">,</span>target<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">#执行所有存储的操作（顺序被触发）</span></pre></td></tr><tr><td data-num="17"></td><td><pre>actions<span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">#driver.close()</span></pre></td></tr></table></figure><h4 id="执行javascript"><a class="anchor" href="#执行javascript">#</a> 执行 JavaScript</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#创建浏览器对象</span></pre></td></tr><tr><td data-num="4"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#加载指定 url 地址</span></pre></td></tr><tr><td data-num="6"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.zhihu.com/explore"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#执行 javascript 程序将页面滚动移至底部</span></pre></td></tr><tr><td data-num="8"></td><td><pre>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">#执行 javascript 实现一个弹框操作</span></pre></td></tr><tr><td data-num="10"></td><td><pre>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.alert("Hello Selenium!")'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">#driver.close()</span></pre></td></tr></table></figure><h4 id="获取节点信息"><a class="anchor" href="#获取节点信息">#</a> 获取节点信息</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#创建浏览器对象</span></pre></td></tr><tr><td data-num="5"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#加载请求指定 url 地址</span></pre></td></tr><tr><td data-num="7"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.zhihu.com/explore"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">#获取 id 属性值为 zh-top-link-logo 的节点（logo）</span></pre></td></tr><tr><td data-num="9"></td><td><pre>logo <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"zh-top-link-logo"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>logo<span class="token punctuation">)</span> <span class="token comment">#输出节点对象</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>logo<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#节点的 class 属性值</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">#获取 id 属性值为 zu-top-add-question 节点（提问按钮）</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token builtin">input</span> <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"zu-top-add-question"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">#获取节点间内容</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>  <span class="token comment">#获取 id 属性值</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>location<span class="token punctuation">)</span> <span class="token comment">#节点在页面中的相对位置</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>tag_name<span class="token punctuation">)</span> <span class="token comment">#节点标签名称</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span>     <span class="token comment">#获取节点的大小</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">#driver.close()</span></pre></td></tr></table></figure><h4 id="切换frame"><a class="anchor" href="#切换frame">#</a> 切换 Frame</h4><p>我们可以使用 switch_to.frame () 来切换 Frame 界面</p><h3 id="延迟等待"><a class="anchor" href="#延迟等待">#</a> 延迟等待</h3><p>浏览器加载网页是需要时间的，Selenium 也不例外，若要获取完整网页内容，就要延时等待。<br>在 Selenium 中延迟等待方式有两种：一种是隐式等待，一种是显式等待（推荐）</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>rom selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#创建浏览器对象</span></pre></td></tr><tr><td data-num="4"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#使用隐式等待 (固定时间)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#加载请求指定 url 地址</span></pre></td></tr><tr><td data-num="8"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.zhihu.com/explore"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">#获取节点    </span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token builtin">input</span> <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"zu-top-add-question"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">#获取节点间内容</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">#driver.close()</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC</pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">#创建浏览器对象</span></pre></td></tr><tr><td data-num="20"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">#加载请求指定 url 地址</span></pre></td></tr><tr><td data-num="22"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.zhihu.com/explore"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">#显式等待，最长 10 秒</span></pre></td></tr><tr><td data-num="24"></td><td><pre>wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">#等待条件：10 秒内必须有个 id 属性值为 zu-top-add-question 的节点加载出来，否则抛异常。</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token builtin">input</span> <span class="token operator">=</span> wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span><span class="token string">'zu-top-add-question'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">#获取节点间内容</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">#driver.close()</span></pre></td></tr></table></figure><h3 id="前进和后退"><a class="anchor" href="#前进和后退">#</a> 前进和后退</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> time</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#创建浏览器对象</span></pre></td></tr><tr><td data-num="5"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#加载请求指定 url 地址</span></pre></td></tr><tr><td data-num="7"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.taobao.com"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.jd.com"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>driver<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#后退</span></pre></td></tr><tr><td data-num="12"></td><td><pre>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#前进</span></pre></td></tr><tr><td data-num="13"></td><td><pre>driver<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">#driver.close()</span></pre></td></tr></table></figure><h3 id="cookies"><a class="anchor" href="#cookies">#</a> cookies</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#创建浏览器对象</span></pre></td></tr><tr><td data-num="5"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#加载请求指定 url 地址</span></pre></td></tr><tr><td data-num="7"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.zhihu.com/explore"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>driver<span class="token punctuation">.</span>add_cookie<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'namne'</span><span class="token punctuation">,</span><span class="token string">'domain'</span><span class="token punctuation">:</span><span class="token string">'www.zhihu.com'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>driver<span class="token punctuation">.</span>delete_all_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">#driver.close()</span></pre></td></tr></table></figure><h3 id="选项卡管理"><a class="anchor" href="#选项卡管理">#</a> 选项卡管理</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> time</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#创建浏览器对象</span></pre></td></tr><tr><td data-num="5"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#加载请求指定 url 地址</span></pre></td></tr><tr><td data-num="7"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">#使用 JavaScript 开启一个新的选型卡</span></pre></td></tr><tr><td data-num="9"></td><td><pre>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.open()'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>window_handles<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">#切换到第二个选项卡，并打开 url 地址</span></pre></td></tr><tr><td data-num="12"></td><td><pre>driver<span class="token punctuation">.</span>switch_to_window<span class="token punctuation">(</span>driver<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.taobao.com"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">#切换到第一个选项卡，并打开 url 地址</span></pre></td></tr><tr><td data-num="16"></td><td><pre>driver<span class="token punctuation">.</span>switch_to_window<span class="token punctuation">(</span>driver<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.jd.com"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">#driver.close()</span></pre></td></tr></table></figure><h3 id="异常处理"><a class="anchor" href="#异常处理">#</a> 异常处理</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> TimeoutException<span class="token punctuation">,</span>NoSuchElementException</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#创建浏览器对象</span></pre></td></tr><tr><td data-num="5"></td><td><pre>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">#加载请求指定 url 地址</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">except</span> TimeoutException<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Time Out'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">#加载请求指定 url 地址</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">except</span> NoSuchElementException<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'No Element'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">finally</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">#driver.close()</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">pass</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Selenuim</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt的Led控件显示库</title>
    <url>/computer-science/python/pyqt/PyQt%E7%9A%84Led%E6%8E%A7%E4%BB%B6%E6%98%BE%E7%A4%BA%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="控件说明"><a class="anchor" href="#控件说明">#</a> 控件说明</h3><p>在 Github 上，偶然发现了一个基于 PyQt5 的第三方 Led 指示灯控件库，使用起来非常方便，控件外观也比较漂亮，更难能可贵的是作者源代码写得比较简洁，仅仅才约 200 行左右，可以作为一个在 PyQt 中写自定义控件方法的非常好的学习例子。这个控件具有以下特点：</p><ol><li>提供了 3 种外形可供选择，分别为：'capsule', 'circle', 'rectangle' 等</li><li>提供了 7 种颜色可供选择，分别为：'blue', 'green', 'orange', 'purple', 'red', 'yellow' 等</li></ol><h3 id="安装使用"><a class="anchor" href="#安装使用">#</a> 安装使用</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>pip install pyqt<span class="token operator">-</span>led</pre></td></tr></table></figure><p>在代码中使用时，只需使用以下语句导入该库的 LED 类即可：</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> pyqt_led import led</pre></td></tr></table></figure><p>在该库中，提供了几个主要的方法函数，包括 set_on_color、set_off_color、set_shape、turn_on、turn_off 等函数，分别设置 Led 的开 / 关颜色、形状及设置开、关状态等。</p><h3 id="使用案例"><a class="anchor" href="#使用案例">#</a> 使用案例</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> sys</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">from</span> pyqt_led <span class="token keyword">import</span> Led</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        QWidget<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        self<span class="token punctuation">.</span>_shape <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'capsule'</span><span class="token punctuation">,</span> <span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'rectangle'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        self<span class="token punctuation">.</span>_color <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'purple'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                                <span class="token string">'yellow'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        self<span class="token punctuation">.</span>_layout <span class="token operator">=</span> QGridLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        self<span class="token punctuation">.</span>_create_leds<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        self<span class="token punctuation">.</span>_arrange_leds<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        self<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">'pyqt-led Demo'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">keyPressEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">if</span> e<span class="token punctuation">.</span>key<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token punctuation">.</span>Key_Escape<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            self<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">_create_leds</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">for</span> s <span class="token keyword">in</span> self<span class="token punctuation">.</span>_shape<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">for</span> c <span class="token keyword">in</span> self<span class="token punctuation">.</span>_color<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">'self._&#123;&#125;_&#123;&#125; = Led(self, on_color=Led.&#123;&#125;, shape=Led.&#123;&#125;, build="debug")'</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                     <span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                <span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">'self._&#123;&#125;_&#123;&#125;.setFocusPolicy(Qt.NoFocus)'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                <span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">'self._&#123;&#125;_&#123;&#125;.turn_on(True)'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">_arrange_leds</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">for</span> r <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                <span class="token keyword">exec</span><span class="token punctuation">(</span>'self<span class="token punctuation">.</span>_layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>_<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> \</pre></td></tr><tr><td data-num="36"></td><td><pre>                      Qt<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>'</pre></td></tr><tr><td data-num="37"></td><td><pre>                     <span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_shape<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_color<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>demo <span class="token operator">=</span> Demo<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>demo<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>运行这个程序后，即可出现本文开头所示的在一个窗口上显示了不同形状、不同颜色的 Led 的窗口。默认运行时显示的为全亮状态，当设置为全灭状态时，如下图所示：</p><p>在代码中，Led 类实例化时，其构造函数原型如下所示：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>Led<span class="token punctuation">(</span>parent<span class="token punctuation">,</span> on_color<span class="token operator">=</span>green<span class="token punctuation">,</span> off_color<span class="token operator">=</span>black<span class="token punctuation">,</span> shape<span class="token operator">=</span>rectangle<span class="token punctuation">,</span> build<span class="token operator">=</span><span class="token string">'release'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>可传入父窗口、初始的亮颜色、灭颜色、形状及状态参数。</p><p>对于需要在程序开发中使用指示灯的情况，如显示各种程序的运行状态等，应该说这是一个比较实用的库了。当然，由于源代码比较简单，你也可以在其基础上进一步修改订制，比如添加其它形状、颜色等选项设置，以满足自己的项目使用要求。</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyqt5嵌套窗口切换</title>
    <url>/computer-science/python/pyqt/Pyqt5%E5%B5%8C%E5%A5%97%E7%AA%97%E5%8F%A3%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用designer设计"><a class="anchor" href="#使用designer设计">#</a> 使用 designer 设计</h3><p>使用 QstackerWidget 进行多界面切换</p><p>在 stackedWidget 对象中插入页，即可实现多页面。<br>将控件放入指定对应页面。<br><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/Pyqt5%E5%B5%8C%E5%A5%97%E7%AA%97%E5%8F%A3%E5%88%87%E6%8D%A2/designer%E8%AE%BE%E8%AE%A1%E5%9B%BE.png" alt=""></p><h3 id="ui代码"><a class="anchor" href="#ui代码">#</a> Ui 代码</h3><pre><code class="language-Python">from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName(&quot;MainWindow&quot;)
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName(&quot;centralwidget&quot;)
        self.B1 = QtWidgets.QPushButton(self.centralwidget)
        self.B1.setGeometry(QtCore.QRect(50, 180, 75, 23))
        self.B1.setObjectName(&quot;B1&quot;)
        self.B2 = QtWidgets.QPushButton(self.centralwidget)
        self.B2.setGeometry(QtCore.QRect(50, 280, 75, 23))
        self.B2.setObjectName(&quot;B2&quot;)
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(200, 60, 551, 421))
        self.stackedWidget.setObjectName(&quot;stackedWidget&quot;)
        self.page1 = QtWidgets.QWidget()
        self.page1.setObjectName(&quot;page1&quot;)
        self.frame1 = QtWidgets.QFrame(self.page1)
        self.frame1.setGeometry(QtCore.QRect(180, 110, 221, 141))
        self.frame1.setStyleSheet(&quot;background-color: rgb(255, 255, 127);&quot;)
        self.frame1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame1.setObjectName(&quot;frame1&quot;)
        self.stackedWidget.addWidget(self.page1)
        self.page2 = QtWidgets.QWidget()
        self.page2.setObjectName(&quot;page2&quot;)
        self.frame2 = QtWidgets.QFrame(self.page2)
        self.frame2.setGeometry(QtCore.QRect(149, 89, 251, 191))
        self.frame2.setStyleSheet(&quot;background-color: rgb(255, 0, 127);&quot;)
        self.frame2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame2.setObjectName(&quot;frame2&quot;)
        self.stackedWidget.addWidget(self.page2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))
        self.menubar.setObjectName(&quot;menubar&quot;)
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName(&quot;statusbar&quot;)
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate(&quot;MainWindow&quot;, &quot;MainWindow&quot;))
        self.B1.setText(_translate(&quot;MainWindow&quot;, &quot;一号色&quot;))
        self.B2.setText(_translate(&quot;MainWindow&quot;, &quot;二号色&quot;))

</code></pre><h3 id="控制代码"><a class="anchor" href="#控制代码">#</a> 控制代码</h3><p>button 按钮绑定对应事件进行页面展示。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> sys</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QMainWindow</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> win <span class="token keyword">import</span> Ui_MainWindow</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MainWin</span><span class="token punctuation">(</span>QMainWindow<span class="token punctuation">,</span> Ui_MainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token builtin">super</span><span class="token punctuation">(</span>MainWin<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        self<span class="token punctuation">.</span>B1<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>stackedWidget<span class="token punctuation">.</span>setCurrentIndex<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 点击按钮 1 展示第一个 frame</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        self<span class="token punctuation">.</span>B2<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>stackedWidget<span class="token punctuation">.</span>setCurrentIndex<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 点击按钮 2 展示第二个 frame</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    win <span class="token operator">=</span> MainWin<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="效果图"><a class="anchor" href="#效果图">#</a> 效果图</h3><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/Pyqt5%E5%B5%8C%E5%A5%97%E7%AA%97%E5%8F%A3%E5%88%87%E6%8D%A2/b1.png" alt=""><br><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/Pyqt5%E5%B5%8C%E5%A5%97%E7%AA%97%E5%8F%A3%E5%88%87%E6%8D%A2/b2.png" alt=""></p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>pyqt5插入图片</title>
    <url>/computer-science/python/pyqt/pyqt5%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="designer中图片资源插入"><a class="anchor" href="#designer中图片资源插入">#</a> designer 中图片资源插入</h3><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/pyqt5%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/1.png" alt=""><br>如修改 lable 控件的背景图，选择资源，导入 qrc 文件。</p><p>qrc 文件格式编辑</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RCC</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>1.jpeg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/add.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/add_to_list.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/center_volume.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/cycle.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/cycle_one.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/de.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/delete.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/disc.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/downloads.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/high_volume.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/kk-music.ico<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/logo.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/music.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/my_playlist.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/no_volume.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/on.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/open_folder.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/random.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/small_volume.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/song.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/start.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/搜索.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/网易云音乐.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/stop.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>ico/音量 .png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RCC</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>再使用命令</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>pyrcc5 xx<span class="token punctuation">.</span>qrc <span class="token operator">-</span>o xx<span class="token punctuation">.</span>py</pre></td></tr></table></figure><p>并在 ui 文件转换的 py 文件中导入该文件，作为图片资源文件。</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>Pyqt5</tag>
      </tags>
  </entry>
  <entry>
    <title>pyqt5文本高亮</title>
    <url>/computer-science/python/pyqt/pyqt5%E6%96%87%E6%9C%AC%E9%AB%98%E4%BA%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MainWindow</span><span class="token punctuation">(</span>QMainWindow<span class="token punctuation">,</span> Ui_MainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">file</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Qmodelidx<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>filePath<span class="token punctuation">(</span>Qmodelidx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">'ignore'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token comment"># 打开 utf-8 格式的文件，遇到出错进行忽略</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token comment"># filename 返回值为 ('C:/PyQt5/PyQt1.py', 'All Files (*)') 是一个元组，但 with...open... 只需要提供一个文件的地址而已，故输入参数 filename [0]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token comment"># 读取所选择的文件名，并将文本编辑小部件的内容设置为文件读取的内容。这里提一下使用 with 语句来自动帮我们调用 close ()</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token comment"># 方法，避免由于文件读写时产生 IOError，导致 close ()</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token comment"># 不会调用，需要 try...finally 来实现的不便。</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 将文件读取出来</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setPlainText<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment"># 将读取到的内容放到 textEdit 小部件中</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'from'</span><span class="token punctuation">,</span> <span class="token string">'print'</span><span class="token punctuation">]</span> <span class="token comment"># 高亮的关键字</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> li<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            text <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">if</span> <span class="token keyword">not</span> text<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token keyword">return</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            col <span class="token operator">=</span> QColor<span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 置为橙色</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            fmt <span class="token operator">=</span> QTextCharFormat<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            fmt<span class="token punctuation">.</span>setForeground<span class="token punctuation">(</span>col<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token comment"># 先把光标移动到开头</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>moveCursor<span class="token punctuation">(</span>QTextCursor<span class="token punctuation">.</span>Start<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">while</span> self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>find<span class="token punctuation">(</span>text<span class="token punctuation">,</span> QTextDocument<span class="token punctuation">.</span>FindWholeWords<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 查找所有文字</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                self<span class="token punctuation">.</span>mergeFormatOnWordOrSelection<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">mergeFormatOnWordOrSelection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>textCursor<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">if</span> <span class="token keyword">not</span> cursor<span class="token punctuation">.</span>hasSelection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            cursor<span class="token punctuation">.</span>select<span class="token punctuation">(</span>QTextCursor<span class="token punctuation">.</span>WordUnderCursor<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        cursor<span class="token punctuation">.</span>mergeCharFormat<span class="token punctuation">(</span><span class="token builtin">format</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>mergeCurrentCharFormat<span class="token punctuation">(</span><span class="token builtin">format</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>pyqt5弹出窗口代码实例大全</title>
    <url>/computer-science/python/pyqt/pyqt5%E5%BC%B9%E5%87%BA%E7%AA%97%E5%8F%A3%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="pyqt5弹出窗口代码大全"><a class="anchor" href="#pyqt5弹出窗口代码大全">#</a> PyQT5 弹出窗口代码大全</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt<span class="token punctuation">,</span> pyqtSignal<span class="token punctuation">,</span> QTimer</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        self<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">'PyQt5 弹出窗口（框）大全'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token comment"># 全局布局（注意参数 self）</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        wl <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token comment"># 局部布局</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        h1 <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 输入框</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        h2 <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 消息窗口</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        h3 <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 文件（夹）打开，保存</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        h4 <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 颜色、字体、自定义</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>        btn11 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'输入：整数'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        btn12 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'输入：小数'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        btn13 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'输入：文本'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        btn14 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'输入：多文'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        btn15 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'输入：选项'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        btn21 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'消息：信息'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        btn22 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'消息：问答'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        btn23 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'消息：警告'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        btn24 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'消息：危险'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        btn25 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'消息：关于'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>        btn31 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'文件：文件夹'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        btn32 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'文件：单文件'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        btn33 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'文件：多文件'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        btn34 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'文件：保存'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        btn35 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'文件：另存为'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>        btn41 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'颜色'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        btn42 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'字体'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        btn43 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'自定义'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token keyword">for</span> btn <span class="token keyword">in</span> <span class="token punctuation">(</span>btn11<span class="token punctuation">,</span> btn12<span class="token punctuation">,</span> btn13<span class="token punctuation">,</span> btn14<span class="token punctuation">,</span> btn15<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            h1<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>btn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token keyword">for</span> btn <span class="token keyword">in</span> <span class="token punctuation">(</span>btn21<span class="token punctuation">,</span> btn22<span class="token punctuation">,</span> btn23<span class="token punctuation">,</span> btn24<span class="token punctuation">,</span> btn25<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            h2<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>btn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token keyword">for</span> btn <span class="token keyword">in</span> <span class="token punctuation">(</span>btn31<span class="token punctuation">,</span> btn32<span class="token punctuation">,</span> btn33<span class="token punctuation">,</span> btn34<span class="token punctuation">,</span> btn35<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            h3<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>btn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">for</span> btn <span class="token keyword">in</span> <span class="token punctuation">(</span>btn41<span class="token punctuation">,</span> btn42<span class="token punctuation">,</span> btn43<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            h4<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>btn<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>        btn11<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn11<span class="token punctuation">)</span>  <span class="token comment"># 输入：整数</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        btn12<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn12<span class="token punctuation">)</span>  <span class="token comment"># 输入：小数</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        btn13<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn13<span class="token punctuation">)</span>  <span class="token comment"># 输入：文本</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        btn14<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn14<span class="token punctuation">)</span>  <span class="token comment"># 输入：多文</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        btn15<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn15<span class="token punctuation">)</span>  <span class="token comment"># 输入：选项</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>        btn21<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn21<span class="token punctuation">)</span>  <span class="token comment"># 消息：信息</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        btn22<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn22<span class="token punctuation">)</span>  <span class="token comment"># 消息：问答</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        btn23<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn23<span class="token punctuation">)</span>  <span class="token comment"># 消息：警告</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        btn24<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn24<span class="token punctuation">)</span>  <span class="token comment"># 消息：危险</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        btn25<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn25<span class="token punctuation">)</span>  <span class="token comment"># 消息：关于</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre>        btn31<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn31<span class="token punctuation">)</span>  <span class="token comment"># 文件：文件夹</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        btn32<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn32<span class="token punctuation">)</span>  <span class="token comment"># 文件：单文件</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        btn33<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn33<span class="token punctuation">)</span>  <span class="token comment"># 文件：多文件</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        btn34<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn34<span class="token punctuation">)</span>  <span class="token comment"># 文件：保存</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        btn35<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn35<span class="token punctuation">)</span>  <span class="token comment"># 文件：另存为</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre>        btn41<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn41<span class="token punctuation">)</span>  <span class="token comment"># 颜色</span></pre></td></tr><tr><td data-num="76"></td><td><pre>        btn42<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn42<span class="token punctuation">)</span>  <span class="token comment"># 字体</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        btn43<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>do_btn43<span class="token punctuation">)</span>  <span class="token comment"># 自定义</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre>        <span class="token comment"># 加到全局布局</span></pre></td></tr><tr><td data-num="80"></td><td><pre>        wl<span class="token punctuation">.</span>addLayout<span class="token punctuation">(</span>h1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre>        wl<span class="token punctuation">.</span>addLayout<span class="token punctuation">(</span>h2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="82"></td><td><pre>        wl<span class="token punctuation">.</span>addLayout<span class="token punctuation">(</span>h3<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="83"></td><td><pre>        wl<span class="token punctuation">.</span>addLayout<span class="token punctuation">(</span>h4<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>        self<span class="token punctuation">.</span>window2 <span class="token operator">=</span> MyWindow2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 自定义窗口</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        self<span class="token punctuation">.</span>window2<span class="token punctuation">.</span>before_close_signal<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>echo<span class="token punctuation">)</span>  <span class="token comment"># 接收自定义窗口关闭时发送过来的信号，交给 echo 函数显示</span></pre></td></tr><tr><td data-num="87"></td><td><pre></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">echo</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="89"></td><td><pre>        <span class="token triple-quoted-string string">'''显示对话框返回值'''</span></pre></td></tr><tr><td data-num="90"></td><td><pre>        QMessageBox<span class="token punctuation">.</span>information<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"返回值"</span><span class="token punctuation">,</span> <span class="token string">"得到：&#123;&#125;\n\ntype: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="91"></td><td><pre>                                QMessageBox<span class="token punctuation">.</span>Yes <span class="token operator">|</span> QMessageBox<span class="token punctuation">.</span>No<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="92"></td><td><pre>        <span class="token comment"># pass</span></pre></td></tr><tr><td data-num="93"></td><td><pre></pre></td></tr><tr><td data-num="94"></td><td><pre>    <span class="token comment"># =====================================================================</span></pre></td></tr><tr><td data-num="95"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn11</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 输入：整数</span></pre></td></tr><tr><td data-num="96"></td><td><pre>        <span class="token comment"># 后面四个数字的作用依次是 初始值 最小值 最大值 步幅</span></pre></td></tr><tr><td data-num="97"></td><td><pre>        value<span class="token punctuation">,</span> ok <span class="token operator">=</span> QInputDialog<span class="token punctuation">.</span>getInt<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"输入框标题"</span><span class="token punctuation">,</span> <span class="token string">"这是提示信息\n\n请输入整数:"</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="98"></td><td><pre>        <span class="token comment"># self.echo(value)</span></pre></td></tr><tr><td data-num="99"></td><td><pre></pre></td></tr><tr><td data-num="100"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn12</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 输入：小数</span></pre></td></tr><tr><td data-num="101"></td><td><pre>        <span class="token comment"># 后面四个数字的作用依次是 初始值 最小值 最大值 小数点后位数</span></pre></td></tr><tr><td data-num="102"></td><td><pre>        value<span class="token punctuation">,</span> ok <span class="token operator">=</span> QInputDialog<span class="token punctuation">.</span>getDouble<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"输入框标题"</span><span class="token punctuation">,</span> <span class="token string">"这是提示信息\n\n请输入整数:"</span><span class="token punctuation">,</span> <span class="token number">37.56</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="103"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="104"></td><td><pre></pre></td></tr><tr><td data-num="105"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn13</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 输入：文本</span></pre></td></tr><tr><td data-num="106"></td><td><pre>        <span class="token comment"># 第三个参数表示显示类型，可选，有正常（QLineEdit.Normal）、密碼（ QLineEdit. Password）、不显示（ QLineEdit. NoEcho）三种情况</span></pre></td></tr><tr><td data-num="107"></td><td><pre>        value<span class="token punctuation">,</span> ok <span class="token operator">=</span> QInputDialog<span class="token punctuation">.</span>getText<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"输入框标题"</span><span class="token punctuation">,</span> <span class="token string">"这是提示信息\n\n请输入文本:"</span><span class="token punctuation">,</span> QLineEdit<span class="token punctuation">.</span>Normal<span class="token punctuation">,</span> <span class="token string">"这是默认值"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="108"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="109"></td><td><pre></pre></td></tr><tr><td data-num="110"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn14</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 输入：多文</span></pre></td></tr><tr><td data-num="111"></td><td><pre>        value<span class="token punctuation">,</span> ok <span class="token operator">=</span> QInputDialog<span class="token punctuation">.</span>getMultiLineText<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"输入框标题"</span><span class="token punctuation">,</span> <span class="token string">"这是提示信息\n\n请输入地址:"</span><span class="token punctuation">,</span> <span class="token string">"默认的\n我的地址是\n中国广东广州番禺"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="112"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="113"></td><td><pre></pre></td></tr><tr><td data-num="114"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn15</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 输入：选项</span></pre></td></tr><tr><td data-num="115"></td><td><pre>        <span class="token comment"># 1 为默认选中选项目，True/False  列表框是否可编辑。</span></pre></td></tr><tr><td data-num="116"></td><td><pre>        items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Spring"</span><span class="token punctuation">,</span> <span class="token string">"Summer"</span><span class="token punctuation">,</span> <span class="token string">"Fall"</span><span class="token punctuation">,</span> <span class="token string">"Winter"</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="117"></td><td><pre>        value<span class="token punctuation">,</span> ok <span class="token operator">=</span> QInputDialog<span class="token punctuation">.</span>getItem<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"输入框标题"</span><span class="token punctuation">,</span> <span class="token string">"这是提示信息\n\n请选择季节:"</span><span class="token punctuation">,</span> items<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="118"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="119"></td><td><pre></pre></td></tr><tr><td data-num="120"></td><td><pre>    <span class="token comment"># =====================================================================</span></pre></td></tr><tr><td data-num="121"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn21</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 消息：信息</span></pre></td></tr><tr><td data-num="122"></td><td><pre>        reply <span class="token operator">=</span> QMessageBox<span class="token punctuation">.</span>information<span class="token punctuation">(</span>self<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="123"></td><td><pre>                                        <span class="token string">"消息框标题"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="124"></td><td><pre>                                        <span class="token string">"这是一条消息。"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="125"></td><td><pre>                                        QMessageBox<span class="token punctuation">.</span>Yes <span class="token operator">|</span> QMessageBox<span class="token punctuation">.</span>No<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="126"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>reply<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="127"></td><td><pre></pre></td></tr><tr><td data-num="128"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn22</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 消息：问答</span></pre></td></tr><tr><td data-num="129"></td><td><pre>        reply <span class="token operator">=</span> QMessageBox<span class="token punctuation">.</span>question<span class="token punctuation">(</span>self<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="130"></td><td><pre>                                     <span class="token string">"消息框标题"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="131"></td><td><pre>                                     <span class="token string">"这是一条问答吗？"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="132"></td><td><pre>                                     QMessageBox<span class="token punctuation">.</span>Yes <span class="token operator">|</span> QMessageBox<span class="token punctuation">.</span>No<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="133"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>reply<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="134"></td><td><pre></pre></td></tr><tr><td data-num="135"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn23</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 消息：警告</span></pre></td></tr><tr><td data-num="136"></td><td><pre>        reply <span class="token operator">=</span> QMessageBox<span class="token punctuation">.</span>warning<span class="token punctuation">(</span>self<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="137"></td><td><pre>                                    <span class="token string">"消息框标题"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="138"></td><td><pre>                                    <span class="token string">"这是一条警告！"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="139"></td><td><pre>                                    QMessageBox<span class="token punctuation">.</span>Yes <span class="token operator">|</span> QMessageBox<span class="token punctuation">.</span>No<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="140"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>reply<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="141"></td><td><pre></pre></td></tr><tr><td data-num="142"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn24</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 消息：危险</span></pre></td></tr><tr><td data-num="143"></td><td><pre>        reply <span class="token operator">=</span> QMessageBox<span class="token punctuation">.</span>ctitical<span class="token punctuation">(</span>self<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="144"></td><td><pre>                                     <span class="token string">"消息框标题"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="145"></td><td><pre>                                     <span class="token string">"危险！程序即将强制退出！！！\n\n这个按钮再也点不开。"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="146"></td><td><pre>                                     QMessageBox<span class="token punctuation">.</span>Yes <span class="token operator">|</span> QMessageBox<span class="token punctuation">.</span>No<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="147"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>reply<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="148"></td><td><pre></pre></td></tr><tr><td data-num="149"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn25</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 消息：关于</span></pre></td></tr><tr><td data-num="150"></td><td><pre>        reply <span class="token operator">=</span> QMessageBox<span class="token punctuation">.</span>about<span class="token punctuation">(</span>self<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="151"></td><td><pre>                                  <span class="token string">"消息框标题"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="152"></td><td><pre>                                  <span class="token string">"这是关于软件的说明。。。"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="153"></td><td><pre>                                  QMessageBox<span class="token punctuation">.</span>Yes <span class="token operator">|</span> QMessageBox<span class="token punctuation">.</span>No<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="154"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>reply<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="155"></td><td><pre></pre></td></tr><tr><td data-num="156"></td><td><pre>    <span class="token comment"># =====================================================================</span></pre></td></tr><tr><td data-num="157"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn31</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 文件：文件夹</span></pre></td></tr><tr><td data-num="158"></td><td><pre>        <span class="token builtin">dir</span> <span class="token operator">=</span> QFileDialog<span class="token punctuation">.</span>getExistingDirectory<span class="token punctuation">(</span>self<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="159"></td><td><pre>                                               <span class="token string">"选取文件夹"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="160"></td><td><pre>                                               <span class="token string">"C:/"</span><span class="token punctuation">)</span>  <span class="token comment"># 起始路径</span></pre></td></tr><tr><td data-num="161"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="162"></td><td><pre></pre></td></tr><tr><td data-num="163"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn32</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 文件：单文件</span></pre></td></tr><tr><td data-num="164"></td><td><pre>        file_<span class="token punctuation">,</span> filetype <span class="token operator">=</span> QFileDialog<span class="token punctuation">.</span>getOpenFileName<span class="token punctuation">(</span>self<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="165"></td><td><pre>                                                      <span class="token string">"选取文件"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="166"></td><td><pre>                                                      <span class="token string">"C:/"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="167"></td><td><pre>                                                      <span class="token string">"All Files (*);;Text Files (*.txt)"</span><span class="token punctuation">)</span>  <span class="token comment"># 设置文件扩展名过滤，注意用双分号间隔</span></pre></td></tr><tr><td data-num="168"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>file_<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="169"></td><td><pre></pre></td></tr><tr><td data-num="170"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn33</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 文件：多文件</span></pre></td></tr><tr><td data-num="171"></td><td><pre>        files<span class="token punctuation">,</span> ok <span class="token operator">=</span> QFileDialog<span class="token punctuation">.</span>getOpenFileNames<span class="token punctuation">(</span>self<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="172"></td><td><pre>                                                 <span class="token string">"多文件选择"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="173"></td><td><pre>                                                 <span class="token string">"C:/"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="174"></td><td><pre>                                                 <span class="token string">"All Files (*);;Text Files (*.txt)"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="175"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>files<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="176"></td><td><pre></pre></td></tr><tr><td data-num="177"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn34</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 文件：保存</span></pre></td></tr><tr><td data-num="178"></td><td><pre>        file_<span class="token punctuation">,</span> ok <span class="token operator">=</span> QFileDialog<span class="token punctuation">.</span>getSaveFileName<span class="token punctuation">(</span>self<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="179"></td><td><pre>                                                <span class="token string">"文件保存"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="180"></td><td><pre>                                                <span class="token string">"C:/"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="181"></td><td><pre>                                                <span class="token string">"All Files (*);;Text Files (*.txt)"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="182"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>file_<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="183"></td><td><pre></pre></td></tr><tr><td data-num="184"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn35</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 文件：另存为</span></pre></td></tr><tr><td data-num="185"></td><td><pre>        file_<span class="token punctuation">,</span> ok <span class="token operator">=</span> QFileDialog<span class="token punctuation">.</span>getSaveFileName<span class="token punctuation">(</span>self<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="186"></td><td><pre>                                                <span class="token string">"文件另存为"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="187"></td><td><pre>                                                <span class="token string">"C:/"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="188"></td><td><pre>                                                <span class="token string">"All Files (*);;Text Files (*.txt)"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="189"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>file_<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="190"></td><td><pre></pre></td></tr><tr><td data-num="191"></td><td><pre>    <span class="token comment"># =====================================================================</span></pre></td></tr><tr><td data-num="192"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn41</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 颜色</span></pre></td></tr><tr><td data-num="193"></td><td><pre>        color <span class="token operator">=</span> QColorDialog<span class="token punctuation">.</span>getColor<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>blue<span class="token punctuation">,</span> self<span class="token punctuation">,</span> <span class="token string">"Select Color"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="194"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>color<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="195"></td><td><pre></pre></td></tr><tr><td data-num="196"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn42</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 字体</span></pre></td></tr><tr><td data-num="197"></td><td><pre>        font<span class="token punctuation">,</span> ok <span class="token operator">=</span> QFontDialog<span class="token punctuation">.</span>getFont<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="198"></td><td><pre>        self<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>font<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="199"></td><td><pre></pre></td></tr><tr><td data-num="200"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">do_btn43</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 自定义</span></pre></td></tr><tr><td data-num="201"></td><td><pre></pre></td></tr><tr><td data-num="202"></td><td><pre>        self<span class="token punctuation">.</span>window2<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="203"></td><td><pre></pre></td></tr><tr><td data-num="204"></td><td><pre></pre></td></tr><tr><td data-num="205"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MyWindow2</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="206"></td><td><pre>    <span class="token triple-quoted-string string">'''自定义窗口'''</span></pre></td></tr><tr><td data-num="207"></td><td><pre>    <span class="token comment"># 知识点：</span></pre></td></tr><tr><td data-num="208"></td><td><pre>    <span class="token comment"># 1. 为了得到返回值用到了自定义的信号 / 槽</span></pre></td></tr><tr><td data-num="209"></td><td><pre>    <span class="token comment"># 2. 为了显示动态数字，使用了计时器</span></pre></td></tr><tr><td data-num="210"></td><td><pre></pre></td></tr><tr><td data-num="211"></td><td><pre>    before_close_signal <span class="token operator">=</span> pyqtSignal<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token comment"># 自定义信号（int 类型）</span></pre></td></tr><tr><td data-num="212"></td><td><pre></pre></td></tr><tr><td data-num="213"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="214"></td><td><pre>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="215"></td><td><pre></pre></td></tr><tr><td data-num="216"></td><td><pre>        self<span class="token punctuation">.</span>sec <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="217"></td><td><pre>        self<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">'自定义窗口'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="218"></td><td><pre>        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="219"></td><td><pre></pre></td></tr><tr><td data-num="220"></td><td><pre>        self<span class="token punctuation">.</span>lcd <span class="token operator">=</span> QLCDNumber<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="221"></td><td><pre>        btn1 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"测试"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="222"></td><td><pre>        btn2 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"关闭"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="223"></td><td><pre></pre></td></tr><tr><td data-num="224"></td><td><pre>        layout <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="225"></td><td><pre>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lcd<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="226"></td><td><pre>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>btn1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="227"></td><td><pre>        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>btn2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="228"></td><td><pre></pre></td></tr><tr><td data-num="229"></td><td><pre>        self<span class="token punctuation">.</span>timer <span class="token operator">=</span> QTimer<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="230"></td><td><pre></pre></td></tr><tr><td data-num="231"></td><td><pre>        self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>timeout<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>update<span class="token punctuation">)</span>  <span class="token comment"># 每次计时结束，触发 update</span></pre></td></tr><tr><td data-num="232"></td><td><pre>        btn1<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>startTimer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="233"></td><td><pre>        btn2<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stopTimer<span class="token punctuation">)</span>  <span class="token comment"># 去到关闭前的处理</span></pre></td></tr><tr><td data-num="234"></td><td><pre></pre></td></tr><tr><td data-num="235"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="236"></td><td><pre>        self<span class="token punctuation">.</span>sec <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="237"></td><td><pre>        self<span class="token punctuation">.</span>lcd<span class="token punctuation">.</span>display<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sec<span class="token punctuation">)</span>  <span class="token comment"># LED 显示数字 + 1</span></pre></td></tr><tr><td data-num="238"></td><td><pre></pre></td></tr><tr><td data-num="239"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">startTimer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="240"></td><td><pre>        self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment"># 计时器每秒计数</span></pre></td></tr><tr><td data-num="241"></td><td><pre></pre></td></tr><tr><td data-num="242"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">stopTimer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="243"></td><td><pre>        self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="244"></td><td><pre>        self<span class="token punctuation">.</span>sec <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="245"></td><td><pre>        self<span class="token punctuation">.</span>before_close_signal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lcd<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 发送信号，带参数 888</span></pre></td></tr><tr><td data-num="246"></td><td><pre>        self<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 然后窗口关闭</span></pre></td></tr><tr><td data-num="247"></td><td><pre></pre></td></tr><tr><td data-num="248"></td><td><pre>    <span class="token comment"># 默认关闭事件     def closeEvent (self, e):        self.stopTimer ()</span></pre></td></tr><tr><td data-num="249"></td><td><pre></pre></td></tr><tr><td data-num="250"></td><td><pre></pre></td></tr><tr><td data-num="251"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="252"></td><td><pre>    <span class="token keyword">import</span> sys</pre></td></tr><tr><td data-num="253"></td><td><pre></pre></td></tr><tr><td data-num="254"></td><td><pre>    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="255"></td><td><pre>    win <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="256"></td><td><pre>    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="257"></td><td><pre>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>如何绘制矩形并通过在PyQt5中拖放来调整其形状</title>
    <url>/computer-science/python/pyqt/%E5%A6%82%E4%BD%95%E7%BB%98%E5%88%B6%E7%9F%A9%E5%BD%A2%E5%B9%B6%E9%80%9A%E8%BF%87%E5%9C%A8PyQt5%E4%B8%AD%E6%8B%96%E6%94%BE%E6%9D%A5%E8%B0%83%E6%95%B4%E5%85%B6%E5%BD%A2%E7%8A%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由 PyQt5 创建的 GUI 上绘制一个矩形.<br>拖动时，通过鼠标移动来调整矩形形状.<br>释放鼠标左键时，确定矩形形状.</p><h3 id="调用mousemoveevent函数"><a class="anchor" href="#调用mousemoveevent函数">#</a> 调用 mouseMoveEvent 函数</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> sys</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtWidgets<span class="token punctuation">,</span> QtCore</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QPainter</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MyWidget</span><span class="token punctuation">(</span>QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        self<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        self<span class="token punctuation">.</span>begin <span class="token operator">=</span> QtCore<span class="token punctuation">.</span>QPoint<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        self<span class="token punctuation">.</span>end <span class="token operator">=</span> QtCore<span class="token punctuation">.</span>QPoint<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        self<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">paintEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        qp <span class="token operator">=</span> QtGui<span class="token punctuation">.</span>QPainter<span class="token punctuation">(</span>self<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        br <span class="token operator">=</span> QtGui<span class="token punctuation">.</span>QBrush<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QColor<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </pre></td></tr><tr><td data-num="16"></td><td><pre>        qp<span class="token punctuation">.</span>setBrush<span class="token punctuation">(</span>br<span class="token punctuation">)</span>   </pre></td></tr><tr><td data-num="17"></td><td><pre>        qp<span class="token punctuation">.</span>drawRect<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>begin<span class="token punctuation">,</span> self<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span>       </pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">mousePressEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        self<span class="token punctuation">.</span>begin <span class="token operator">=</span> event<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        self<span class="token punctuation">.</span>end <span class="token operator">=</span> event<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        self<span class="token punctuation">.</span>end <span class="token operator">=</span> event<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">mouseReleaseEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        self<span class="token punctuation">.</span>begin <span class="token operator">=</span> event<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        self<span class="token punctuation">.</span>end <span class="token operator">=</span> event<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>PyQt</category>
      </categories>
      <tags>
        <tag>Pyqt5</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity脚本开发学习笔记1</title>
    <url>/gamedevlopment/unity/Unity%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="awake-和-start"><a class="anchor" href="#awake-和-start">#</a> Awake () 和 Start ()</h2><p>这两个函数用于做一些前置性工作。</p><p>不同之处在于，Awake () 只要脚本被加载就会执行，即使脚本没有被使能（也就是勾上）。而 Start () 则在 Awake () 之后执行，且脚本必须被使能。</p><h2 id="update-和-fixedupdate"><a class="anchor" href="#update-和-fixedupdate">#</a> Update () 和 FixedUpdate ()</h2><p>Update () 很简单，每一帧调用一次。但显然，每一帧的渲染时间不会是一致的，即调用 Update () 的间隔时间不确定，这就导致如果我们把物理效果放到 Update () 里，会导致物理效果不太流畅。</p><p>为了保证物理运动与时间之间的紧密联系，应该使用 FixedUpdate ()。顾名思义，这是 “固定的” Update，即间隔时间可以保持一致。间隔时间由 Time.fixedDeltaTime 决定，默认的时间是 0.02s，一秒钟调用 50 次。</p><h2 id="坐标与向量"><a class="anchor" href="#坐标与向量">#</a> 坐标与向量</h2><p>Unity 使用左手坐标系，三轴的相对位置依照下图所示。与数学立体几何中的一般表示不同，在这里 Z 轴代表的是 “深度” 而不是 “高度”。</p><p><img data-src="%E5%9D%90%E6%A0%87%E4%B8%8E%E5%90%91%E9%87%8F.png" alt=""></p><p>Unity 包含了一些用于进行向量运算的方法，它们基本被放在 Vector2 和 Vector3 类里。</p><p>Vector3 里包含了一些常用向量，以 (0,0,1) 为 forward（依照上面的坐标手势，中指指向前面），有 up、down、left、right、back，以及 (0,0,0) 的 zero 和 (1,1,1) 的 one。Vector2 里没有 z 轴，故没有 forward 和 back。</p><h2 id="游戏对象-组件及其开关"><a class="anchor" href="#游戏对象-组件及其开关">#</a> 游戏对象、组件，及其开关</h2><p>一个游戏对象（GameObject）可以拥有多个组件（Component）。</p><p>比如一个简单的点光源，其本身是一个 GameObject。首先它有一个 Transform 组件标示其位置、旋转、缩放等信息，还得有一个 Light 组件让它发光。也许，还有若干用于控制这个点光源的脚本组件。</p><p>如果我们关闭这个游戏对象（我们把它叫做激活 / 停用），那么这个灯整个就从场景中消失了。用游戏对象的 SetActive (bool value) 方法来实现这一点。</p><p>需要注意的是，如果游戏对象有多层结构，将一个父对象停用并不会使其子对象停用（虽然效果上，子对象也消失了）。查看一个对象到底是在层级中被激活还是本身确实在场景里激活了，可以用游戏对象的 activeInHierarchy () 和 activeSelf () 方法来确定。</p><p>要关掉灯，除了让灯凭空消失，我们当然还有更正常的做法。每一个组件都有一个 bool 类型的 enabled 标志位，只要把这个标志位设为 false，就能去使能（禁用）这个组件。如将点光源的 Light 组件禁用，光是没了，但灯依然还在原处。</p>]]></content>
      <categories>
        <category>游戏开发</category>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity脚本开发学习笔记2</title>
    <url>/gamedevlopment/unity/Unity%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="按键控制"><a class="anchor" href="#按键控制">#</a> 按键控制</h2><p>Input.GetKey 和 Input.GetButton 两种方法用于获取按键情况。</p><p>区别在于，Key 有确定的 KeyCode。KeyCode 是 Unity 内置的枚举类，内含各种键盘、手柄按键，如空格键就由 KeyCode.Space 表示。</p><p>而 Button 是可以自定义详细配置的。在 Edit-ProjectSettings-Input 中可以对输入进行详细配置，为一种操作提供一个字符串别名。只要使用 GetBotton (string str) 就可以监测对应的输入了。</p><p>除了知道按键是否被按下之外，我们还需要确切地知道按键在哪一帧被按下，哪一帧被松开。 因此，这两个方法都有衍生的 GetxxxDown 和 GetxxxUp。在对应按键被按下后的第一帧，GetKeyDown 返回 true，而到了第二帧，它就再次返回 false 了。同理，GetKeyUp 也仅在松开按键后的第一帧返回 true。</p><p>当然，这些方法都应该被放在 Update () 函数里，这样才能在每一帧对按键进行监测。</p><h2 id="摇杆控制"><a class="anchor" href="#摇杆控制">#</a> 摇杆控制</h2><p>确切地讲，这里应该是 “轴” 而不是摇杆。不过比起按键，摇杆更能体现 “轴” 的涵义，虽然按键确实也可以作为轴。</p><p>摇杆控制就比较麻烦了，因为按键只有按下与没按下两个状态，可以简单地用 bool 值表示，但摇杆有推移的距离，只能用浮点数表示。而且摇杆还有反向。</p><p>对于这些特性，GetKey 之类的方法显然无法处理，所以需要使用 Input.GetAxis。</p><p>Input.GetAxis 的参数是称为 axisName 的字符串，可以在 Edit-ProjectSettings-Input 中定义。其返回的是一个 - 1 到 1 之间的浮点数，Positive Botton 使其返回正值，而 Negative Botton 让其返回负值。</p><p>Sensitivity 和 Gravity 决定了按键触发 / 松开时返回值多快地上升 / 归零。</p><p>此外还有 Dead 值，这使得可以不对较小幅度的摇杆活动进行处理，一定程度上能够防止误触。Snap 选项，其为 true 时如果同时触发了 Positive Botton 和 Negative Botton，就返回 0。</p><p>以上说的，是比较 “完备” 的摇杆控制，但是在很多时候我们并不需要这个 “轴” 返回浮点值。举个例子，《刺客信条：起源》中并没有以往的 “奔跑” 键，而是用摇杆推移的幅度决定移动速度，这就非常 GetAxis。如果用键盘操作，WASD 控制方向，是没有推移幅度这一说的，我们就当按下按键就是摇杆直接推到底，这就是 Type 属性为 Key or Mouse Button 而不是 Joystick Axis 的轴。无论如何，巴耶克并不是弹射起步，而是有 gravity 和 sensitivity 的作用。</p><p>但是，在东方的 STG 里就没有这些玩意，大家的运动都像加速度不存在一样。这种情况下，应当使用 Input.GetAxisRaw 方法，按键后返回的是 1 和 - 1 这两个整数而非浮点数。</p><h2 id="重写和成员隐藏"><a class="anchor" href="#重写和成员隐藏">#</a> 重写和成员隐藏</h2><p>重写（Overriding，有人称为覆盖）是在派生类中重新实现基类中已有的方法和属性等，为了安全，基类中被重写的方法 / 属性需要有 virtual 修饰符（或者 abstract、override），派生类重写的方法 / 属性需要有 override 修饰符。由于是重新 “实现”，重写的方法签名 / 属性类型和名称必须和之前保持一致，也不能改变访问性，重写方法相当于只是重新编写了方法的函数体。</p><p>我的理解是，在派生类中重写之后，从基类继承下来的方法 / 属性就相当于不存在了。因此，不管我们把派生类的对象当成该类的对象还是其基类的对象，在直接调用方法时调用的都是重写之后的方法。</p><p>而成员隐藏则完全不同（Member Hiding，虽然也有人称其为覆盖），它虽然看上去是在派生类中用 new 修饰符重新定义了基类中已有的成员，但！是！ 从基类继承下来的成员并没有消失，而是被隐藏了。如果我们把派生类的对象作为其基类的对象（Upcasting，向上转型），那调用到的就是被隐藏的基类成员。</p><h2 id="委托和事件"><a class="anchor" href="#委托和事件">#</a> 委托和事件</h2><p>委托（delegate）可以被当作函数指针。要定义委托，首先需要用 delegate 关键字声明一个模板，模板展示了这种委托应该存放怎样的函数 —— 用其返回类型以及参数列表来限定。</p><p>可以把委托名直接当成函数名来用。</p><p>委托支持 “多播”，这使得我们可以把同一类型的函数集中放到一个委托里，只要调用这个委托，就是依次调用委托中函数列表里的函数。用 += 和 -= 运算符把函数加入委托或从委托中删除。</p><p>最初看到多播委托这里，我还没有领会这个机制的用处，但很快我就看到了 “事件”。</p><p>事件就是一种特殊的委托，或者说它非常类似于公共的多播委托。我们在定义委托的基础上使用 event 关键字定义一个事件。</p><p>对于同一个事件，不同的对象可能有不同的反应，也就有不同的处理函数。如果把唤起事件视作调用委托，那么一系列的事件处理函数就是委托的函数列表，要订阅或取消订阅事件的话，用 += 和 -= 就好了。</p><h2 id="协程和生成器"><a class="anchor" href="#协程和生成器">#</a> 协程和生成器</h2><p>看到 C# 协程（Coroutine）里熟悉的 yield，我想到的是此前在 Python 中学到过的生成器（Generator）。简直是一个套路，运行到 yield 时，函数返回，但下次调用该函数时不会再从头执行，而是从上次退出的地方之后开始执行。</p><p>实际上生成器就是协程的一种，称为半协程（Semi-coroutine），这是一种受限制的协程实现。</p>]]></content>
      <categories>
        <category>游戏开发</category>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity脚本开发学习笔记1</title>
    <url>/computer-science/gamedevlopment/unity/Unity%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="awake-和-start"><a class="anchor" href="#awake-和-start">#</a> Awake () 和 Start ()</h2><p>这两个函数用于做一些前置性工作。</p><p>不同之处在于，Awake () 只要脚本被加载就会执行，即使脚本没有被使能（也就是勾上）。而 Start () 则在 Awake () 之后执行，且脚本必须被使能。</p><h2 id="update-和-fixedupdate"><a class="anchor" href="#update-和-fixedupdate">#</a> Update () 和 FixedUpdate ()</h2><p>Update () 很简单，每一帧调用一次。但显然，每一帧的渲染时间不会是一致的，即调用 Update () 的间隔时间不确定，这就导致如果我们把物理效果放到 Update () 里，会导致物理效果不太流畅。</p><p>为了保证物理运动与时间之间的紧密联系，应该使用 FixedUpdate ()。顾名思义，这是 “固定的” Update，即间隔时间可以保持一致。间隔时间由 Time.fixedDeltaTime 决定，默认的时间是 0.02s，一秒钟调用 50 次。</p><h2 id="坐标与向量"><a class="anchor" href="#坐标与向量">#</a> 坐标与向量</h2><p>Unity 使用左手坐标系，三轴的相对位置依照下图所示。与数学立体几何中的一般表示不同，在这里 Z 轴代表的是 “深度” 而不是 “高度”。</p><p><img data-src="%E5%9D%90%E6%A0%87%E4%B8%8E%E5%90%91%E9%87%8F.png" alt=""></p><p>Unity 包含了一些用于进行向量运算的方法，它们基本被放在 Vector2 和 Vector3 类里。</p><p>Vector3 里包含了一些常用向量，以 (0,0,1) 为 forward（依照上面的坐标手势，中指指向前面），有 up、down、left、right、back，以及 (0,0,0) 的 zero 和 (1,1,1) 的 one。Vector2 里没有 z 轴，故没有 forward 和 back。</p><h2 id="游戏对象-组件及其开关"><a class="anchor" href="#游戏对象-组件及其开关">#</a> 游戏对象、组件，及其开关</h2><p>一个游戏对象（GameObject）可以拥有多个组件（Component）。</p><p>比如一个简单的点光源，其本身是一个 GameObject。首先它有一个 Transform 组件标示其位置、旋转、缩放等信息，还得有一个 Light 组件让它发光。也许，还有若干用于控制这个点光源的脚本组件。</p><p>如果我们关闭这个游戏对象（我们把它叫做激活 / 停用），那么这个灯整个就从场景中消失了。用游戏对象的 SetActive (bool value) 方法来实现这一点。</p><p>需要注意的是，如果游戏对象有多层结构，将一个父对象停用并不会使其子对象停用（虽然效果上，子对象也消失了）。查看一个对象到底是在层级中被激活还是本身确实在场景里激活了，可以用游戏对象的 activeInHierarchy () 和 activeSelf () 方法来确定。</p><p>要关掉灯，除了让灯凭空消失，我们当然还有更正常的做法。每一个组件都有一个 bool 类型的 enabled 标志位，只要把这个标志位设为 false，就能去使能（禁用）这个组件。如将点光源的 Light 组件禁用，光是没了，但灯依然还在原处。</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>游戏开发</category>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity脚本开发学习笔记2</title>
    <url>/computer-science/gamedevlopment/unity/Unity%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="按键控制"><a class="anchor" href="#按键控制">#</a> 按键控制</h2><p>Input.GetKey 和 Input.GetButton 两种方法用于获取按键情况。</p><p>区别在于，Key 有确定的 KeyCode。KeyCode 是 Unity 内置的枚举类，内含各种键盘、手柄按键，如空格键就由 KeyCode.Space 表示。</p><p>而 Button 是可以自定义详细配置的。在 Edit-ProjectSettings-Input 中可以对输入进行详细配置，为一种操作提供一个字符串别名。只要使用 GetBotton (string str) 就可以监测对应的输入了。</p><p>除了知道按键是否被按下之外，我们还需要确切地知道按键在哪一帧被按下，哪一帧被松开。 因此，这两个方法都有衍生的 GetxxxDown 和 GetxxxUp。在对应按键被按下后的第一帧，GetKeyDown 返回 true，而到了第二帧，它就再次返回 false 了。同理，GetKeyUp 也仅在松开按键后的第一帧返回 true。</p><p>当然，这些方法都应该被放在 Update () 函数里，这样才能在每一帧对按键进行监测。</p><h2 id="摇杆控制"><a class="anchor" href="#摇杆控制">#</a> 摇杆控制</h2><p>确切地讲，这里应该是 “轴” 而不是摇杆。不过比起按键，摇杆更能体现 “轴” 的涵义，虽然按键确实也可以作为轴。</p><p>摇杆控制就比较麻烦了，因为按键只有按下与没按下两个状态，可以简单地用 bool 值表示，但摇杆有推移的距离，只能用浮点数表示。而且摇杆还有反向。</p><p>对于这些特性，GetKey 之类的方法显然无法处理，所以需要使用 Input.GetAxis。</p><p>Input.GetAxis 的参数是称为 axisName 的字符串，可以在 Edit-ProjectSettings-Input 中定义。其返回的是一个 - 1 到 1 之间的浮点数，Positive Botton 使其返回正值，而 Negative Botton 让其返回负值。</p><p>Sensitivity 和 Gravity 决定了按键触发 / 松开时返回值多快地上升 / 归零。</p><p>此外还有 Dead 值，这使得可以不对较小幅度的摇杆活动进行处理，一定程度上能够防止误触。Snap 选项，其为 true 时如果同时触发了 Positive Botton 和 Negative Botton，就返回 0。</p><p>以上说的，是比较 “完备” 的摇杆控制，但是在很多时候我们并不需要这个 “轴” 返回浮点值。举个例子，《刺客信条：起源》中并没有以往的 “奔跑” 键，而是用摇杆推移的幅度决定移动速度，这就非常 GetAxis。如果用键盘操作，WASD 控制方向，是没有推移幅度这一说的，我们就当按下按键就是摇杆直接推到底，这就是 Type 属性为 Key or Mouse Button 而不是 Joystick Axis 的轴。无论如何，巴耶克并不是弹射起步，而是有 gravity 和 sensitivity 的作用。</p><p>但是，在东方的 STG 里就没有这些玩意，大家的运动都像加速度不存在一样。这种情况下，应当使用 Input.GetAxisRaw 方法，按键后返回的是 1 和 - 1 这两个整数而非浮点数。</p><h2 id="重写和成员隐藏"><a class="anchor" href="#重写和成员隐藏">#</a> 重写和成员隐藏</h2><p>重写（Overriding，有人称为覆盖）是在派生类中重新实现基类中已有的方法和属性等，为了安全，基类中被重写的方法 / 属性需要有 virtual 修饰符（或者 abstract、override），派生类重写的方法 / 属性需要有 override 修饰符。由于是重新 “实现”，重写的方法签名 / 属性类型和名称必须和之前保持一致，也不能改变访问性，重写方法相当于只是重新编写了方法的函数体。</p><p>我的理解是，在派生类中重写之后，从基类继承下来的方法 / 属性就相当于不存在了。因此，不管我们把派生类的对象当成该类的对象还是其基类的对象，在直接调用方法时调用的都是重写之后的方法。</p><p>而成员隐藏则完全不同（Member Hiding，虽然也有人称其为覆盖），它虽然看上去是在派生类中用 new 修饰符重新定义了基类中已有的成员，但！是！ 从基类继承下来的成员并没有消失，而是被隐藏了。如果我们把派生类的对象作为其基类的对象（Upcasting，向上转型），那调用到的就是被隐藏的基类成员。</p><h2 id="委托和事件"><a class="anchor" href="#委托和事件">#</a> 委托和事件</h2><p>委托（delegate）可以被当作函数指针。要定义委托，首先需要用 delegate 关键字声明一个模板，模板展示了这种委托应该存放怎样的函数 —— 用其返回类型以及参数列表来限定。</p><p>可以把委托名直接当成函数名来用。</p><p>委托支持 “多播”，这使得我们可以把同一类型的函数集中放到一个委托里，只要调用这个委托，就是依次调用委托中函数列表里的函数。用 += 和 -= 运算符把函数加入委托或从委托中删除。</p><p>最初看到多播委托这里，我还没有领会这个机制的用处，但很快我就看到了 “事件”。</p><p>事件就是一种特殊的委托，或者说它非常类似于公共的多播委托。我们在定义委托的基础上使用 event 关键字定义一个事件。</p><p>对于同一个事件，不同的对象可能有不同的反应，也就有不同的处理函数。如果把唤起事件视作调用委托，那么一系列的事件处理函数就是委托的函数列表，要订阅或取消订阅事件的话，用 += 和 -= 就好了。</p><h2 id="协程和生成器"><a class="anchor" href="#协程和生成器">#</a> 协程和生成器</h2><p>看到 C# 协程（Coroutine）里熟悉的 yield，我想到的是此前在 Python 中学到过的生成器（Generator）。简直是一个套路，运行到 yield 时，函数返回，但下次调用该函数时不会再从头执行，而是从上次退出的地方之后开始执行。</p><p>实际上生成器就是协程的一种，称为半协程（Semi-coroutine），这是一种受限制的协程实现。</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>游戏开发</category>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>线性表</title>
    <url>/kaoyan/data-struct/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a id="more"></a></p>]]></content>
      <categories>
        <category>考研</category>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>git基础操作</title>
    <url>/computer-science/miscellaneous/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="用户信息配置"><a class="anchor" href="#用户信息配置">#</a> 用户信息配置</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"xxx"</span></pre></td></tr><tr><td data-num="2"></td><td><pre>git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"xxx@eamil.com"</span></pre></td></tr></table></figure><h3 id="新建git仓库"><a class="anchor" href="#新建git仓库">#</a> 新建 git 仓库</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>git init</pre></td></tr></table></figure><h3 id="添加远程仓库"><a class="anchor" href="#添加远程仓库">#</a> 添加远程仓库</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>git remote add origin 仓库链接</pre></td></tr></table></figure><h3 id="上传修改文件"><a class="anchor" href="#上传修改文件">#</a> 上传修改文件</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>git add</pre></td></tr></table></figure><h3 id="上传文件描述"><a class="anchor" href="#上传文件描述">#</a> 上传文件描述</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>git commit <span class="token operator">-</span>m <span class="token string">"xxx"</span></pre></td></tr></table></figure><h3 id="创建新分支"><a class="anchor" href="#创建新分支">#</a> 创建新分支</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>git branch new</pre></td></tr></table></figure><h3 id="切换到新分支"><a class="anchor" href="#切换到新分支">#</a> 切换到新分支</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>git checkout new</pre></td></tr></table></figure><h3 id="上传分支"><a class="anchor" href="#上传分支">#</a> 上传分支</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>git push origin master</pre></td></tr></table></figure><h3 id="拉去更新分支"><a class="anchor" href="#拉去更新分支">#</a> 拉去更新分支</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>git pull origin master</pre></td></tr></table></figure><h3 id="更新分支"><a class="anchor" href="#更新分支">#</a> 更新分支</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>git add</pre></td></tr><tr><td data-num="2"></td><td><pre>git commit <span class="token operator">-</span>m <span class="token string">"xxx"</span></pre></td></tr><tr><td data-num="3"></td><td><pre>git push origin master</pre></td></tr></table></figure><h3 id="添加ssh-key"><a class="anchor" href="#添加ssh-key">#</a> 添加 ssh key</h3><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tr><td data-num="1"></td><td><pre>ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"your_email@mail.com"</span></pre></td></tr></table></figure><p>t 指定密钥类型，默认是 rsa ，可以省略。 -C 设置注释文字，比如邮箱或其他。<br>登录 github, 点击 Settings, 然后点击 SSH keys , 在这个页面你可以管理你所有的 ssh keys<br>然后点击 Add SSH key<br>用文本编辑器打开刚刚添加的 key 文件 id_rsa.pub, 复制里面的所有的内容<br>回到 github 页面，将复制的内容粘贴到刚刚那个页面的 key 对应的文本框里面，title 可以随便填写<br><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/%E6%B7%BB%E5%8A%A0sshkey.png" alt=""></p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>开发&amp;系统&amp;运维</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机的几种IO口</title>
    <url>/computer-science/miscellaneous/%E5%8D%95%E7%89%87%E6%9C%BA%E7%9A%84%E5%87%A0%E7%A7%8DIO%E5%8F%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>学习单片机开发也有一段时间了，对一些底层的东西不太了解或不够深入，希望能弥补上这些知识空缺。</p><h3 id="gpio的几种状态"><a class="anchor" href="#gpio的几种状态">#</a> GPIO 的几种状态</h3><blockquote><p>输入状态</p><blockquote><p>浮空输入<br>上 / 下拉输入<br>模拟输入</p></blockquote></blockquote><blockquote><p>输出状态</p><blockquote><p>推挽输出<br>开漏输出</p></blockquote></blockquote><h4 id="输入状态"><a class="anchor" href="#输入状态">#</a> 输入状态</h4><h5 id="浮空输入"><a class="anchor" href="#浮空输入">#</a> 浮空输入</h5><p>辅控输入即 IO 口在芯片内部既不接上拉电阻也不接下拉电阻，输入电阻相当于非常大。IO 口的电平状态不确定，完全由外部决定，悬空时用示波器直接测量可能是高电平也可能是低电平。由于浮空状态容易受到干扰甚至是静电导致芯片损坏，因此未使用的脚一般要避免浮空。<br>浮空输入的常见运用是检测按键状态。</p><h5 id="上拉下拉输入"><a class="anchor" href="#上拉下拉输入">#</a> 上拉 / 下拉输入</h5><p>IO 上拉输入指的是通过配置，在芯片内部将该 IO 串联电阻后接 Vcc；IO 下拉输入指的是通过配置，在芯片内部将该 IO 串联电阻后接 Gnd。</p><h5 id="模拟输入"><a class="anchor" href="#模拟输入">#</a> 模拟输入</h5><p>普通的数字 IO 口可以通过输入数据寄存器的 0 或 1 读取到外部电平的高低状态，而模拟 IO 无法通过输入寄存器的值反应电平的高低，一般需要借助 ADC 或电压比较器去获取外部电平的值。<br>常用于 AD 检测或电压比较器。</p><h4 id="输出状态"><a class="anchor" href="#输出状态">#</a> 输出状态</h4><h5 id="推挽输出"><a class="anchor" href="#推挽输出">#</a> 推挽输出</h5><p>推挽输出可以输出高低电平，可以直接驱动功耗不大的数字器件。内部结构相当于两个三极管或 MOSFET 互补工作，不管输出高还是低，总有一个开关管导通。如果两个推完输出相互直连，其中一个芯片若输出高，此时上面的 MOS 导通下面 MOS 闭合，而一个芯片若输出低，即下面的 MOS 导通上面的 MOS 闭合，电流会从上 MOS 导通的 VCC 直接流向下 MOS 导通的 GND，整个通路电阻很小，将会发生短路并损坏端口。因此推挽输出不能实现” 线与 “。</p><h5 id="开漏输出"><a class="anchor" href="#开漏输出">#</a> 开漏输出</h5><p>开漏输出只能输出低电平，如果要输出高电平必须通过外部上拉电阻才能实现。内部输出 1 时 MOS 管截止，输出与地断开，这时候 IO 其实没有驱动能力，需要外部连接上拉电阻才能输出高电平；内部输出 0 时 MOS 管导通接地，所以开漏达到输出低电平效果。开漏输出的吸电流能力较强，适合做电流型的驱动。<br>关于开漏输出接上拉电阻的一大运用是 IIC 线路。当上拉电阻阻值较小时，上升沿的延迟就小，但功耗较大，反之，当上拉电阻阻值较大时，上升沿延迟就大，但功耗较小。但电阻影响上升沿不影响下降沿。根据上升沿时延和功耗的需要，综合考虑选择合适的上拉电阻。</p><h5 id="高阻输出"><a class="anchor" href="#高阻输出">#</a> 高阻输出</h5><p>IO 的高阻态实际上是输出 IO，与浮空输入有些类似，输入电阻都非常大。不同在于浮空输入是输入型 IO，而高阻态 IO 实际是开漏输出在输出高电平时的状态，且外部不接上拉电阻。</p><h4 id="芯片复位后的io状态"><a class="anchor" href="#芯片复位后的io状态">#</a> 芯片复位后的 IO 状态</h4><p>通常芯片复位后 IO 初始状态是高阻输入，为了防止芯片被异常复位时的 IO 电平变化对外部器件产生异常动作。但为了避免高阻输入产生漏电流，在芯片启动后需要对端口进行配置，改为其他状态，如内部拉高输入或输出。</p><h4 id="io的驱动能力"><a class="anchor" href="#io的驱动能力">#</a> IO 的驱动能力</h4><p>大部分的单片机 IO 口都可以选择驱动能力的强弱，一般来说驱动能力越强则功耗损耗也越大。IO 对外部的驱动能力既要看电压驱动能力，还要看电流驱动能力。有个简易的判断驱动能力是否足够的方法，将电路开路后则是电压是否符合负载电压，如果负责则表示电压驱动能力足够，否则电压驱动能力不够。如果接上负载后电压降低了，这就表明电流驱动能力不足。</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>开发&amp;系统&amp;运维</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>进程线程协程</title>
    <url>/computer-science/miscellaneous/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="进程"><a class="anchor" href="#进程">#</a> 进程</h3><p>操作系统提供的抽象概念，是系统进行资源分配和调度的基本单位。也可以说是实体，程序的实体。程序本身是没有生命周期的，它只是存在磁盘上的一些指令，程序一旦运行就是进程。</p><ol><li>每一个进程都有自己的地址空间，一般情况下，包括文本区域、数据区域和堆栈。文本区域存储代码、数据区域分配内存、堆栈区域存储调用的指令和本地变量。</li><li>进程是一个 “执行中的程序”。</li></ol><h3 id="线程"><a class="anchor" href="#线程">#</a> 线程</h3><p>轻量级进程，是程序执行流的最小单元。是程序的实际执行者。</p><ol><li>线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。</li><li>一个进程里面有多个线程</li><li>每一个程序都至少有一个线程，若程序只有一个线程，那就是程序本身。</li><li>线程拥有自己的栈空间。</li></ol><p>线程也有就绪、阻塞和运行三种基本状态。</p><ol><li>就绪状态是指线程具备运行的所有条件，逻辑上可以运行，在等待处理机；</li><li>运行状态是指线程占有处理机正在运行；</li><li>阻塞状态是指线程在等待一个事件（如某个信号量），逻辑上不可执行。</li></ol><h3 id="协程"><a class="anchor" href="#协程">#</a> 协程</h3><p>需要讲回线程<br>线程有两种类型</p><ol><li>一种是由内核来管理和调度。</li><li>另外一种线程，他的调度是由程序员自己写程序来管理的，对内核来说不可见。这种线程叫做『用户空间线程』。</li></ol><p>协程可以理解就是一种用户空间线程。</p><ol><li>协同，因为是由程序员自己写的调度策略，其通过协作而不是抢占来进行切换</li><li>在用户态完成创建，切换和销毁</li></ol>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>开发&amp;系统&amp;运维</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/kaoyan/data-struct/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="线性表"><a class="anchor" href="#线性表">#</a> 线性表</h3><blockquote><p>在程序中，经常将一组数据元素作为整体管理和使用，需要创建这种元素组，用变量记录他们，传进传出函数<br>一组数据中包含的元素个数可能发生变化。</p></blockquote><p>对于这种需求，最简单的解决办法就是将这样一组元素看成一个序列，用元素在序列里的位置和顺序，表示实际应用中的某种有意义的信息。<br>这样的一组序列元素的组织形式，抽象为线性表。</p><p>根据线性表的实际存储方式，分为两种实现模型：</p><ol><li>顺序表，将元素顺序地存放在一块连续的存储区里，元素间的顺序关系由他们的存储顺序自然表示。</li><li>链表， 将元素存在通过链接构造起来的一系列存储块中。</li></ol><h4 id="顺序表python中的list-tuple"><a class="anchor" href="#顺序表python中的list-tuple">#</a> 顺序表 (python 中的 list、tuple)</h4><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%A1%BA%E5%BA%8F%E8%A1%A8.png" alt=""><br>图 a 表示的是顺序表的基本形式，数据元素本身连续存储，每个元素所占的存储单元大小固定相同。<br>如果元素的大小不统一，则须采用图 b 的元素外置的形式，将实际数据元素另行存储，而顺序表中各单元位置保存对应元素的地址信息（即链接）。</p><h4 id="链表"><a class="anchor" href="#链表">#</a> 链表</h4><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是不像顺序表一样连续存储数据，而是在每一个节点（数据存储单元）里存放下一个节点的位置信息（即地址）。</p><h5 id="单向链表"><a class="anchor" href="#单向链表">#</a> 单向链表</h5><p>单向链表也叫单链表，是链表中最简单的一种形式，它的每个节点包含两个域，一个信息域（元素域）和一个链接域。这个链接指向链表中的下一个节点，而最后一个节点的链接域则指向一个空值。</p><h5 id="单向循环链表"><a class="anchor" href="#单向循环链表">#</a> 单向循环链表</h5><p>单链表的一个变形是单向循环链表，链表中最后一个节点的 next 域不再为 None，而是指向链表的头节点。</p><h5 id="双向链表"><a class="anchor" href="#双向链表">#</a> 双向链表</h5><p>每个节点有两个链接：一个指向前一个节点，当此节点为第一个节点时，指向空值；而另一个指向下一个节点，当此节点为最后一个节点时，指向空值。</p><h4 id="栈"><a class="anchor" href="#栈">#</a> 栈</h4><p>有些地方称为堆栈，是一种容器，可存入数据元素、访问元素、删除元素，它的特点在于只能允许在容器的一端进行加入数据和输出数据的运算。没有了位置概念，保证任何时候可以访问、删除的元素都是此前最后存入的那个元素，确定了一种默认的访问顺序。</p><h4 id="队列"><a class="anchor" href="#队列">#</a> 队列</h4><p>队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。<br>队列是一种先进先出的（First In First Out）的线性表，简称 FIFO。允许插入的一端为队尾，允许删除的一端为队头。队列不允许在中间部位进行操作！</p><h5 id="双端队列"><a class="anchor" href="#双端队列">#</a> 双端队列</h5><p>双端队列，是一种具有队列和栈的性质的数据结构。<br>双端队列中的元素可以从两端弹出，其限定插入和删除操作在表的两端进行。双端队列可以在队列任意一端入队和出队。</p><h4 id="树"><a class="anchor" href="#树">#</a> 树</h4><p>树是一种抽象数据类型，用来模拟树状结构性质的数据集合。它是由 n（n&gt;=1）个有限节点组成一个具有层次关系的集合。<br>特点：</p><ol><li>每个节点有零个或多个子节点；</li><li>没有父节点的节点称为根节点；</li><li>每一个非根节点有且只有一个父节点；</li><li>除了根节点外，每个子节点可以分为多个不相交的子树；</li></ol><h4 id="树的种类"><a class="anchor" href="#树的种类">#</a> 树的种类</h4><h5 id="无序树"><a class="anchor" href="#无序树">#</a> 无序树</h5><p>树中任意节点的 子结点之间没有顺序关系，这种树称为无序树，也称为自由树<br>3 个节点的无序树有 9 种</p><h5 id="有序树"><a class="anchor" href="#有序树">#</a> 有序树</h5><p>树中任意节点的子节点之间有顺序关系，这种树称为有序树</p><ol><li>二叉树<ol><li>完全二叉树</li><li>平衡二叉树</li><li>排序二叉树</li></ol></li><li>霍夫曼树 带权路径最短的二叉树称为哈夫曼树或最优二叉树</li><li>B 树 一种对读写操作进行优化的自平衡的二叉查找树，能够保持数据有序，拥有多余两个子树</li></ol><h5 id="二叉树"><a class="anchor" href="#二叉树">#</a> 二叉树</h5><p>二叉树是每个节点最多有两个子树的树结构。通常子树被称作 “左子树”（left subtree）和 “右子树”（right subtree）</p><ol><li>完全二叉树：比如有 n 层，第一层到第 n-1 层都挂满了节点</li><li>满二叉树：除了叶节点以外每一层都挂满了节点，且叶节点在最底层</li></ol><h5 id="二叉树的遍历"><a class="anchor" href="#二叉树的遍历">#</a> 二叉树的遍历</h5><p>树的两种重要的遍历模式是深度优先遍历和广度优先遍历，深度优先一般用递归，广度优先一般用队列。</p><h6 id="深度优先遍历"><a class="anchor" href="#深度优先遍历">#</a> 深度优先遍历</h6><p>深度优先搜索 (Depth First Search) 是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。<br>深度优先遍历有三种遍历方法，它们之间的不同在于访问每个节点的次序不同</p><ol><li>先序遍历 --&gt; 我们先访问根节点，然后递归使用先序遍历访问左子树，再递归使用先序遍历访问右子树 --&gt; 根节点 -&gt; 左子树 -&gt; 右子树</li><li>中序遍历 --&gt; 我们递归使用中序遍历访问左子树，然后访问根节点，最后再递归使用中序遍历访问右子树 --&gt; 左子树 -&gt; 根节点 -&gt; 右子树</li><li>后序遍历 --&gt; 们先递归使用后序遍历访问左子树和右子树，最后访问根节点 --&gt; 左子树 -&gt; 右子树 -&gt; 根节点</li></ol><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86.png" alt=""><br>结果：<br>先序:a b c d e f g h<br>中序:b d c e a f h g<br>后序:d e c b h g f a</p><h6 id="广度优先遍历层次遍历"><a class="anchor" href="#广度优先遍历层次遍历">#</a> 广度优先遍历 (层次遍历)</h6><p>从树的 root 开始，从上到下从从左到右遍历整个树的节点</p><h4 id="常见的一些树的应用场景"><a class="anchor" href="#常见的一些树的应用场景">#</a> 常见的一些树的应用场景</h4><ol><li>解析 xml,html 的时候</li><li>mysql 数据库索引</li><li>文件系统的目录结构</li><li>机器学习里面的决策树也是树结构</li></ol>]]></content>
      <categories>
        <category>考研</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>经典排序算法</title>
    <url>/kaoyan/data-struct/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>排序算法可以分为内部排序和外部排序。<br>内部排序是数据记录在内存中进行排序。<br>而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。<br>常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。</p><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6.png" alt=""></p><h3 id="稳定性"><a class="anchor" href="#稳定性">#</a> 稳定性</h3><ol><li><p>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</p></li><li><p>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</p></li></ol><h3 id="冒泡排序"><a class="anchor" href="#冒泡排序">#</a> 冒泡排序</h3><h5 id="算法思想"><a class="anchor" href="#算法思想">#</a> 算法思想</h5><p>从第一个和第二个开始比较，如果第一个比第二个大，则交换位置，然后比较第二个和第三个，逐渐往后，经过第一轮后最大的元素已经排在最后，</p><p>所以重复上述操作的话第二大的则会排在倒数第二的位置。，那重复上述操作 n-1 次即可完成排序，因为最后一次只有一个元素所以不需要比较。</p><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%86%92%E6%B3%A1.gif" alt=""></p><h5 id="代码实现"><a class="anchor" href="#代码实现">#</a> 代码实现</h5><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>     <span class="token comment">#冒泡排序</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token comment"># 第一层 for 表示循环的遍数</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>         <span class="token comment"># 第二层 for 表示具体比较哪两个元素</span></pre></td></tr><tr><td data-num="6"></td><td><pre>         <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>             <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                 <span class="token comment"># 如果前面的大于后面的，则交换这两个元素的位置</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                 arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>     <span class="token keyword">return</span> arr</pre></td></tr></table></figure><h3 id="选择排序"><a class="anchor" href="#选择排序">#</a> 选择排序</h3><h5 id="算法思想-2"><a class="anchor" href="#算法思想-2">#</a> 算法思想</h5><p>设第一个元素为比较元素，依次和后面的元素比较，比较完所有元素找到最小的元素，将它和第一个元素互换，重复上述操作，我们找出第二小的元素和第二个位置的元素互换，以此类推找出剩余最小元素将它换到前面，即完成排序。</p><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9.gif" alt=""></p><h5 id="代码实现-2"><a class="anchor" href="#代码实现-2">#</a> 代码实现</h5><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>     <span class="token comment">#选择排序</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token comment"># 第一层 for 表示循环选择的遍数</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>         <span class="token comment"># 将起始元素设为最小元素</span></pre></td></tr><tr><td data-num="6"></td><td><pre>         min_index <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="7"></td><td><pre>         <span class="token comment"># 第二层 for 表示最小元素和后面的元素逐个比较</span></pre></td></tr><tr><td data-num="8"></td><td><pre>         <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>             <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                 <span class="token comment"># 如果当前元素比最小元素小，则把当前元素角标记为最小元素角标</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                 min_index <span class="token operator">=</span> j</pre></td></tr><tr><td data-num="12"></td><td><pre>         <span class="token comment"># 查找一遍后将最小元素与起始元素互换</span></pre></td></tr><tr><td data-num="13"></td><td><pre>         arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>     <span class="token keyword">return</span> arr</pre></td></tr></table></figure><h3 id="插入排序"><a class="anchor" href="#插入排序">#</a> 插入排序</h3><h5 id="算法思想-3"><a class="anchor" href="#算法思想-3">#</a> 算法思想</h5><p>从第二个元素开始和前面的元素进行比较，如果前面的元素比当前元素大，则将前面元素 后移，当前元素依次往前，直到找到比它小或等于它的元素插入在其后面，</p><p>然后选择第三个元素，重复上述操作，进行插入，依次选择到最后一个元素，插入后即完成所有排序。</p><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5.gif" alt=""></p><h5 id="代码实现-3"><a class="anchor" href="#代码实现-3">#</a> 代码实现</h5><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">insertion_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>     <span class="token comment">#插入排序</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token comment"># 第一层 for 表示循环插入的遍数</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>         <span class="token comment"># 设置当前需要插入的元素</span></pre></td></tr><tr><td data-num="6"></td><td><pre>         current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>         <span class="token comment"># 与当前元素比较的比较元素</span></pre></td></tr><tr><td data-num="8"></td><td><pre>         pre_index <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre>         <span class="token keyword">while</span> pre_index <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">and</span> arr<span class="token punctuation">[</span>pre_index<span class="token punctuation">]</span> <span class="token operator">></span> current<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>             <span class="token comment"># 当比较元素大于当前元素则把比较元素后移</span></pre></td></tr><tr><td data-num="11"></td><td><pre>             arr<span class="token punctuation">[</span>pre_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>pre_index<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>             <span class="token comment"># 往前选择下一个比较元素</span></pre></td></tr><tr><td data-num="13"></td><td><pre>             pre_index <span class="token operator">-=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="14"></td><td><pre>         <span class="token comment"># 当比较元素小于当前元素，则将当前元素插入在 其后面</span></pre></td></tr><tr><td data-num="15"></td><td><pre>         arr<span class="token punctuation">[</span>pre_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> current</pre></td></tr><tr><td data-num="16"></td><td><pre>     <span class="token keyword">return</span> arr</pre></td></tr></table></figure><h3 id="希尔排序"><a class="anchor" href="#希尔排序">#</a> 希尔排序</h3><h5 id="算法思想-4"><a class="anchor" href="#算法思想-4">#</a> 算法思想</h5><p>希尔排序的整体思想是将固定间隔的几个元素之间排序，然后再缩小这个间隔。这样到最后数列就成为了基本有序数列。</p><p>具体步骤：</p><ol><li><p>计算一个增量（间隔）值</p></li><li><p>对元素进行增量元素进行比较，比如增量值为 7，那么就对 0,7,14,21… 个元素进行插入排序</p></li><li><p>然后对 1,8,15… 进行排序，依次递增进行排序</p></li><li><p>所有元素排序完后，缩小增量比如为 3，然后又重复上述第 2，3 步</p></li><li><p>最后缩小增量至 1 时，数列已经基本有序，最后一遍普通插入即可</p></li></ol><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%B8%8C%E5%B0%94.gif" alt=""></p><h5 id="代码实现-4"><a class="anchor" href="#代码实现-4">#</a> 代码实现</h5><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>     <span class="token comment">#希尔排序</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token comment"># 取整计算增量（间隔）值</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     gap <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="5"></td><td><pre>     <span class="token keyword">while</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>         <span class="token comment"># 从增量值开始遍历比较</span></pre></td></tr><tr><td data-num="7"></td><td><pre>         <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>gap<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>             j <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="9"></td><td><pre>             current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>             <span class="token comment"># 元素与他同列的前面的每个元素比较，如果比前面的小则互换</span></pre></td></tr><tr><td data-num="11"></td><td><pre>             <span class="token keyword">while</span> j <span class="token operator">-</span> gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">and</span> current <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                 arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                 j <span class="token operator">-=</span> gap</pre></td></tr><tr><td data-num="14"></td><td><pre>             arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> current</pre></td></tr><tr><td data-num="15"></td><td><pre>         <span class="token comment"># 缩小增量（间隔）值</span></pre></td></tr><tr><td data-num="16"></td><td><pre>         gap <span class="token operator">//=</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="17"></td><td><pre>     <span class="token keyword">return</span> arr</pre></td></tr></table></figure><h3 id="归并排序"><a class="anchor" href="#归并排序">#</a> 归并排序</h3><h5 id="算法思想-5"><a class="anchor" href="#算法思想-5">#</a> 算法思想</h5><p>归并排序是分治法的典型应用。分治法（Divide-and-Conquer）：将原问题划分成 n 个规模较小而结构与原问题相似的子问题；递归地解决这些问题，然后再合并其结果，就得到原问题的解，分解后的数列很像一个二叉树。</p><p>具体实现步骤：</p><ol><li><p>使用递归将源数列使用二分法分成多个子列</p></li><li><p>申请空间将两个子列排序合并然后返回</p></li><li><p>将所有子列一步一步合并最后完成排序</p></li><li><p>注：先分解再归并</p></li></ol><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6.gif" alt=""></p><h5 id="代码实现-5"><a class="anchor" href="#代码实现-5">#</a> 代码实现</h5><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>     <span class="token comment">#归并排序</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>         <span class="token keyword">return</span> arr</pre></td></tr><tr><td data-num="5"></td><td><pre>     <span class="token comment"># 使用二分法将数列分两个</span></pre></td></tr><tr><td data-num="6"></td><td><pre>     mid <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="7"></td><td><pre>     left <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>     right <span class="token operator">=</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre>     <span class="token comment"># 使用递归运算</span></pre></td></tr><tr><td data-num="10"></td><td><pre>     <span class="token keyword">return</span> marge<span class="token punctuation">(</span>merge_sort<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> merge_sort<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre> <span class="token keyword">def</span> <span class="token function">marge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>     <span class="token comment">#排序合并两个数列</span></pre></td></tr><tr><td data-num="14"></td><td><pre>     result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre>     <span class="token comment"># 两个数列都有值</span></pre></td></tr><tr><td data-num="16"></td><td><pre>     <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>         <span class="token comment"># 左右两个数列第一个最小放前面</span></pre></td></tr><tr><td data-num="18"></td><td><pre>         <span class="token keyword">if</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>             result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>         <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>             result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>     <span class="token comment"># 只有一个数列中还有值，直接添加</span></pre></td></tr><tr><td data-num="23"></td><td><pre>     result <span class="token operator">+=</span> left</pre></td></tr><tr><td data-num="24"></td><td><pre>     result <span class="token operator">+=</span> right</pre></td></tr><tr><td data-num="25"></td><td><pre>     <span class="token keyword">return</span> result</pre></td></tr></table></figure><h3 id="快速排序"><a class="anchor" href="#快速排序">#</a> 快速排序</h3><h5 id="算法思想-6"><a class="anchor" href="#算法思想-6">#</a> 算法思想</h5><p>找出基线条件，这种条件必须尽可能简单，不断将问题分解（或者说缩小规模），直到符合基线条件。、</p><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F.gif" alt=""></p><h5 id="代码实现-6"><a class="anchor" href="#代码实现-6">#</a> 代码实现</h5><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token comment"># 基线条件：为空或只包含一个元素的数组是 “有序” 的</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     <span class="token keyword">return</span> arr</pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>     <span class="token comment"># 递归条件</span></pre></td></tr><tr><td data-num="7"></td><td><pre>     pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>     <span class="token comment"># 由所有小于基准值的元素组成的子数组</span></pre></td></tr><tr><td data-num="9"></td><td><pre>     less <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> pivot<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>     <span class="token comment"># 由所有大于基准值的元素组成的子数组</span></pre></td></tr><tr><td data-num="11"></td><td><pre>     greater <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i <span class="token operator">></span> pivot<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>     <span class="token keyword">return</span> quicksort<span class="token punctuation">(</span>less<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span>pivot<span class="token punctuation">]</span> <span class="token operator">+</span> quicksort<span class="token punctuation">(</span>greater<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre> <span class="token keyword">print</span><span class="token punctuation">(</span>quick_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="堆排序"><a class="anchor" href="#堆排序">#</a> 堆排序</h3><h5 id="算法思想-7"><a class="anchor" href="#算法思想-7">#</a> 算法思想</h5><p>堆分为最大堆和最小堆，是完全二叉树。堆排序就是把堆顶的最大数取出，将剩余的堆继续调整为最大堆，具体过程在第二块有介绍，以递归实现 ，</p><p>剩余部分调整为最大堆后，再次将堆顶的最大数取出，再将剩余部分调整为最大堆，这个过程持续到剩余数只有一个时结束。</p><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%A0%86.gif" alt=""></p><h5 id="代码实现-7"><a class="anchor" href="#代码实现-7">#</a> 代码实现</h5><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> time<span class="token punctuation">,</span>random</pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token keyword">def</span> <span class="token function">sift_down</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> node<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     root <span class="token operator">=</span> node</pre></td></tr><tr><td data-num="4"></td><td><pre>     <span class="token comment">#print(root,2*root+1,end)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>     <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>         <span class="token comment"># 从 root 开始对最大堆调整</span></pre></td></tr><tr><td data-num="7"></td><td><pre>         child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> root <span class="token operator">+</span><span class="token number">1</span>  <span class="token comment">#left child</span></pre></td></tr><tr><td data-num="8"></td><td><pre>         <span class="token keyword">if</span> child  <span class="token operator">></span> end<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>             <span class="token comment">#print('break',)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>             <span class="token keyword">break</span></pre></td></tr><tr><td data-num="11"></td><td><pre>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"v:"</span><span class="token punctuation">,</span>root<span class="token punctuation">,</span>arr<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">,</span>child<span class="token punctuation">,</span>arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>         <span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>         <span class="token comment"># 找出两个 child 中交大的一个</span></pre></td></tr><tr><td data-num="14"></td><td><pre>         <span class="token keyword">if</span> child <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end <span class="token keyword">and</span> arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment">#如果左边小于右边</span></pre></td></tr><tr><td data-num="15"></td><td><pre>             child <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment">#设置右边为大</span></pre></td></tr><tr><td data-num="16"></td><td><pre>         <span class="token keyword">if</span> arr<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>             <span class="token comment"># 最大堆小于较大的 child, 交换顺序</span></pre></td></tr><tr><td data-num="18"></td><td><pre>             tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>root<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="19"></td><td><pre>             arr<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre>             arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token operator">=</span> tmp</pre></td></tr><tr><td data-num="21"></td><td><pre>             <span class="token comment"># 正在调整的节点设置为 root</span></pre></td></tr><tr><td data-num="22"></td><td><pre>             <span class="token comment">#print("less1:", arr[root],arr[child],root,child)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>             root <span class="token operator">=</span> child <span class="token comment">#</span></pre></td></tr><tr><td data-num="24"></td><td><pre>             <span class="token comment">#[3, 4, 7, 8, 9, 11, 13, 15, 16, 21, 22, 29]</span></pre></td></tr><tr><td data-num="25"></td><td><pre>             <span class="token comment">#print("less2:", arr[root],arr[child],root,child)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>         <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="27"></td><td><pre>             <span class="token comment"># 无需调整的时候，退出</span></pre></td></tr><tr><td data-num="28"></td><td><pre>             <span class="token keyword">break</span></pre></td></tr><tr><td data-num="29"></td><td><pre>     <span class="token comment">#print(arr)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre> <span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="33"></td><td><pre>     <span class="token comment"># 从最后一个有子节点的孩子还是调整最大堆</span></pre></td></tr><tr><td data-num="34"></td><td><pre>     first <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="35"></td><td><pre>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="36"></td><td><pre>         sift_down<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>     <span class="token comment">#[29, 22, 16, 9, 15, 21, 3, 13, 8, 7, 4, 11]</span></pre></td></tr><tr><td data-num="38"></td><td><pre>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------end---'</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>     <span class="token comment"># 将最大的放到堆的最后一个，堆 - 1, 继续调整排序</span></pre></td></tr><tr><td data-num="40"></td><td><pre>     <span class="token keyword">for</span> end <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="41"></td><td><pre>         arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="42"></td><td><pre>         sift_down<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>         <span class="token comment">#print(arr)</span></pre></td></tr></table></figure><h3 id="计数排序"><a class="anchor" href="#计数排序">#</a> 计数排序</h3><h5 id="算法思想-8"><a class="anchor" href="#算法思想-8">#</a> 算法思想</h5><p>对每一个输入元素 x，确定小于 x 的元素个数。利用这一信息，就可以直接把 x 放在它在输出数组上的位置上了，运行时间为 O (n)，但其需要的空间不一定，空间浪费大。</p><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E8%AE%A1%E6%95%B0.gif" alt=""></p><h5 id="代码实现-8"><a class="anchor" href="#代码实现-8">#</a> 代码实现</h5><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> numpy<span class="token punctuation">.</span>random <span class="token keyword">import</span> randint</pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token keyword">def</span> <span class="token function">Conuting_Sort</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     k <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>          <span class="token comment"># A 的最大值，用于确定 C 的长度</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     C <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment"># 通过下表索引，临时存放 A 的数据</span></pre></td></tr><tr><td data-num="5"></td><td><pre>     B <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment"># 存放 A 排序完成后的数组</span></pre></td></tr><tr><td data-num="6"></td><td><pre>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>         C<span class="token punctuation">[</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 记录 A 有哪些数字，值为 A [i] 的共有几个</span></pre></td></tr><tr><td data-num="8"></td><td><pre>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>         C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> C<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># A 中小于 i 的数字个数为 C [i]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>         B<span class="token punctuation">[</span>C<span class="token punctuation">[</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment"># C [A [i]] 的值即为 A [i] 的值在 A 中的次序</span></pre></td></tr><tr><td data-num="12"></td><td><pre>         C<span class="token punctuation">[</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token comment"># 每插入一个 A [i]，则 C [A [i]] 减一</span></pre></td></tr><tr><td data-num="13"></td><td><pre>     <span class="token keyword">return</span> B</pre></td></tr></table></figure><h3 id="桶排序"><a class="anchor" href="#桶排序">#</a> 桶排序</h3><h5 id="算法思想-9"><a class="anchor" href="#算法思想-9">#</a> 算法思想</h5><p>为了节省空间和时间，我们需要指定要排序的数据中最小以及最大的数字的值，来方便桶排序算法的运算。</p><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%A1%B6.gif" alt=""></p><h5 id="代码实现-9"><a class="anchor" href="#代码实现-9">#</a> 代码实现</h5><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#桶排序</span></pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token keyword">def</span> <span class="token function">bucket_sort</span><span class="token punctuation">(</span>the_list<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token comment">#设置全为 0 的数组</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     all_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>     last_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>     <span class="token keyword">for</span> v <span class="token keyword">in</span> the_list<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>         all_list<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> all_list<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> all_list<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span></pre></td></tr><tr><td data-num="8"></td><td><pre>     <span class="token keyword">for</span> i<span class="token punctuation">,</span>t_v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>all_list<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>         <span class="token keyword">if</span> t_v <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>             <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>t_v<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                 last_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>     <span class="token keyword">return</span> last_list</pre></td></tr></table></figure><h3 id="基数排序"><a class="anchor" href="#基数排序">#</a> 基数排序</h3><h5 id="算法思想-10"><a class="anchor" href="#算法思想-10">#</a> 算法思想</h5><p>基数排序（radix sort）属于 “分配式排序”（distribution sort），又称 “桶子法”（bucket sort）或 bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些 “桶” 中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为 O (nlog (r) m)，其中 r 为所采取的基数，而 m 为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。</p><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%95%B0.gif" alt=""></p><h5 id="代码实现-10"><a class="anchor" href="#代码实现-10">#</a> 代码实现</h5><p>由桶排序改造，从最低位到最高位依次桶排序，最后输出最后排好的列表。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">RadixSort</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#d 轮排序</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token comment"># 每一轮生成 10 个列表</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        s<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#因为每一位数字都是 0~9，故建立 10 个桶</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token comment"># 按第 k 位放入到桶中</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            s<span class="token punctuation">[</span>i<span class="token operator">//</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span>k<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment"># 按当前桶的顺序重排列表</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span>j <span class="token keyword">for</span> i <span class="token keyword">in</span> s <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> <span class="token builtin">list</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>考研</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql表设计注意问题</title>
    <url>/computer-science/miscellaneous/Mysql/mysql%E8%A1%A8%E8%AE%BE%E8%AE%A1%E6%B3%A8%E6%84%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a id="more"></a></p><h5 id="为什么一定要设一个主键"><a class="anchor" href="#为什么一定要设一个主键">#</a> 为什么一定要设一个主键？</h5><p>不管设置不设置主键，innodb 也会生成一个隐藏列，作为自增主键。所以啦，反正都要生成一个主键，那你还不如自己指定一个主键，在有些情况下，就能显式的用上主键索引，提高查询效率！</p><h5 id="主键是用自增还是uuid"><a class="anchor" href="#主键是用自增还是uuid">#</a> 主键是用自增还是 UUID?</h5><p>自增。数据在物理结构上是顺序存储，性能最好。</p><h6 id="自增主键用完后怎么办"><a class="anchor" href="#自增主键用完后怎么办">#</a> 自增主键用完后怎么办？</h6><p>把自增主键改成 bigint 类型就好了。不过一般 int 类型用不到最大值，就分表分库了。</p><h5 id="主键为什么不推荐有业务含义"><a class="anchor" href="#主键为什么不推荐有业务含义">#</a> 主键为什么不推荐有业务含义？</h5><ol><li>因为任何有业务含义的列都有改变的可能性，主键一旦带上了业务含义，那么主键就有可能发生变更。主键一旦发生变更，该数据在磁盘上的存储位置就会发生变更，有可能会引发页分裂，产生空间碎片。</li><li>带有业务含义的主键，不一定是顺序自增的。那么就会导致数据的插入顺序，并不能保证后面插入数据的主键一定比前面的数据大。如果出现了，后面插入数据的主键比前面的小，就有可能引发页分裂，产生空间碎片。</li></ol><h5 id="表示枚举的字段为什么不用enum类型"><a class="anchor" href="#表示枚举的字段为什么不用enum类型">#</a> 表示枚举的字段为什么不用 enum 类型？</h5><ol><li>ENUM 类型的 ORDER BY 操作效率低，需要额外操作</li><li>如果枚举值是数值，有陷阱</li></ol><h5 id="货币字段用什么类型"><a class="anchor" href="#货币字段用什么类型">#</a> 货币字段用什么类型？</h5><p>如果货币单位是分，可以用 Int 类型。如果坚持用元，用 Decimal [ˈdes (ə) məl]。<br>千万不要答 float 和 double，因为 float 和 double 是以二进制存储的，所以有一定的误差。</p><h5 id="时间字段用什么类型"><a class="anchor" href="#时间字段用什么类型">#</a> 时间字段用什么类型？</h5><ol><li>varchar，如果用 varchar 类型来存时间，优点在于显示直观。但是坑的地方也是挺多的。比如，插入的数据没有校验，你可能某天就发现一条数据为 2013111 的数据，请问这是代表 2013 年 1 月 11 日，还是 2013 年 11 月 1 日？<br>其次，做时间比较运算，你需要用 STR_TO_DATE 等函数将其转化为时间类型，你会发现这么写是无法命中索引的。数据量一大，是个坑！</li><li>timestamp，该类型是四个字节的整数，它能表示的时间范围为 1970-01-01 08:00:01 到 2038-01-19 11:14:07。2038 年以后的时间，是无法用 timestamp 类型存储的。<br>但是它有一个优势，timestamp 类型是带有时区信息的。一旦你系统中的时区发生改变，例如你修改了时区<br>SET TIME_ZONE = &quot;america/new_york&quot;;<br>你会发现，项目中的该字段的值自己会发生变更。这个特性用来做一些国际化大项目，跨时区的应用时，特别注意！</li><li>datetime，datetime 储存占用 8 个字节，它存储的时间范围为 1000-01-01 00:00:00 ~ 9999-12-31 23:59:59。显然，存储时间范围更大。但是它坑的地方在于，他存储的是时间绝对值，不带有时区信息。如果你改变数据库的时区，该项的值不会自己发生变更！</li><li>bigint，也是 8 个字节，自己维护一个时间戳，表示范围比 timestamp 大多了，就是要自己维护，不大方便。</li></ol><h5 id="为什么不直接存储图片-音频-视频等大容量内容"><a class="anchor" href="#为什么不直接存储图片-音频-视频等大容量内容">#</a> 为什么不直接存储图片、音频、视频等大容量内容？</h5><p>我们在实际应用中，都是用 HDFS 来存储文件。然后 mysql 中，只存文件的存放路径。mysql 中有两个字段类型被用来设计存放大容量文件，也就是 text 和 blob 类型。但是，我们在生产中，基本不用这两个类型！</p><ol><li>Mysql 内存临时表不支持 TEXT、BLOB 这样的大数据类型，如果查询中包含这样的数据，在排序等操作时，就不能使用内存临时表，必须使用磁盘临时表进行。导致查询效率缓慢</li><li>binlog 内容太多。因为你数据内容比较大，就会造成 binlog 内容比较多。大家也知道，主从同步是靠 binlog 进行同步，binlog 太大了，就会导致主从同步效率问题！</li></ol><h6 id="字段为什么要定义为not-null"><a class="anchor" href="#字段为什么要定义为not-null">#</a> 字段为什么要定义为 NOT NULL?</h6><ol><li>索引性能不好</li><li>查询会出现一些不可预料的结果</li></ol><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">create</span> <span class="token keyword">table</span> table_2 <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="2"></td><td><pre>	 <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">)</span></pre></td></tr></table></figure><p>表数据是这样的<br>id	name<br>1	孤独烟<br>3<br>5	肥朝<br>7<br>你执行语句</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">from</span> table_2<span class="token punctuation">;</span></pre></td></tr></table></figure><p>会发现结果为 2，但是实际上是有四条数据的！</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>开发&amp;系统&amp;运维</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/computer-science/miscellaneous/Mysql/mysql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="mysql-oraclesql-service的区别"><a class="anchor" href="#mysql-oraclesql-service的区别">#</a> MySql, Oracle，Sql Service 的区别</h4><ol><li>Oracle 没有自动增长类型，Mysql 和 Sql Service 一般使用自动增长类型</li><li>做分页的话，MySql 使用 Limit，Sql Service 使用 top，Oracle 使用 row</li><li>Oracle 支持多用户不同权限来进行操作，而 MySql 只要有登录权限就可操作全部数据库</li></ol><h4 id="数据库三大范式"><a class="anchor" href="#数据库三大范式">#</a> 数据库三大范式</h4><p>第一范式：每个列都不可以再拆分。<br>第二范式：在第一范式的基础上，非主键列完全依赖于主键，而不能是依赖于主键的一部分。<br>第三范式：在第二范式的基础上，非主键列只依赖于主键，不依赖于其他非主键。</p><h4 id="mysql事务"><a class="anchor" href="#mysql事务">#</a> Mysql 事务</h4><p>事务 (transaction) 是作为一个单元的一组有序的数据库操作 (sql 语句分组)。</p><h5 id="事务的四大特性acid"><a class="anchor" href="#事务的四大特性acid">#</a> 事务的四大特性 (ACID)</h5><ol><li><p>原子性 (Atomicity)：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</p></li><li><p>一致性 (Consistency)：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；</p></li><li><p>隔离性 (lsolation)：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</p></li><li><p>持久性 (Durability)：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</p></li></ol><h5 id="什么是脏读幻读不可重复读"><a class="anchor" href="#什么是脏读幻读不可重复读">#</a> 什么是脏读？幻读？不可重复读？</h5><ol><li>脏读：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个 RollBack 了操作，则后一个事务所读取的数据就会是不正确的。</li><li>不可重复读：不可重复读 (Non-repeatable read): 在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。</li><li>幻读：在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列 (Row) 数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。</li></ol><h5 id="事务的隔离级别"><a class="anchor" href="#事务的隔离级别">#</a> 事务的隔离级别</h5><p>SQL 标准定义了 4 类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。</p><ol><li><p>读取未提交内容 (Read Uncommitted)：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</p></li><li><p>读取提交内容 (Read Committed)：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</p></li><li><p>可重复读 (Repeatable Read)：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</p></li><li><p>串行读 (Serializable)：最高的隔离级别。通过强制事务排序，使之不能互相冲突，从而解决幻读问题。简言之，在每个读的数据行上加上共享锁。在这个级别时，可能导致大量的超时现象和锁竞争。</p></li></ol><h4 id="sql语句"><a class="anchor" href="#sql语句">#</a> SQL 语句</h4><h5 id="六种关联查询"><a class="anchor" href="#六种关联查询">#</a> 六种关联查询</h5><ol><li>交叉连接</li><li>内连接</li><li>外连接</li><li>联合查询</li><li>全连接</li><li>交叉连接</li></ol><h4 id="sql优化"><a class="anchor" href="#sql优化">#</a> SQL 优化</h4><ol><li>选取最适合的字段属性<br>例如 在定义邮政编码这个字段的时候，如果设置为 char (255)，就会给数据库增加不必要的空间，甚至使用 varchar 这种类型也是多余的，char (6) 就够了</li><li>尽量把字段设置为 not null<br>这样执行查询时，数据库不会去比较 Null 值</li><li>优化查询语句</li><li>使用索引<br>查询时使用 join 代替子查询<br>尽量使用一条或者少数几条语句完成</li><li>使用外键</li></ol>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>开发&amp;系统&amp;运维</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库操作</title>
    <url>/computer-science/miscellaneous/Mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="基本查询"><a class="anchor" href="#基本查询">#</a> 基本查询</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students<span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="条件查询"><a class="anchor" href="#条件查询">#</a> 条件查询</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">where</span> score <span class="token operator">>=</span> <span class="token number">80</span> <span class="token operator">AND</span> gender<span class="token operator">=</span><span class="token string">'M'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>score 和 gender 是查询条件</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> class_id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>按 NOT 条件查询 students，查找条件不为 id=2 的数据</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> score <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token operator">OR</span> score <span class="token operator">></span> <span class="token number">90</span> <span class="token operator">AND</span> gender <span class="token operator">=</span> <span class="token string">'M'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>如果不加括号，条件运算按照 NOT、AND、OR 的优先级进行，即 NOT 优先级最高，其次是 AND，最后是 OR。加上括号可以改变优先级。</p><h4 id="投影查询"><a class="anchor" href="#投影查询">#</a> 投影查询</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> score points<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> students<span class="token punctuation">;</span></pre></td></tr></table></figure><p>SELECT 语句将列名 score 重命名为 points，而 id 和 name 列名保持不变</p><h4 id="排序"><a class="anchor" href="#排序">#</a> 排序</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> score <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> score<span class="token punctuation">;</span></pre></td></tr></table></figure><p>默认按 score 从低到高</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> score <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> score <span class="token keyword">DESC</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>按照成绩从高到底排序，我们可以加上 DESC 表示 “倒序”</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> score <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> score <span class="token keyword">DESC</span><span class="token punctuation">,</span> gender<span class="token punctuation">;</span></pre></td></tr></table></figure><p>如果 score 列有相同的数据，要进一步排序，可以继续添加列名。例如，使用 ORDER BY score DESC, gender 表示先按 score 列倒序，如果有相同分数的，再按 gender 列排序</p><h4 id="分页查询"><a class="anchor" href="#分页查询">#</a> 分页查询</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> score</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">FROM</span> students</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> score <span class="token keyword">DESC</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">LIMIT</span> <span class="token number">3</span> <span class="token keyword">OFFSET</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>我们把结果集分页，每页 3 条记录。要获取第 1 页的记录，可以使用 LIMIT 3 OFFSET 0<br>LIMIT3 表示每页最多 3 条记录，0 是结果集从 0 号记录开始。如果想查看第二页的记录，将 offset 设为 3.</p><h4 id="聚合查询"><a class="anchor" href="#聚合查询">#</a> 聚合查询</h4><blockquote><p>对于统计总数、平均数这类计算，SQL 提供了专门的聚合函数，使用聚合函数进行查询，就是聚合查询，它可以快速获得结果</p></blockquote><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> num <span class="token keyword">FROM</span> students<span class="token punctuation">;</span></pre></td></tr></table></figure><p>COUNT (*) 表示查询所有列的行数，要注意聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是 COUNT (*)。</p><p>通常，使用聚合查询时，我们应该给列名设置一个别名（num），便于处理结果</p><blockquote><p>除了 COUNT () 函数外，SQL 还提供了如下聚合函</p></blockquote><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SUM</td><td>计算某一列的合计值，该列必须为数值类型</td></tr><tr><td>AVG</td><td>计算某一列的平均值，该列必须为数值类型</td></tr><tr><td>MAX</td><td>计算某一列的最大值</td></tr><tr><td>MIN</td><td>计算某一列的最小值</td></tr></tbody></table><p>注意，MAX () 和 MIN () 函数并不限于数值类型。如果是字符类型，MAX () 和 MIN () 会返回排序最后和排序最前的字符</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> average <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> gender <span class="token operator">=</span> <span class="token string">'M'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>使用聚合查询计算男生平均成绩</p><p>#### 分组查询</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> num <span class="token keyword">FROM</span> students <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> class_id<span class="token punctuation">;</span></pre></td></tr></table></figure><p>按 class_id 分组</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> class_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> num <span class="token keyword">FROM</span> students <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> class_id<span class="token punctuation">;</span></pre></td></tr></table></figure><p>但是这 3 行结果分别是哪三个班级的，不好看出来，所以我们可以把 class_id 列也放入结果集中</p><h4 id="多表查询"><a class="anchor" href="#多表查询">#</a> 多表查询</h4><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students<span class="token punctuation">,</span> classes<span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>利用投影查询的 “设置列的别名” 来给两个表各自的 id 和 name 列起别名</p></blockquote><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    students<span class="token punctuation">.</span>id sid<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    students<span class="token punctuation">.</span>name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    students<span class="token punctuation">.</span>gender<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    students<span class="token punctuation">.</span>score<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    classes<span class="token punctuation">.</span>id cid<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    classes<span class="token punctuation">.</span>name cname</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">FROM</span> students<span class="token punctuation">,</span> classes<span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>给表面取别名</p></blockquote><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    s<span class="token punctuation">.</span>id sid<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    s<span class="token punctuation">.</span>name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    s<span class="token punctuation">.</span>gender<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    s<span class="token punctuation">.</span>score<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    c<span class="token punctuation">.</span>id cid<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    c<span class="token punctuation">.</span>name cname</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">FROM</span> students s<span class="token punctuation">,</span> classes c<span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="连接查询"><a class="anchor" href="#连接查询">#</a> 连接查询</h4><blockquote><p>连接查询是另一种类型的多表查询。连接查询对多个表进行 JOIN 运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地 “连接” 在主表结果集上。</p></blockquote><h5 id="内连接-inner-join"><a class="anchor" href="#内连接-inner-join">#</a> 内连接 INNER JOIN</h5><p>1. 先确定主表，仍然使用 FROM &lt;表 1&gt; 的语法；<br>2. 再确定需要连接的表，使用 INNER JOIN &lt;表 2&gt; 的语法；<br>3. 然后确定连接条件，使用 ON &lt;条件...&gt;，这里的条件是 s.class_id = <span class="exturl" data-url="aHR0cDovL2MuaWQ=">c.id</span>，表示 students 表的 class_id 列与 classes 表的 id 列相同的行需要连接；<br>4. 可选：加上 WHERE 子句、ORDER BY 等子句。</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>class_id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name class_name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> s<span class="token punctuation">.</span>score</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">FROM</span> students s</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> classes c</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">ON</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span></pre></td></tr></table></figure><p>选出所有学生，同时返回班级名称</p><h5 id="外连接-outer-join"><a class="anchor" href="#外连接-outer-join">#</a> 外连接 OUTER JOIN</h5><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>class_id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name class_name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> s<span class="token punctuation">.</span>score</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">FROM</span> students s</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> classes c</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">ON</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span></pre></td></tr></table></figure><h5 id="查询范式"><a class="anchor" href="#查询范式">#</a> 查询范式</h5><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> tableA ??? <span class="token keyword">JOIN</span> tableB <span class="token keyword">ON</span> tableA<span class="token punctuation">.</span>column1 <span class="token operator">=</span> tableB<span class="token punctuation">.</span>column2<span class="token punctuation">;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>开发&amp;系统&amp;运维</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis知识点</title>
    <url>/computer-science/miscellaneous/Redis/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="redis"><a class="anchor" href="#redis">#</a> Redis</h3><p>Redis 本质上是一个 Key-Value 类型的内存数据库，很像 memcached，整个数据库统统加载在内存当中进行操作。</p><p>因为是纯内存操作，Redis 的性能非常出色，每秒可以处理超过 10 万次读写操作，是已知性能最快的 Key-Value DB。</p><p>Redis 可以用来实现很多有用的功能</p><ol><li>用他的 List 来做 FIFO 双向链表，实现一个轻量级的高性 能消息队列服务</li><li>用他的 Set 可以做高性能的 tag 系统</li><li>Redis 也可以对存入的 Key-Value 设置 expire 时间，因此也可以被当作一 个功能加强版的 memcached 来用</li></ol><h4 id="使用redis有哪些好处"><a class="anchor" href="#使用redis有哪些好处">#</a> 使用 redis 有哪些好处？</h4><ol><li><p>速度快，因为数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是 O (1)</p></li><li><p>支持丰富数据类型，支持 string，list，set，zset, set，hash</p></li><li><p>支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</p></li><li><p>丰富的特性：可用于缓存，消息，按 key 设置过期时间，过期后将会自动删除</p></li></ol><h4 id="memcache与redis的区别都有哪些"><a class="anchor" href="#memcache与redis的区别都有哪些">#</a> Memcache 与 Redis 的区别都有哪些？</h4><ol><li><p>存储方式 Memecache 把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。 Redis 有部份存在硬盘上，这样能保证数据的持久性。</p></li><li><p>数据支持类型 Memcache 对数据类型支持相对简单。 Redis 有复杂的数据类型。</p></li></ol><h4 id="redis相比memcached有哪些优势"><a class="anchor" href="#redis相比memcached有哪些优势">#</a> redis 相比 memcached 有哪些优势？</h4><ol><li>memcached 所有的值均是简单的字符串，redis 作为其替代者，支持更为丰富的数据类型</li><li>redis 的速度比 memcached 快很多</li><li>redis 可以持久化其数据</li></ol><h4 id="为什么用redis"><a class="anchor" href="#为什么用redis">#</a> 为什么用 redis</h4><ol><li><p>假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！</p></li><li><p>直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。</p></li></ol><h4 id="redis-的持久化机制是什么各自的优缺点"><a class="anchor" href="#redis-的持久化机制是什么各自的优缺点">#</a> Redis 的持久化机制是什么？各自的优缺点？</h4><h5 id="rdb是redis-database缩写快照"><a class="anchor" href="#rdb是redis-database缩写快照">#</a> RDB：是 Redis DataBase 缩写快照</h5><p>RDB 是 Redis 默认的持久化方式。按照一定的时间将内存的数据以快照的形式保存到硬盘中，对应产生的数据文件为 dump.rdb。通过配置文件中的 save 参数来定义快照的周期。</p><ol><li>只有一个文件 dump.rdb，方便持久化。</li><li>容灾性好，一个文件可以保存到安全的磁盘</li></ol><h5 id="aof持久化"><a class="anchor" href="#aof持久化">#</a> AOF：持久化：</h5><p>AOF 持久化 (即 Append Only File 持久化)，则是将 Redis 执行的每次写命令记录到单独的日志文件中，当重启 Redis 会重新将持久化的日志中文件恢复数据。</p><h4 id="redis的过期策略和内存淘汰机制"><a class="anchor" href="#redis的过期策略和内存淘汰机制">#</a> Redis 的过期策略和内存淘汰机制</h4><h5 id="过期策略"><a class="anchor" href="#过期策略">#</a> 过期策略</h5><p>redis 采用的是定期删除 + 惰性删除策略</p><p>定期删除，redis 默认每个 100ms 检查，是否有过期的 key, 有过期 key 则删除。需要说明的是，redis 不是每个 100ms 将所有的 key 检查一次，而是随机抽取进行检查 (如果每隔 100ms, 全部 key 进行检查，redis 岂不是卡死)。因此，如果只采用定期删除策略，会导致很多 key 到时间没有删除。</p><p>于是，惰性删除派上用场。也就是说在你获取某个 key 的时候，redis 会检查一下，这个 key 如果设置了过期时间那么是否过期了？如果过期了此时就会删除。</p><h5 id="内存淘汰机制"><a class="anchor" href="#内存淘汰机制">#</a> 内存淘汰机制</h5><p>如果定期删除没删除 key。然后你也没即时去请求 key，也就是说惰性删除也没生效。这样，redis 的内存会越来越高。那么就应该采用内存淘汰机制。<br>在 redis.conf 中有一行配置</p><pre><code># maxmemory-policy volatile-lru
</code></pre><p>该配置就是配内存淘汰策略的</p><ol><li>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。应该没人用吧。</li><li>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key。推荐使用，目前项目在用这种。</li><li>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个 key。应该也没人用吧，你不删最少使用 Key, 去随机删。</li><li>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的 key。这种情况一般是把 redis 既当缓存，又做持久化存储的时候才用。不推荐</li><li>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个 key。依然不推荐</li><li>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的 key 优先移除。不推荐</li></ol><h4 id="redis主要消耗什么物理资源"><a class="anchor" href="#redis主要消耗什么物理资源">#</a> Redis 主要消耗什么物理资源？</h4><p>内存</p><h4 id="redis的内存用完了会发生什么"><a class="anchor" href="#redis的内存用完了会发生什么">#</a> Redis 的内存用完了会发生什么？</h4><p>如果达到设置的上限，Redis 的写命令会返回错误信息（但是读命令还可以正常返回。）或者你可以配置内存淘汰机制，当 Redis 达到内存上限时会冲刷掉旧的内容。</p><h4 id="缓存穿透和缓存雪崩"><a class="anchor" href="#缓存穿透和缓存雪崩">#</a> 缓存穿透和缓存雪崩</h4><h5 id="缓存穿透"><a class="anchor" href="#缓存穿透">#</a> 缓存穿透</h5><p>缓存穿透，即黑客故意去请求缓存中不存在的数据，导致所有的请求都怼到数据库上，从而数据库连接异常。</p><h5 id="缓存雪崩"><a class="anchor" href="#缓存雪崩">#</a> 缓存雪崩</h5><p>即缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。</p><p>解决方法：</p><ol><li>给缓存的失效时间，加上一个随机值，避免集体失效。</li></ol><h4 id="mysql里有2000w数据redis中只存20w的数据如何保证redis中的数据都是热点数据"><a class="anchor" href="#mysql里有2000w数据redis中只存20w的数据如何保证redis中的数据都是热点数据">#</a> mySQL 里有 2000w 数据，redis 中只存 20w 的数据，如何保证 redis 中的数据都是热点数据</h4><p>redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略（回收策略）。<br>可以设置成最近最少使用的数据淘汰。</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>开发&amp;系统&amp;运维</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装卸载与镜像容器管理</title>
    <url>/computer-science/miscellaneous/docker/docker%E5%AE%89%E8%A3%85%E4%B8%8E%E9%95%9C%E5%83%8F%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker来来回回整都还没整清楚先把安装卸载添加和删除镜像整明白方便重来"><a class="anchor" href="#docker来来回回整都还没整清楚先把安装卸载添加和删除镜像整明白方便重来">#</a> Docker 来来回回整都还没整清楚，先把安装卸载，添加和删除镜像整明白，方便重来。</h1><h3 id="安装与卸载docker"><a class="anchor" href="#安装与卸载docker">#</a> 安装与卸载 Docker</h3><ol><li>首先，更新软件包索引，并且安装必要的依赖软件，来添加一个新的 HTTPS 软件源：</li></ol><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt</span> update</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> gnupg-agent software-properties-common</pre></td></tr></table></figure><ol start="2"><li>使用下面的 curl 导入源仓库的 GPG key：</li></ol><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -</pre></td></tr></table></figure><ol start="3"><li>将 Docker APT 软件源添加到你的系统：</li></ol><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable"</span></pre></td></tr></table></figure><p>现在，Docker 软件源被启用了，你可以安装软件源中任何可用的 Docker 版本。</p><ol start="4"><li>运行下面的命令来安装 Docker 最新版本</li></ol><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt</span> update</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io</pre></td></tr></table></figure><ol start="5"><li>安装指定版本的 Docker，首先列出 Docker 软件源中所有可用的版本</li></ol><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt</span> update</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">apt</span> list -a docker-ce</pre></td></tr></table></figure><p>可用的 Docker 版本将会在第二列显示。</p><blockquote><p>docker-ce/focal 5:19.03.9<sub>3-0</sub>ubuntu-focal amd64</p></blockquote><p>通过在软件包名后面添加版本 =&lt;VERSION&gt; 来安装指定版本</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> docker-ce<span class="token operator">=</span><span class="token operator">&lt;</span>VERSION<span class="token operator">></span> docker-ce-cli<span class="token operator">=</span><span class="token operator">&lt;</span>VERSION<span class="token operator">></span> containerd.io</pre></td></tr></table></figure><ol start="6"><li>安装完成后，Docker 服务将会自动启动。输入下面的命令来验证</li></ol><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> systemctl status docker</pre></td></tr></table></figure><ol start="7"><li>验证安装过程<br>想要验证 Docker 是否已经成功被安装，你可以执行 docker 命令，前面不需要加 sudo, 会自动运行一个测试容器</li></ol><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>docker container run hello-world</pre></td></tr></table></figure><ol start="8"><li>卸载 Docker<br>在卸载 Docker 之前，你最好移除所有的容器，镜像，卷和网络。<br>运行下面的命令停止所有正在运行的容器，并且移除所有的 docker 对象</li></ol><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>docker container stop <span class="token variable"><span class="token variable">$(</span>docker container <span class="token function">ls</span> -aq<span class="token variable">)</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>docker system prune -a --volumes</pre></td></tr></table></figure><p>接下来你可以使用 apt 命令来卸载 Docke</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt</span> purge docker-ce</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt</span> autoremove</pre></td></tr></table></figure><h3 id="docker删除容器和镜像"><a class="anchor" href="#docker删除容器和镜像">#</a> Docker 删除容器和镜像</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>docker <span class="token function">ps</span> -aq <span class="token comment"># 列出所有容器 ID</span></pre></td></tr><tr><td data-num="2"></td><td><pre>docker <span class="token function">ps</span> -a <span class="token comment"># 查看所有运行或者不运行容器</span></pre></td></tr><tr><td data-num="3"></td><td><pre>docker stop <span class="token operator">&amp;</span><span class="token comment">#36;;(docker ps -a -q) # 停止所有的 container（容器），这样才能够删除其中的 images</span></pre></td></tr><tr><td data-num="4"></td><td><pre>docker <span class="token function">rm</span> <span class="token operator">&amp;</span><span class="token comment">#36;(docker ps -a -q) # 如果想要删除所有 container（容器）的话再加一个指令</span></pre></td></tr><tr><td data-num="5"></td><td><pre>docker container prune <span class="token comment"># 删除所有停止的容器</span></pre></td></tr><tr><td data-num="6"></td><td><pre>docker stop Name或者ID  <span class="token comment"># 停止一个容器</span></pre></td></tr><tr><td data-num="7"></td><td><pre>docker start Name或者ID  <span class="token comment"># 启动一个容器</span></pre></td></tr><tr><td data-num="8"></td><td><pre>docker <span class="token function">kill</span> Name或者ID  <span class="token comment"># 杀死一个容器</span></pre></td></tr><tr><td data-num="9"></td><td><pre>docker restart name或者ID <span class="token comment"># 重启一个容器</span></pre></td></tr></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>docker images <span class="token comment"># 查看当前有些什么 images</span></pre></td></tr><tr><td data-num="2"></td><td><pre>docker rmi imageid <span class="token comment"># 删除 images（镜像），通过 image 的 id 来指定删除谁</span></pre></td></tr><tr><td data-num="3"></td><td><pre>docker rmi <span class="token operator">&amp;</span><span class="token comment">#36;(docker images | grep "^&lt;none>" | awk "&#123;print &amp;#36;3&#125;") # 想要删除 untagged images，也就是那些 id 为的 image 的话可以用</span></pre></td></tr><tr><td data-num="4"></td><td><pre>docker rmi <span class="token operator">&amp;</span><span class="token comment">#36;(docker images -q) # 要删除全部 image（镜像）的话</span></pre></td></tr><tr><td data-num="5"></td><td><pre>docker rmi -f <span class="token operator">&amp;</span><span class="token comment">#36;(docker images -q) # 强制删除全部 image 的话</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>开发&amp;系统&amp;运维</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下安装mysql以及开放远程连接</title>
    <url>/computer-science/miscellaneous/linux/Linux%E4%B8%8B%E5%AE%89%E8%A3%85mysql%E4%BB%A5%E5%8F%8A%E5%BC%80%E6%94%BE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装mysql"><a class="anchor" href="#安装mysql">#</a> 安装 MYSQL</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> update</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mysql-server</pre></td></tr></table></figure><h3 id="初始化环境"><a class="anchor" href="#初始化环境">#</a> 初始化环境</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> mysql_secure_installation</pre></td></tr></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#1</span></pre></td></tr><tr><td data-num="2"></td><td><pre>VALIDATE PASSWORD PLUGIN can be used to <span class="token builtin class-name">test</span> passwords<span class="token punctuation">..</span>.</pre></td></tr><tr><td data-num="3"></td><td><pre>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No: N <span class="token punctuation">(</span>我的选项<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#2</span></pre></td></tr><tr><td data-num="6"></td><td><pre>Please <span class="token builtin class-name">set</span> the password <span class="token keyword">for</span> root here<span class="token punctuation">..</span>.</pre></td></tr><tr><td data-num="7"></td><td><pre>New password: <span class="token punctuation">(</span>输入密码<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Re-enter new password: <span class="token punctuation">(</span>重复输入<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">#3</span></pre></td></tr><tr><td data-num="11"></td><td><pre>By default, a MySQL installation has an anonymous user,</pre></td></tr><tr><td data-num="12"></td><td><pre>allowing anyone to log into MySQL without having to have</pre></td></tr><tr><td data-num="13"></td><td><pre>a user account created <span class="token keyword">for</span> them<span class="token punctuation">..</span>.</pre></td></tr><tr><td data-num="14"></td><td><pre>Remove anonymous users? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> N <span class="token punctuation">(</span>我的选项<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">#4</span></pre></td></tr><tr><td data-num="17"></td><td><pre>Normally, root should only be allowed to connect from</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token string">'localhost'</span><span class="token builtin class-name">.</span> This ensures that someone cannot guess at</pre></td></tr><tr><td data-num="19"></td><td><pre>the root password from the network<span class="token punctuation">..</span>.</pre></td></tr><tr><td data-num="20"></td><td><pre>Disallow root login remotely? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> Y <span class="token punctuation">(</span>我的选项<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">#5</span></pre></td></tr><tr><td data-num="23"></td><td><pre>By default, MySQL comes with a database named <span class="token string">'test'</span> that</pre></td></tr><tr><td data-num="24"></td><td><pre>anyone can access<span class="token punctuation">..</span>.</pre></td></tr><tr><td data-num="25"></td><td><pre>Remove <span class="token builtin class-name">test</span> database and access to it? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> N <span class="token punctuation">(</span>我的选项<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">#6</span></pre></td></tr><tr><td data-num="28"></td><td><pre>Reloading the privilege tables will ensure that all changes</pre></td></tr><tr><td data-num="29"></td><td><pre>made so far will take effect immediately.</pre></td></tr><tr><td data-num="30"></td><td><pre>Reload privilege tables now? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> Y <span class="token punctuation">(</span>我的选项<span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="远程访问"><a class="anchor" href="#远程访问">#</a> 远程访问</h3><p>编辑文件</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>$ <span class="token function">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf</pre></td></tr></table></figure><p>把下面内容注释掉</p><figure class="highlight ini"><figcaption data-lang="ini"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">bind-address</span>           <span class="token attr-value"><span class="token punctuation">=</span> 127.0.0.1</span></pre></td></tr></table></figure><p>进入 MYSQL<br>查看用户权限</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>旧版</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> root<span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'root'</span> <span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>新版<br>8.0 版本更换了权限设置和密码加密协议，因此会报出 42000 错误：</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre>ERROR <span class="token number">1064</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span>: You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span> <span class="token keyword">check</span> the manual that corresponds <span class="token keyword">to</span> your MySQL server version <span class="token keyword">for</span> the <span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">'IDENTIFIED BY '</span>password<span class="token string">' WITH GRANT OPTION'</span> at line <span class="token number">1</span></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre>mysql<span class="token operator">></span> <span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'password'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>mysql<span class="token operator">></span> <span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> db1<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'root'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>mysql<span class="token operator">></span> FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>重启 Mysql</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> /etc/init.d/mysql restart</pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>开发&amp;系统&amp;运维</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装mariadb</title>
    <url>/computer-science/miscellaneous/linux/ubuntu%E5%AE%89%E8%A3%85mariadb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装"><a class="anchor" href="#安装">#</a> 安装</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt</span> update</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> mariadb-server</pre></td></tr></table></figure><h3 id="验证"><a class="anchor" href="#验证">#</a> 验证</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> systemctl status mariadb</pre></td></tr></table></figure><h3 id="初始化"><a class="anchor" href="#初始化">#</a> 初始化</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">sudo</span> mysql_secure_installation</pre></td></tr></table></figure><p>脚本将会提示你输入 root 密码：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>Enter current password <span class="token keyword">for</span> root <span class="token punctuation">(</span>enter <span class="token keyword">for</span> none<span class="token punctuation">)</span>:</pre></td></tr></table></figure><p>你会被问到是否 MySQL root 用户设置密码：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>Set root password? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span></pre></td></tr></table></figure><p>你将会被要求移除匿名用户，限制 root 用户访问本地机器，移除测试数据库，并且重新加载权限表。</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>Remove anonymous users? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> Y</pre></td></tr><tr><td data-num="2"></td><td><pre>Disallow root login remotely? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> Y</pre></td></tr><tr><td data-num="3"></td><td><pre>Remove <span class="token builtin class-name">test</span> database and access to it? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> Y</pre></td></tr><tr><td data-num="4"></td><td><pre>Reload privilege tables now? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> Y</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">### 允许远程连接</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#### 修改表</span></pre></td></tr><tr><td data-num="8"></td><td><pre>​~~~bash</pre></td></tr><tr><td data-num="9"></td><td><pre>GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'root'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>flush privileges<span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="修改配置文件"><a class="anchor" href="#修改配置文件">#</a> 修改配置文件</h4><p>将 /etc/mysql/mariadb.conf.d/50-server.cnf 中 bind-address = 127.0.0.1 加# 注释掉</p><h4 id="重启服务"><a class="anchor" href="#重启服务">#</a> 重启服务</h4><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>systemctl restart mariadb.service</pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>开发&amp;系统&amp;运维</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下安装redis以及开放远程连接</title>
    <url>/computer-science/miscellaneous/linux/Linux%E4%B8%8B%E5%AE%89%E8%A3%85redis%E4%BB%A5%E5%8F%8A%E5%BC%80%E6%94%BE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装redis"><a class="anchor" href="#安装redis">#</a> 安装 Redis</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>$ <span class="token function">sudo</span> <span class="token function">apt</span> update</pre></td></tr><tr><td data-num="2"></td><td><pre>$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> redis-server</pre></td></tr></table></figure><h3 id="重启redis"><a class="anchor" href="#重启redis">#</a> 重启 Redis</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>$ <span class="token function">sudo</span> <span class="token function">service</span> redis restart</pre></td></tr></table></figure><h3 id="查看运行状态"><a class="anchor" href="#查看运行状态">#</a> 查看运行状态</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>$ <span class="token function">sudo</span> systemctl status redis</pre></td></tr></table></figure><h3 id="设置远程连接"><a class="anchor" href="#设置远程连接">#</a> 设置远程连接</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">vim</span> /etc/redis/redis.conf</pre></td></tr></table></figure><p>将第 70 行 bind 注释掉，第 90 行的 protected-mode 改为 no</p><p>然后重启 Redis 即可远程连接</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>开发&amp;系统&amp;运维</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP协议</title>
    <url>/computer-science/miscellaneous/protocol/TCP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="tcp协议"><a class="anchor" href="#tcp协议">#</a> TCP 协议</h4><ol><li>TCP 提供一种面向连接的、可靠的字节流服务。</li><li>在一个 TCP 连接中，仅有两方进行彼此通信。广播和多播不能用于 TCP。</li><li>TCP 使用校验和，确认和重传机制来保证可靠传输。</li><li>TCP 给数据分节进行排序，并使用累积确认保证数据的顺序不变和非重复。</li><li>TCP 使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制。</li></ol><h5 id="注意"><a class="anchor" href="#注意">#</a> 注意</h5><p>TCP 并不能保证数据一定会被对方接收到，因为这是不可能的。</p><p>TCP 能够做到的是，如果有可能，就把数据递送到接收方，否则就（通过放弃重传并且中断连接这一手段）通知用户。因此准确说 TCP 也不是 100% 可靠的协议，它所能提供的是数据的可靠递送或故障的可靠通知。</p><h4 id="三次挥手three-way-handshake"><a class="anchor" href="#三次挥手three-way-handshake">#</a> 三次挥手 (Three-way Handshake)</h4><p>所谓三次握手 (Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送 3 个包。</p><p>三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。</p><ol><li><p>第一次握手 (SYN=1, seq=x):</p><p>客户端发送一个 TCP 的 SYN 标志位置 1 的包，指明客户端打算连接的服务器的端口，以及初始序号 X, 保存在包头的序列号 (Sequence Number) 字段里。<br>发送完毕后，客户端进入 SYN_SEND 状态。</p></li><li><p>第二次握手 (SYN=1, ACK=1, seq=y, ACKnum=x+1):</p><p>服务器发回确认包 (ACK) 应答。即 SYN 标志位和 ACK 标志位均为 1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号 (Acknowledgement Number) 设置为客户的 ISN 加 1，即 X+1。 发送完毕后，服务器端进入 SYN_RCVD 状态。</p></li><li><p>第三次握手 (ACK=1，ACKnum=y+1):</p><p>客户端再次发送确认包 (ACK)，SYN 标志位为 0，ACK 标志位为 1，并且把服务器发来 ACK 的序号字段 + 1，放在确定字段中发送给对方，并且在数据段放写 ISN 的 + 1。</p></li></ol><p>发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束。</p><h4 id="四次挥手four-way-handshake"><a class="anchor" href="#四次挥手four-way-handshake">#</a> 四次挥手 (Four-way handshake)</h4><p>客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 close () 操作即可产生挥手操作。</p><ol><li><p>第一次挥手 (FIN=1，seq=x):</p><p>假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为 1 的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。</p><p>发送完毕后，客户端进入 FIN_WAIT_1 状态。</p></li><li><p>第二次挥手 (ACK=1，ACKnum=x+1):</p><p>服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。</p><p>发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态，等待服务器端关闭连接。</p></li><li><p>第三次挥手 (FIN=1，seq=y):</p><p>服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为 1。</p><p>发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个 ACK。</p></li><li><p>第四次挥手 (ACK=1，ACKnum=y+1):</p><p>客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT 状态，等待可能出现的要求重传的 ACK 包。</p><p>服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。</p><p>客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。</p></li></ol><h4 id="tcp-keepalive"><a class="anchor" href="#tcp-keepalive">#</a> TCP KeepAlive</h4><p>TCP 的连接，实际上是一种纯软件层面的概念，在物理层面并没有 “连接” 这种概念。TCP 通信双方建立交互的连接，但是并不是一直存在数据交互，有些连接会在数据交互完毕后，主动释放连接，而有些不会。</p><p>TCP KeepAlive 的基本原理是，隔一段时间给连接对端发送一个探测包，如果收到对方回应的 ACK，则认为连接还是存活的，在超过一定重试次数之后还是没有收到对方的回应，则丢弃该 TCP 连接。</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>开发&amp;系统&amp;运维</category>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Http协议</title>
    <url>/computer-science/miscellaneous/protocol/Http%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="http协议"><a class="anchor" href="#http协议">#</a> HTTP 协议</h4><p>Http 是一种网络协议，而且是无状态的超文本协议，基于 Tcp/Ip 协议的应用层协议。</p><h4 id="http-get和post的区别"><a class="anchor" href="#http-get和post的区别">#</a> HTTP get 和 post 的区别</h4><ol><li>get 是从服务器上获取数据，post 是向服务器传送数据。</li><li>get 传送的数据量较小，不能大于 2KB。post 传送的数据量较大，一般被默认为不受限制。</li><li>get 安全性非常低，post 安全性较高。但是执行效率却比 Post 方法好。<ol><li>安全性:get 是把参数数据队列加到提交表单的 ACTION 属性所指的 URL 中，值和表单内各个字段一一对应，在 URL 中可以看到。post 是通过 HTTP post 机制，将表单内各个字段与其内容放置在 HTML HEADER 内一起传送到 ACTION 属性所指的 URL 地址。用户看不到这个过程。</li><li>效率:get 产生一个 TCP 数据包；post 产生两个 TCP 数据包。对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）；而对于 POST，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok（返回数据）。</li></ol></li></ol><h4 id="报文"><a class="anchor" href="#报文">#</a> 报文</h4><h5 id="请求报文"><a class="anchor" href="#请求报文">#</a> 请求报文</h5><p>HTTP 协议是以 ASCII 码传输，建立在 TCP/IP 协议之上的应用层规范。<br>规范把 HTTP 请求分为三个部分：</p><ol><li>状态行</li><li>请求头</li><li>消息主体</li></ol><h5 id="响应报文"><a class="anchor" href="#响应报文">#</a> 响应报文</h5><p>HTTP 响应与 HTTP 请求相似，HTTP 响应也由 3 个部分构成，分别是：</p><ol><li>状态行</li><li>响应头 (Response Header)</li><li>响应正文</li></ol><h4 id="http响应状态码"><a class="anchor" href="#http响应状态码">#</a> HTTP 响应状态码</h4><p><img data-src="https://orekisama.gitee.io/blog-image-bed/blogimg/assets/Http%E5%8D%8F%E8%AE%AE/http.jpg" alt=""></p><h5 id="1xx-通知"><a class="anchor" href="#1xx-通知">#</a> 1XX: 通知</h5><p>1XX 系列响应代码仅在与 HTTP 服务器沟通时使用。</p><h5 id="2xx-成功"><a class="anchor" href="#2xx-成功">#</a> 2XX: 成功</h5><p>2XX 系列响应代码表明操作成功了。</p><h5 id="3xx-重定向"><a class="anchor" href="#3xx-重定向">#</a> 3XX: 重定向</h5><p>3XX 系列响应代码表明：客户端需要做些额外工作才能得到所需要的资源。它们通常用于 GET 请求。他们通常告诉客户端需要向另一个 URI 发送 GET 请求，才能得到所需的表示。那个 URI 就包含在 Location 响应报头里。</p><h5 id="4xx-客户端错误"><a class="anchor" href="#4xx-客户端错误">#</a> 4XX: 客户端错误</h5><p>这些响应代码表明客户端出现错误。不是认证信息有问题，就是表示格式或 HTTP 库本身有问题。客户端需要自行改正。</p><h5 id="5xx-服务端错误"><a class="anchor" href="#5xx-服务端错误">#</a> 5XX: 服务端错误</h5><p>这些响应代码表明服务器端出现错误。一般来说，这些代码意味着服务器处于不能执行客户端请求的状态，此时客户端应稍后重试。有时，服务器能够估计客户端应在多久之后重试。并把该信息放在 Retry-After 响应报头里。</p><h4 id="uri和url的区别"><a class="anchor" href="#uri和url的区别">#</a> URI 和 URL 的区别</h4><ol><li>统一资源定位符 (uniform resource locator URL)</li><li>统一资源标识符 (uniform resource identifier URI)</li></ol><p>可以这样理解 URI 表示的是一个抽象的地址，URL 表示的是一个详细的地址。 抽象的地址：湖南省长沙市（这是一个抽象的地址，相当于 URI）<br>详细的地址：湖南省长沙市雨花区香樟路 22 号（这是一个详细的地址，相当于 URL） 为什么 URL 是 URI 的子集，雨花区的香樟路 22 号（URL）属于湖南省长沙市（URI），<br>那么放到 web 上 www.csdn.net 是一个 URI（它只说明了服务器的地址，没有具体到文件是什么类型）<br><span class="exturl" data-url="aHR0cDovL3huLS13d3cteDk4ZGs3NDFhLmNzZG4ubmV0L2ltYWdlL2xvZ28uJUUyJTgwJUE2">那么 www.csdn.net/image/logo.…</span> 这样一来 URL 和 URI 的区别就很清晰了</p><h4 id="keep-alive-持久连接"><a class="anchor" href="#keep-alive-持久连接">#</a> Keep-Alive 持久连接</h4><p>HTTP 协议采用 “请求 - 应答” 模式，当使用普通模式，即非 Keep-Alive 模式时，每个请求 / 应答客户和服务器都要新建一个连接，完成之后立即断开连接（HTTP 协议为无连接的协议）；</p><p>当使用 Keep-Alive 模式（又称持久连接、连接重用）时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接。</p><ol><li>HTTP Keep-Alive 简单说就是保持当前的 TCP 连接，避免了重新建立连接。</li><li>HTTP 长连接不可能一直保持，例如 Keep-Alive: timeout=5, max=100，表示这个 TCP 通道可以保持 5 秒，max=100，表示这个长连接最多接收 100 次请求就断开。</li><li></li></ol><h4 id="从输入url到页面加载完成的过程"><a class="anchor" href="#从输入url到页面加载完成的过程">#</a> 从输入 URL 到页面加载完成的过程</h4><ol><li>首先做 DNS 解析，通过域名获得 IP 地址。</li><li>接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了。</li><li>TCP 握手结束后会进行 TLS 握手，然后就开始正式的传输数据。</li><li>数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件。</li><li>首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错。</li><li>浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件。</li><li>文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 script 标签的话，会判断是否存在 async 或者 defer ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP 2.0 协议的话会极大的提高多图的下载效率。</li><li>初始的 HTML 被完全加载和解析后会触发 DOMContentLoaded 事件。</li><li>CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西。</li><li>在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了。</li><li>四次挥手断开连接。</li></ol><h5 id="简单的讲一次完整的http连接就是从url输入到页面加载的全过程"><a class="anchor" href="#简单的讲一次完整的http连接就是从url输入到页面加载的全过程">#</a> 简单的讲一次完整的 http 连接就是从 url 输入到页面加载的全过程</h5><figure class="highlight markdown"><figcaption data-lang="markdown"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token list punctuation">1.</span> DNS域名解析: 浏览器将URL解析出相对应的IP地址和端口号。</pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token list punctuation">1.</span> 从本地浏览器的DNS缓存中查找</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token list punctuation">2.</span> 在系统DNS缓存中查找</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token list punctuation">3.</span> 从路由器DNS缓存中查找</pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token list punctuation">4.</span> 网络运营商DNS缓存中查找</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token list punctuation">5.</span> 递归搜索</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token list punctuation">2.</span> TCP三次握手建立连接。</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token list punctuation">3.</span> TLS握手，加密传输。</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token list punctuation">4.</span> 发送HTTP请求，服务器响应请求返回数据文件。</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token list punctuation">5.</span> 浏览器解析文件，渲染生成页面。</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token list punctuation">6.</span> 四次挥手断开连接。</pre></td></tr></table></figure><h4 id="cookie和session"><a class="anchor" href="#cookie和session">#</a> Cookie 和 Session</h4><h5 id="cookie"><a class="anchor" href="#cookie">#</a> Cookie</h5><p>Cookie 实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用 response 向客户端浏览器颁发一个 Cookie。客户端会把 Cookie 保存起来。</p><p>当浏览器再请求该网站时，浏览器把请求的网址连同该 Cookie 一同提交给服务器。服务器检查该 Cookie，以此来辨认用户状态。</p><p>如果没有设置 Cookie 失效日期，它们仅保存到关闭浏览器程序为止.</p><p>Cookie 存储的数据量很受限制，大多数浏览器支持最大容量为 4K</p><p>Cookie 类型</p><ol><li>普通 cookie： 服务端和 js 都可以创建，都可以访问。</li><li>HttpOnly cookie: 只能由服务端创建，JS 无法读取。</li><li>安全的 cookie（https）： 服务端和 JS 都可以创建，JS 仅在 HTTPS 下访问。</li></ol><h5 id="session"><a class="anchor" href="#session">#</a> Session</h5><p>Session 是另一种记录客户状态的机制，不同的是 Cookie 保存在客户端浏览器中，而 Session 保存在服务器上。</p><h5 id="区别"><a class="anchor" href="#区别">#</a> 区别</h5><p>1，session 在服务器端，cookie 在客户端（浏览器）<br>2，session 默认被存在在服务器的一个文件里（不是内存）<br>3，session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）<br>4，session 可以放在 文件、数据库、或内存中都可以。<br>5，用户验证这种场合一般会用 session</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>开发&amp;系统&amp;运维</category>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>TLS协议</title>
    <url>/computer-science/miscellaneous/protocol/TLS%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="tls-安全传输层"><a class="anchor" href="#tls-安全传输层">#</a> TLS 安全传输层</h4><p>很多应用层协议都存在安全问题。如 http 协议，在传输过程中使用明文信息，传输报文一旦被截获便会泄漏内容；传输过程中报文如果被篡改，无法轻易发现；<br>为了解决这个问题，就在应用层和传输层之间加入了 SSL/TLS 协议。</p><h5 id="什么是tls"><a class="anchor" href="#什么是tls">#</a> 什么是 TLS</h5><p>TLS（Transport Layer Security, 安全传输层）。TLS 是建立在传输层 TCP 协议之上的协议，服务于应用层。前身是 SSL（Secure Socket Layer, 安全套接字层）, 它实现了将应用层报文加密后再交由 TCP 进行传输的可能。</p><h5 id="tls的作用"><a class="anchor" href="#tls的作用">#</a> TLS 的作用</h5><ol><li>保密。保密通过加密 encryption 实现，所有信息都加密传输，第三方无法嗅探。</li><li>完整性。通过 MAC 校验机制，一旦被篡改，通信双方会立刻发现。</li><li>认证。双方认证，双方都可以配备证书，防止身份被冒充。</li></ol><h5 id="tls实现"><a class="anchor" href="#tls实现">#</a> TLS 实现</h5><p>TLS 协议分为两部分</p><ol><li>通信协议<br>通过使用客户端和服务端协商后的密钥进行数据加密传输。</li><li>握手协议<br>客户端和服务端进行协商，确定一组用于数据传输加密的密钥串。</li></ol>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>开发&amp;系统&amp;运维</category>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>django从请求到响应的过程</title>
    <url>/computer-science/python/django/django%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E5%93%8D%E5%BA%94%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="django请求生命周期的概念"><a class="anchor" href="#django请求生命周期的概念">#</a> Django 请求生命周期的概念</h4><p>从用户输入 URL 到用户看到网页的整个过程</p><h5 id="请求过程描述"><a class="anchor" href="#请求过程描述">#</a> 请求过程描述</h5><ol><li>用户输入网址，浏览器发起请求。</li><li>WSGI（服务器网关接口）创建 socket 服务端，接受请求。</li><li>中间件处理请求。</li><li>url 路由，根据当前请求的 url 找到相应的视图函数。</li><li>进入 view，进行业务处理，执行类或者函数，返回字符串。</li><li>再次通过中间件处理响应。</li><li>WSGI 返回响应。</li><li>浏览器渲染。</li></ol><h4 id="django启动"><a class="anchor" href="#django启动">#</a> django 启动</h4><p>我们在启动一个 django 项目的时候，无论你是在命令行执行还是在 pycharm 直接点击运行，其实都是执行’runserver’的操作，而 ruserver 是使用 django 自带的的 web server，主要用于开发和调试中，而在正式的环境中，一般会使用 nginx+uwsgi 模式。<br>无论是哪种方式，当启动一个项目，都会做 2 件事：</p><ol><li>创建一个 WSGIServer 类的实例，接受用户的请求。</li><li>当一个用户的 http 请求到达的时，为用户指定一个 WSGIHandler，用于处理用户请求与响应，这个 Handler 是处理整个 request 的核心。</li></ol><h4 id="wsgi"><a class="anchor" href="#wsgi">#</a> WSGI</h4><p>WSGI：全称是 Web Server Gateway interface, WSGI 不是服务器，也不用于与程序交互的 API，更不是代码，而只是定义了一个接口，用于描述 web server 如何与 web application 通信的规范。</p><p>客户端发送一次请求后，最先处理请求的实际上是 web 服务器就是我们经常说的 nginx、Apache 这类的 web 服务器，然后 web 服务器再把请求交给 web 应用程序 (如 django) 处理，这中间的中介就是 WSGI，它把 web 服务器和 web 框架 (Django) 连接起来。</p><p>Django 自带的 wsgi 服务是单线程的，适用于开发阶段。部署到生产环境时一般使用 nginx 代理服务器实现异步多线程 (Apache 是同步的，不适用于高并发处理), 能处理理论高达五万并发请求。在 Django2.0 开始提出异步，在 ORM 做了初步使用，但不完全异步，3.0 以后实现异步处理函数，基于 Python 的协程实现（不是 greenlet 这些第三方库，是 asyncio 库以及 ansync/await 关键字实现的）, 使用的是 Django 特有的 asgi 服务器，这个服务器可以处理同步和异步请求。</p><p>Django 异步多线程场配合 celery 框架来实现，celery 是一个用 python 开发的分布式任务队列框架，支持线程 / 进程处理调度。</p><h4 id="中间件基本概念"><a class="anchor" href="#中间件基本概念">#</a> 中间件基本概念</h4><p>顾名思义，中间件是位于 Web 服务器端和 Web 应用之间的，它可以添加额外的功能。当我们创建一个 django 项目 (通过 pycharm)，它会自动帮我们设置一些必要的中间件。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>MIDDLEWARE_CLASSES <span class="token operator">=</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token string">'django.middleware.security.SecurityMiddleware'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token string">'django.contrib.sessions.middleware.SessionMiddleware'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token string">'django.middleware.common.CommonMiddleware'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token string">'django.middleware.csrf.CsrfViewMiddleware'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token string">'django.contrib.auth.middleware.SessionAuthenticationMiddleware'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token string">'django.contrib.messages.middleware.MessageMiddleware'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">]</span></pre></td></tr></table></figure><p>中间件要么对来自用户的数据进行预处理，然后发送给应用；要么在应用将响应负载返回给用户之前，对结果数据进行一些最终的调整。</p><p>通俗一点，在 django 中，中间能够帮我们准备好 request 这个对象，然后应用可以直接使用 request 对象获取到各类数据，也帮我们将 response 添加头部，状态码等。<br>例如：</p><ol><li><p>Django 项目中默认启用了 csrf 保护，每次请求时通过 CSRF 中间件检查请求中是否有正确 #token 值</p></li><li><p>当用户在页面上发送请求时，通过自定义的认证中间件，判断用户是否已经登陆，未登陆就去登陆。</p></li><li><p>当有用户请求过来时，判断用户是否在白名单或者在黑名单里</p></li></ol><p>其内置的五个方法:</p><ol><li><p>process_request : 请求进来时，权限认证</p></li><li><p>process_view : 路由匹配之后，能够得到视图函数</p></li><li><p>process_exception : 异常时执行</p></li><li><p>process_template_responseprocess : 模板渲染时执行</p></li><li><p>process_response : 请求有响应时执行、</p></li></ol><h4 id="orm-对象关系映射"><a class="anchor" href="#orm-对象关系映射">#</a> ORM 对象关系映射</h4><p>一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。<br>几乎所有的程序里面，都存在对象和关系数据库。在业务逻辑层和用户界面层中，我们是面向对象的。当对象信息发生变化的时候，我们需要把对象的信息保存在关系数据库中。<br>ORM 解决的主要问题是对象关系的映射。</p><p>ORM 的技术特点：</p><ol><li>提高了开发效率。</li><li>不会存在 sql 语句编写不规范的问题。</li></ol><h3 id="django常见的线上部署方式"><a class="anchor" href="#django常见的线上部署方式">#</a> Django 常见的线上部署方式</h3><p>Nginx+uwsgi</p><p>nginx 作为服务器最前端，负责接收 client 的所有请求，统一管理。静态请求由 Nginx 自己处理。<br>非静态请求通过 uwsgi 传递给 Django，由 Django 来进行处理，从而完成一次 WEB 请求</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫面试题整理</title>
    <url>/computer-science/python/spider/%E7%88%AC%E8%99%AB%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="简述一下爬虫的步骤"><a class="anchor" href="#简述一下爬虫的步骤">#</a> 简述一下爬虫的步骤。</h3><ol><li>确定需求；</li><li>确定资源；</li><li>通过 url 获取网站的返回数据；</li><li>定位数据；</li><li>存储数据。</li></ol><h3 id="常见的http方法有哪些"><a class="anchor" href="#常见的http方法有哪些">#</a> 常见的 HTTP 方法有哪些？</h3><p>GET：请求指定的页面信息，返回实体主体；<br>HEAD: 类似于 get 请求，只不过返回的响应中没有具体的内容，用于捕获报头；<br>POST：向指定资源提交数据进行处理请求 (比如表单提交或者上传文件)，。数据被包含在请求体中。<br>PUT: 从客户端向服务端传送数据取代指定的文档的内容；<br>DELETE：请求删除指定的页面；<br>CONNNECT：HTTP1.1 协议中预留给能够将连接方式改为管道方式的代理服务器；<br>OPTIONS: 允许客户端查看服务器的性能；<br>TRACE：回显服务器的请求，主要用于测试或者诊断。</p><h3 id="遇到的反爬虫策略以及解决方法"><a class="anchor" href="#遇到的反爬虫策略以及解决方法">#</a> 遇到的反爬虫策略以及解决方法。</h3><ol><li>通过 headers 反爬虫：自定义 headers，添加网页中的 headers 数据。</li><li>基于用户行为的反爬虫 (封 IP)：可以使用多个代理 IP 爬取或者将爬取的频率降低。</li><li>动态网页反爬虫 (JS 或者 Ajax 请求数据)：动态网页可以使用 selenium + phantomjs 抓取。</li><li>字体加密反爬虫：浏览器调试模式找到 woff 字体文件。</li></ol><h3 id="scrapy"><a class="anchor" href="#scrapy">#</a> Scrapy</h3><h4 id="框架流程"><a class="anchor" href="#框架流程">#</a> 框架流程</h4><p><img data-src="scrapy.png" alt=""><br>Scrapy 的整个数据处理流程有 Scrapy 引擎进行控制，其主要的运行方式为：</p><ol start="0"><li>引擎打开一个域名时，爬行器 (spider) 处理这个域名。并且让爬行器获取第一个需要爬取的 url，也就是初始请求。</li><li>Engine 获得从爬行器 (spider) 中爬行的初始请求。</li><li>Engine 在调度程序中调度请求，并请求下一次抓取请求。</li><li>调度程序将下一个请求返回到引擎。</li><li>引擎将请求发送到下载器，通过下载器中间件</li><li>页面下载完成后，下载器生成一个响应 (带有该页面) 并将其发送给引擎，通过下载器中间件</li><li>引擎从下载加载程序接收响应，并将其发送给 Spider 进行处理，并通过 Spider 中间件</li><li>Spider 处理响应，并向引擎返回报废的项和新请求 (要跟踪的)，通过 Spider 中间件</li><li>引擎将已处理的项目发送到项目管道，然后将已处理的请求发送到调度程序，并请求可能的下一个请求进行抓取。</li><li>这个过程重复 (从第 1 步)，直到调度程序不再发出请求。</li></ol><h4 id="scrapy是以广度优先还是深度优先进行爬取的呢"><a class="anchor" href="#scrapy是以广度优先还是深度优先进行爬取的呢">#</a> Scrapy 是以广度优先还是深度优先进行爬取的呢？</h4><p>默认 深度优先顺序 。</p><p>如果您想以 广度优先顺序 进行爬取，你可以设置以下的设定:</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>DEPTH_PRIORITY <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="2"></td><td><pre>SCHEDULER_DISK_QUEUE <span class="token operator">=</span> <span class="token string">'scrapy.squeue.PickleFifoDiskQueue'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>SCHEDULER_MEMORY_QUEUE <span class="token operator">=</span> <span class="token string">'scrapy.squeue.FifoMemoryQueue'</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>make &amp; new</title>
    <url>/computer-science/golang/make%20&amp;%20new/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>new 和 make 都可以用来<strong>分配空间</strong>，初始化类型，但是它们确有不同。</p><h2 id="new"><a class="anchor" href="#new">#</a> new</h2><p>new (T) 返回的是 T 的指针</p><p>new (int) 将分配的空间初始化为 int 的零值，也就是 0，并返回 int 的指针，这和直接声明指针并初始化的效果是相同的</p><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre>p <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// (*int)0xc000012088</span></pre></td></tr><tr><td data-num="3"></td><td><pre>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token comment">// 0</span></pre></td></tr></table></figure><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">var</span> p <span class="token operator">*</span><span class="token builtin">int</span></pre></td></tr><tr><td data-num="2"></td><td><pre>i <span class="token operator">:=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre>p <span class="token operator">=</span> <span class="token operator">&amp;</span>i</pre></td></tr><tr><td data-num="4"></td><td><pre>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// (*int)0xc000012088</span></pre></td></tr><tr><td data-num="5"></td><td><pre>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token comment">// 0</span></pre></td></tr></table></figure><h2 id="make"><a class="anchor" href="#make">#</a> make</h2><p>make 只能用于 slice，map，channel 三种类型，make (T, args) 返回的是初始化之后的 T 类型的值，这个新值并不是 T 类型的零值，也不是指针 *T，是经过初始化之后的 T 的引用。</p><figure class="highlight go"><figcaption data-lang="go"></figcaption><table><tr><td data-num="1"></td><td><pre>s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// [0, 0, 0]</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>	m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token comment">//map[]</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//0xc000086060</span></pre></td></tr></table></figure><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p><code>make(T, args)</code> 函数的目的与 <code>new(T)</code> 不同。它仅仅用于创建 Slice, Map 和 Channel，并且返回类型是 T（不是 T*）的一个初始化的（不是零值）的实例。</p>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>Golang</category>
      </categories>
  </entry>
</search>
