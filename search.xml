<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django使用命令makemigrations提示NoChanges</title>
    <url>/2020/01/16/Django%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4makemigrations%E6%8F%90%E7%A4%BANoChanges/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>在项目中，遇到models模型变动，变动后合并发生问题，故当时做了删除应用文件夹下migrations文件，由于数据库里无较多新数据，故删除后重建，但重建后执行模型合并操作结果为No Changes，不会对应用模型进行变动。</p>
<p>解决方法：</p>
<blockquote>
<p>执行python manage.py makemigrations –empty 应用名;<br>执行python manage.py makemigrations;<br>执行python manage.py migrate;</p>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>排错记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Djangotemplate语法</title>
    <url>/2018/04/01/Django-Template-Language%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><p>base.html文件，比如上方的导航栏</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">html</span>></span><br><span class="line"><span class="tag"><<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>></span></span><br><span class="line"><span class="tag"><<span class="name">head</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">title</span>></span>{% block title %}My amazing site{% endblock %}<span class="tag"><!--<span class="name"-->title</span>></span><br><span class="line"><span class="tag"><!--<span class="name"-->head</span>></span><br><span class="line"><span class="tag"><<span class="name">body</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sidebar"</span>></span></span><br><span class="line">        {% block sidebar %}</span><br><span class="line">        <span class="tag"><<span class="name">ul</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>></span>Home<span class="tag"><!--<span class="name"-->a</span>></span><span class="tag"><!--<span class="name"-->li</span>><br><span class="line">            <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog/"</span>></span>Blog<span class="tag"><!--<span class="name"-->a</span>></span><span class="tag"><!--<span class="name"-->li</span>><br><span class="line">        <span class="tag"><!--<span class="name"-->ul</span>></span><br><span class="line">        {% endblock %}</span><br><span class="line">    <span class="tag"><!--<span class="name"-->div</span>></span><br><span class="line">    <span class="tag"><<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>></span></span><br><span class="line">        {% block content %}{% endblock %}</span><br><span class="line">    <span class="tag"><!--<span class="name"-->div</span>></span><br><span class="line"><span class="tag"><!--<span class="name"-->body</span>></span><br><span class="line"><span class="tag"><!--<span class="name"-->html</span>></span><br></pre></td></tr></tbody></table></figure></div>
<p>其它功能模块的html文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{% extends "base.html" %}</span><br><span class="line"></span><br><span class="line">{% block title %}My amazing blog{% endblock %}</span><br><span class="line"></span><br><span class="line">{% block content %}</span><br><span class="line">{% for entry in blog_entries %}</span><br><span class="line">    <span class="tag"><<span class="name">h2</span>></span>{{ entry.title }}<span class="tag"><!--<span class="name"-->h2</span>></span><br><span class="line">    <span class="tag"><<span class="name">p</span>></span>{{ entry.body }}<span class="tag"><!--<span class="name"-->p</span>></span><br><span class="line">{% endfor %}</span><br><span class="line">{% endblock %}</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{{ variable }}</span><br></pre></td></tr></tbody></table></figure></div>
<p>.或获取变量的属性</p>
<p>循环字典</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{% for k, v in defaultdict.items %}</span><br><span class="line">    Do something with k and v here...</span><br><span class="line">{% endfor %}</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{{ value|add:"2" }} 字符串或列表相加，注意：字符串是变成整数相加</span><br><span class="line">{{ first|add:second }}</span><br><span class="line">{{ value|addslashes }} 单引号前面加上/ 比如把 I’m using Django 变成 I\'m using Django</span><br><span class="line">{{ value|capfirst }} 首字母大写</span><br><span class="line">{{ value|center:"15" }} 15个占位符居中对齐</span><br><span class="line">{{ value|ljust:"10" }} 10个占位符左对齐</span><br><span class="line">{{ value|rjust:"10" }} 10个占位符右对齐</span><br><span class="line">{{ value|cut:" " }} 移除掉所有的空格，如要移除所有的A, {{ value|cut: “A” }}</span><br><span class="line">{{ value|date:"D d M Y" }} 参考</span><br><span class="line">{{ value|default:"nothing" }} 如果value是False的话，使用默认值</span><br><span class="line">{{ value|default_if_none:"nothing" }} 如果value是None的话，使用默认值</span><br><span class="line">{{ value|dictsort:"name" }} 对列表中的多个字典进行排序</span><br><span class="line">{{ value|divisibleby:"3" }} value能否被3整除，返回True或者False</span><br><span class="line">{{ value|filesizeformat }} 文件大小变成人类直观可读的方式，value是123456789，变成117.7MB</span><br><span class="line">{{ value|first }} 返回列表的第一个元素或字符串的第一个字符</span><br><span class="line">{{ value|last }} 返回列表的最后一个元素回字符串的最后一个字符</span><br><span class="line">floatformat 各种格式化</span><br><span class="line">force_escape 再关闭转义的区域，强制启用转义</span><br><span class="line">{{ value|get_digit:"2" }} 从右边往左取第2为，如果是123456789？</span><br><span class="line">{{ value|join:" // " }} 使用字符串连接列表 [‘a’, ‘b’, ‘c’]变成了 “a // b // c”</span><br><span class="line">{{ value|make_list }} 将数字或字符串循环到列表</span><br><span class="line">{{ value|random }} 字符串或列表中随机获取一个</span><br><span class="line">{{ value|safe }} 对value关闭自动转义</span><br><span class="line">{{ some_list|safeseq|join:", " }} 对列表中每一个对象关闭自动转义，然后字符串拼接</span><br><span class="line">{{ value|slice:":2" }} 获取列表的前两个元素，或字符串的前2为</span><br><span class="line">{{ value|slugify }} 支持英文的slug</span><br><span class="line">{{ value|stringformat:"E" }} 科学计数法表示</span><br><span class="line">{{ value|striptags }} 过滤掉html中的标签</span><br><span class="line">{{ blog_date|timesince:comment_date }} 人性化的时间显示</span><br><span class="line">{{ value|title }} 标题大写</span><br><span class="line">{{ value|truncatechars:9 }} 截取字符串，超过6后面会变成 ...</span><br><span class="line">{{ value|truncatechars_html:9 }} 截取html标签中的字符串，超过6后面变成...</span><br><span class="line">{{ value|truncatewords:2 }} 截取字单词，超过6后面会变成 ...</span><br><span class="line">{{ value|truncatewords_html:2 }} 截取html标签中的单词，超过6后面变成...</span><br><span class="line">{{ value|upper }} 字母变大写</span><br><span class="line">{{ name|lower }} 字母变小写</span><br><span class="line">{{ value|urlencode }} url编码</span><br><span class="line">把https://www.example.org/变成https%3A%2F%2Fwww.example.org%2F</span><br><span class="line">{{ value|urlizetrunc:15 }}</span><br><span class="line">把Check out www.djangoproject.com 变成Check out <span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.djangoproject.com"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>></span>www.djangopr...<span class="tag"><!--<span class="name"-->a</span>></span><br><span class="line">{{ value|wordcount }} 统计单词个数</span><br><span class="line">{{ value|wordwrap:5 }} 每一行限定多少个，多了就换行</span><br></pre></td></tr></tbody></table></figure></div>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>for循环标签</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag"><<span class="name">ul</span>></span></span><br><span class="line">{% for athlete in athlete_list %}</span><br><span class="line">    <span class="tag"><<span class="name">li</span>></span>{{ athlete.name }}<span class="tag"><!--<span class="name"-->li</span>></span><br><span class="line">{% endfor %}</span><br><span class="line"><span class="tag"><!--<span class="name"-->ul</span>></span><br></pre></td></tr></tbody></table></figure></div>

<p>以及for … empty</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{% thumbnail article.image "1920x1080" as im %}</span><br><span class="line">    <span class="tag"><<span class="name">img</span> <span class="attr">src</span>=<span class="string">"{{ im.url }}"</span> <span class="attr">alt</span>=<span class="string">"文章图片"</span> <span class="attr">class</span>=<span class="string">"card-img-top"</span>></span></span><br><span class="line">{% empty %}</span><br><span class="line">    <span class="tag"><<span class="name">img</span> <span class="attr">class</span>=<span class="string">"card-img-top"</span> <span class="attr">src</span>=<span class="string">"http://placehold.it/1920x1080"</span> <span class="attr">alt</span>=<span class="string">"图片大小"</span>></span></span><br><span class="line">{% endthumbnail %}</span><br></pre></td></tr></tbody></table></figure></div>

<p>if, elif, and else</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{% if athlete_list %}</span><br><span class="line">    Number of athletes: {{ athlete_list|length }}</span><br><span class="line">{% elif athlete_in_locker_room_list %}</span><br><span class="line">    Athletes should be out of the locker room soon!</span><br><span class="line">{% else %}</span><br><span class="line">    No athletes.</span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure></div>

<p>加上条件判断 ==, !=, <, >, <=, >=, in, not in, is, 以及 is not</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{% if athlete_list and coach_list or cheerleader_list %}</span><br><span class="line">{% if somevar == "x" %}</span><br><span class="line">  This appears if variable somevar equals the string "x"</span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure></div>

<p>cycle 循环常量或变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{% for o in some_list %}</span><br><span class="line">    <span class="tag"><<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"{% cycle 'row1' rowvalue2 'row3' %}"</span>></span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag"><!--<span class="name"-->tr</span>></span><br><span class="line">{% endfor %}</span><br></pre></td></tr></tbody></table></figure></div>

<p>filter过滤器，使用单个或多个过滤器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{% filter force_escape|lower %}</span><br><span class="line">    This text will be HTML-escaped, and will appear in all lowercase.</span><br><span class="line">{% endfilter %}</span><br></pre></td></tr></tbody></table></figure></div>

<p>firstof 输出第一个为True的值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{% firstof var1 var2 var3 %}</span><br></pre></td></tr></tbody></table></figure></div>

<p>extends继承父模板</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{% extends "./base2.html" %}</span><br><span class="line">{% extends "../base1.html" %}</span><br><span class="line">{% extends "./my/base3.html" %}</span><br></pre></td></tr></tbody></table></figure></div>

<p>now 展示当前日期或时间</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{% now "jS F Y H:i" %}</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="HTML转义"><a href="#HTML转义" class="headerlink" title="HTML转义"></a>HTML转义</h2><p>安全起见，默认开启自动转义；有如下2种方式关闭</p>
<p>对于变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{{ article.get_markdown|safe }}</span><br></pre></td></tr></tbody></table></figure></div>
<p>对于block(区域)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Auto-escaping is on by default. Hello {{ name }}</span><br><span class="line"></span><br><span class="line">{% autoescape off %}</span><br><span class="line">    This will not be auto-escaped: {{ data }}.</span><br><span class="line"></span><br><span class="line">    Nor this: {{ other_data }}</span><br><span class="line">    {% autoescape on %}</span><br><span class="line">        Auto-escaping applies again: {{ name }}</span><br><span class="line">    {% endautoescape %}</span><br><span class="line">{% endautoescape %}</span><br></pre></td></tr></tbody></table></figure></div>
<p>在已关闭转义的区域中启用转义</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{% autoescape off %}</span><br><span class="line">    {{ title|escape }}</span><br><span class="line">{% endautoescape %}</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>比如QuerySet中的方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{% for tag in article.tags.all %}</span><br><span class="line">    <span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>></span><span class="tag"><<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge badge-info"</span>></span>{{ tag }}<span class="tag"><!--<span class="name"-->span</span>></span><span class="tag"><!--<span class="name"-->a</span>><br><span class="line">{% endfor %}</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF解决vue请求跨域问题</title>
    <url>/2019/10/16/DRF%E8%A7%A3%E5%86%B3vue%E8%AF%B7%E6%B1%82%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><p>在浏览器上当前访问的网站向另一个网站发送请求获取数据的过程就是跨域请求。<br>跨域是浏览器同源策略造成；协议，域名，端口，三者有一不同就会产出跨域。</p>
<h3 id="怎么解决跨域"><a href="#怎么解决跨域" class="headerlink" title="怎么解决跨域"></a>怎么解决跨域</h3><p>前端JSONP和CORS</p>
<h4 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS(跨域资源共享)"></a>CORS(跨域资源共享)</h4><p>它允许浏览器向跨源服务器发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>
<p>整个CORS通信过程都是浏览器自动完成的，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多一次附加的请求，但用户不会有感觉。因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p>
<h4 id="django后端解决"><a href="#django后端解决" class="headerlink" title="django后端解决"></a>django后端解决</h4><h5 id="安装第三方包"><a href="#安装第三方包" class="headerlink" title="安装第三方包"></a>安装第三方包</h5><p>pip install django-cors-headers</p>
<h5 id="配置settings-py文件"><a href="#配置settings-py文件" class="headerlink" title="配置settings.py文件"></a>配置settings.py文件</h5><h6 id="在INSTALLED-APPS里添加-“corsheaders”"><a href="#在INSTALLED-APPS里添加-“corsheaders”" class="headerlink" title="在INSTALLED_APPS里添加 “corsheaders”"></a>在INSTALLED_APPS里添加 “corsheaders”</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'corsheaders'</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></div>
<h6 id="在MIDDLEWARE-CLASSES添加中间件"><a href="#在MIDDLEWARE-CLASSES添加中间件" class="headerlink" title="在MIDDLEWARE_CLASSES添加中间件"></a>在MIDDLEWARE_CLASSES添加中间件</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">MIDDLEWARE_CLASSES = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>,</span><br><span class="line">    ...</span><br><span class="line">  )</span><br></pre></td></tr></tbody></table></figure></div>
<p>最好添加到第一行，要放在csrfview之前。</p>
<h6 id="配置白名单-配置settings-py"><a href="#配置白名单-配置settings-py" class="headerlink" title="配置白名单(配置settings.py)"></a>配置白名单(配置settings.py)</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 单个配置</span></span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    <span class="string">'域名'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则配置</span></span><br><span class="line">CORS_ORIGIN_REGEX_WHITELIST = (<span class="string">r'^(https?://)?(\w+\.)?jim\.com $'</span>)</span><br></pre></td></tr></tbody></table></figure></div>

<h6 id="允许所有主机跨域"><a href="#允许所有主机跨域" class="headerlink" title="允许所有主机跨域"></a>允许所有主机跨域</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure></div>

<h6 id="允许携带cookie"><a href="#允许携带cookie" class="headerlink" title="允许携带cookie"></a>允许携带cookie</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">CORS_ALLOW_CREDENTALS = <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
        <category>restframework</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Http协议</title>
    <url>/2019/03/10/Http%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p>Http是一种网络协议，而且是无状态的超文本协议，基于Tcp/Ip协议的应用层协议。</p>
<h4 id="HTTP-get和post的区别"><a href="#HTTP-get和post的区别" class="headerlink" title="HTTP get和post的区别"></a>HTTP get和post的区别</h4><ol>
<li>get是从服务器上获取数据，post是向服务器传送数据。</li>
<li>get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。</li>
<li>get安全性非常低，post安全性较高。但是执行效率却比Post方法好。<ol>
<li>安全性:get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。</li>
<li>效率:get产生一个TCP数据包；post产生两个TCP数据包。对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</li>
</ol>
</li>
</ol>
<h4 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h4><h5 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h5><p>HTTP 协议是以 ASCII 码传输，建立在 TCP/IP 协议之上的应用层规范。<br>规范把 HTTP 请求分为三个部分：</p>
<ol>
<li>状态行</li>
<li>请求头</li>
<li>消息主体</li>
</ol>
<h5 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h5><p>HTTP 响应与 HTTP 请求相似，HTTP响应也由3个部分构成，分别是：</p>
<ol>
<li>状态行</li>
<li>响应头(Response Header)</li>
<li>响应正文</li>
</ol>
<h4 id="HTTP响应状态码"><a href="#HTTP响应状态码" class="headerlink" title="HTTP响应状态码"></a>HTTP响应状态码</h4><p><a href="http.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http.jpg" class="lazyload"></a></p>
<h5 id="1XX-通知"><a href="#1XX-通知" class="headerlink" title="1XX: 通知"></a>1XX: 通知</h5><p>1XX系列响应代码仅在与HTTP服务器沟通时使用。</p>
<h5 id="2XX-成功"><a href="#2XX-成功" class="headerlink" title="2XX: 成功"></a>2XX: 成功</h5><p>2XX系列响应代码表明操作成功了。</p>
<h5 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX: 重定向"></a>3XX: 重定向</h5><p>3XX系列响应代码表明：客户端需要做些额外工作才能得到所需要的资源。它们通常用于GET请求。他们通常告诉客户端需要向另一个URI发送GET请求，才能得到所需的表示。那个URI就包含在Location响应报头里。</p>
<h5 id="4XX-客户端错误"><a href="#4XX-客户端错误" class="headerlink" title="4XX: 客户端错误"></a>4XX: 客户端错误</h5><p>这些响应代码表明客户端出现错误。不是认证信息有问题，就是表示格式或HTTP库本身有问题。客户端需要自行改正。</p>
<h5 id="5XX-服务端错误"><a href="#5XX-服务端错误" class="headerlink" title="5XX: 服务端错误"></a>5XX: 服务端错误</h5><p>这些响应代码表明服务器端出现错误。一般来说，这些代码意味着服务器处于不能执行客户端请求的状态，此时客户端应稍后重试。有时，服务器能够估计客户端应在多久之后重试。并把该信息放在Retry-After响应报头里。</p>
<h4 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h4><ol>
<li>统一资源定位符(uniform resource locator URL)</li>
<li>统一资源标识符(uniform resource identifier URI)</li>
</ol>
<p>可以这样理解URI表示的是一个抽象的地址，URL表示的是一个详细的地址。 抽象的地址：湖南省长沙市（这是一个抽象的地址，相当于URI）<br>详细的地址：湖南省长沙市雨花区香樟路22号（这是一个详细的地址，相当于URL） 为什么URL是URI的子集，雨花区的香樟路22号（URL）属于湖南省长沙市（URI），<br>那么放到web上 <a href="http://www.csdn.net是一个URI（它只说明了服务器的地址，没有具体到文件是什么类型）" target="_blank" rel="noopener">www.csdn.net是一个URI（它只说明了服务器的地址，没有具体到文件是什么类型）</a><br>那么<a href="http://www.csdn.net/image/logo.…" target="_blank" rel="noopener">www.csdn.net/image/logo.…</a> 这样一来URL和URI的区别就很清晰了</p>
<h4 id="Keep-Alive-持久连接"><a href="#Keep-Alive-持久连接" class="headerlink" title="Keep-Alive 持久连接"></a>Keep-Alive 持久连接</h4><p>HTTP 协议采用“请求-应答”模式，当使用普通模式，即非 Keep-Alive 模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接（HTTP 协议为无连接的协议）；</p>
<p>当使用 Keep-Alive 模式（又称持久连接、连接重用）时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接。</p>
<ol>
<li>HTTP Keep-Alive 简单说就是保持当前的TCP连接，避免了重新建立连接。</li>
<li>HTTP 长连接不可能一直保持，例如 Keep-Alive: timeout=5, max=100，表示这个TCP通道可以保持5秒，max=100，表示这个长连接最多接收100次请求就断开。</li>
<li></li>
</ol>
<h4 id="从输入URL到页面加载完成的过程"><a href="#从输入URL到页面加载完成的过程" class="headerlink" title="从输入URL到页面加载完成的过程"></a>从输入URL到页面加载完成的过程</h4><ol>
<li>首先做DNS解析，通过域名获得IP地址。</li>
<li>接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了。</li>
<li>TCP 握手结束后会进行 TLS 握手，然后就开始正式的传输数据。</li>
<li>数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件。</li>
<li>首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错。</li>
<li>浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件。</li>
<li>文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 script 标签的话，会判断是否存在 async 或者 defer ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP 2.0 协议的话会极大的提高多图的下载效率。</li>
<li>初始的 HTML 被完全加载和解析后会触发 DOMContentLoaded 事件。</li>
<li>CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西。</li>
<li>在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了。</li>
<li>四次挥手断开连接。</li>
</ol>
<h5 id="简单的讲一次完整的http连接就是从url输入到页面加载的全过程"><a href="#简单的讲一次完整的http连接就是从url输入到页面加载的全过程" class="headerlink" title="简单的讲一次完整的http连接就是从url输入到页面加载的全过程"></a>简单的讲一次完整的http连接就是从url输入到页面加载的全过程</h5><pre><code>1. DNS域名解析: 浏览器将URL解析出相对应的IP地址和端口号。
    1. 从本地浏览器的DNS缓存中查找
    2. 在系统DNS缓存中查找
    3. 从路由器DNS缓存中查找
    4. 网络运营商DNS缓存中查找
    5. 递归搜索
2. TCP三次握手建立连接。
3. TLS握手，加密传输。
4. 发送HTTP请求，服务器响应请求返回数据文件。
5. 浏览器解析文件，渲染生成页面。
6. 四次挥手断开连接。</code></pre><h4 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h4><h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><p>Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端会把Cookie保存起来。</p>
<p>当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。</p>
<p>如果没有设置Cookie失效日期,它们仅保存到关闭浏览器程序为止.</p>
<p>Cookie存储的数据量很受限制,大多数浏览器支持最大容量为4K</p>
<p>Cookie 类型</p>
<ol>
<li>普通cookie： 服务端和js都可以创建，都可以访问。</li>
<li>HttpOnly cookie: 只能由服务端创建，JS无法读取。</li>
<li>安全的cookie（https）： 服务端和JS都可以创建，JS仅在HTTPS下访问。</li>
</ol>
<h5 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h5><p>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。</p>
<h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><p>1，session 在服务器端，cookie 在客户端（浏览器）<br>2，session 默认被存在在服务器的一个文件里（不是内存）<br>3，session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）<br>4，session 可以放在 文件、数据库、或内存中都可以。<br>5，用户验证这种场合一般会用 session</p>
</body></html>]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下安装mysql以及开放远程连接</title>
    <url>/2018/06/09/Linux%E4%B8%8B%E5%AE%89%E8%A3%85mysql%E4%BB%A5%E5%8F%8A%E5%BC%80%E6%94%BE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="安装MYSQL"><a href="#安装MYSQL" class="headerlink" title="安装MYSQL"></a>安装MYSQL</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></tbody></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">VALIDATE PASSWORD PLUGIN can be used to <span class="built_in">test</span> passwords...</span><br><span class="line">Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No: N (我的选项)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">Please <span class="built_in">set</span> the password <span class="keyword">for</span> root here...</span><br><span class="line">New password: (输入密码)</span><br><span class="line">Re-enter new password: (重复输入)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to <span class="built_in">log</span> into MySQL without having to have</span><br><span class="line">a user account created <span class="keyword">for</span> them...</span><br><span class="line">Remove anonymous users? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : N (我的选项)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4</span></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line"><span class="string">'localhost'</span>. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network...</span><br><span class="line">Disallow root login remotely? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : Y (我的选项)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5</span></span><br><span class="line">By default, MySQL comes with a database named <span class="string">'test'</span> that</span><br><span class="line">anyone can access...</span><br><span class="line">Remove <span class="built_in">test</span> database and access to it? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : N (我的选项)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6</span></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line">Reload privilege tables now? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : Y (我的选项)</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h3><p>编辑文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></tbody></table></figure></div>
<p>把下面内容注释掉</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span>-address           = 127.0.0.1</span><br></pre></td></tr></tbody></table></figure></div>

<p>进入MYSQL<br>查看用户权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host <span class="keyword">from</span> mysql.user;</span><br></pre></td></tr></tbody></table></figure></div>

<p>旧版</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> root@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'root'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></tbody></table></figure></div>

<p>新版<br>8.0版本更换了权限设置和密码加密协议，因此会报出42000错误：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; <span class="keyword">check</span> the <span class="keyword">manual</span> that corresponds <span class="keyword">to</span> your MySQL <span class="keyword">server</span> <span class="keyword">version</span> <span class="keyword">for</span> the <span class="keyword">right</span> syntax <span class="keyword">to</span> <span class="keyword">use</span> near <span class="string">'IDENTIFIED BY '</span><span class="keyword">password</span><span class="string">' WITH GRANT OPTION'</span> <span class="keyword">at</span> line <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>解决方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">mysql> CREATE USER 'root'@'%' IDENTIFIED BY 'password';</span><br><span class="line">mysql> GRANT ALL ON db1.* TO 'root'@'%';</span><br><span class="line">mysql> FLUSH PRIVILEGES;</span><br></pre></td></tr></tbody></table></figure></div>


<p>重启Mysql</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo /etc/init.d/mysql restart</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下安装redis以及开放远程连接</title>
    <url>/2018/07/03/Linux%E4%B8%8B%E5%AE%89%E8%A3%85redis%E4%BB%A5%E5%8F%8A%E5%BC%80%E6%94%BE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install redis-server</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="重启Redis"><a href="#重启Redis" class="headerlink" title="重启Redis"></a>重启Redis</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo service redis restart</span><br></pre></td></tr></tbody></table></figure></div>


<h3 id="查看运行状态"><a href="#查看运行状态" class="headerlink" title="查看运行状态"></a>查看运行状态</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo systemctl status redis</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="设置远程连接"><a href="#设置远程连接" class="headerlink" title="设置远程连接"></a>设置远程连接</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/redis/redis.conf</span><br></pre></td></tr></tbody></table></figure></div>
<p>将第70行bind注释掉，第90行的protected-mode改为no</p>
<p>然后重启Redis即可远程连接</p>
</body></html>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt的Led控件显示库</title>
    <url>/2020/10/16/PyQt%E7%9A%84Led%E6%8E%A7%E4%BB%B6%E6%98%BE%E7%A4%BA%E5%BA%93/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="控件说明"><a href="#控件说明" class="headerlink" title="控件说明"></a>控件说明</h3><p>在Github上，偶然发现了一个基于PyQt5的第三方Led指示灯控件库，使用起来非常方便，控件外观也比较漂亮，更难能可贵的是作者源代码写得比较简洁，仅仅才约200行左右，可以作为一个在PyQt中写自定义控件方法的非常好的学习例子。这个控件具有以下特点：</p>
<ol>
<li>提供了3种外形可供选择，分别为：’capsule’, ‘circle’, ‘rectangle’等</li>
<li>提供了7种颜色可供选择，分别为：’blue’, ‘green’, ‘orange’, ‘purple’, ‘red’, ‘yellow’等</li>
</ol>
<h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install pyqt-led</span><br></pre></td></tr></tbody></table></figure></div>
<p>在代码中使用时，只需使用以下语句导入该库的LED类即可：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyqt_led <span class="keyword">import</span> led</span><br></pre></td></tr></tbody></table></figure></div>
<p>在该库中，提供了几个主要的方法函数，包括set_on_color、set_off_color、set_shape、turn_on、turn_off等函数，分别设置Led的开/关颜色、形状及设置开、关状态等。</p>
<h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import numpy as np</span><br><span class="line">from pyqt_led import Led</span><br><span class="line"></span><br><span class="line">class Demo(QWidget):</span><br><span class="line">    def __init__(self, parent=None):</span><br><span class="line">        QWidget.__init__(self, parent)</span><br><span class="line">        self._shape = np.array(['capsule', 'circle', 'rectangle'])</span><br><span class="line">        self._color = np.array(['blue', 'green', 'orange', 'purple', 'red',</span><br><span class="line">                                'yellow'])</span><br><span class="line">        self._layout = QGridLayout(self)</span><br><span class="line">        self._create_leds()</span><br><span class="line">        self._arrange_leds()</span><br><span class="line">        self.resize(400, 200)</span><br><span class="line">        self.setWindowTitle('pyqt-led Demo')</span><br><span class="line"></span><br><span class="line">    def keyPressEvent(self, e):</span><br><span class="line">        if e.key() == Qt.Key_Escape:</span><br><span class="line">            self.close()</span><br><span class="line"></span><br><span class="line">    def _create_leds(self):</span><br><span class="line">        for s in self._shape:</span><br><span class="line">            for c in self._color:</span><br><span class="line">                exec('self._{}_{} = Led(self, on_color=Led.{}, shape=Led.{}, build="debug")'</span><br><span class="line">                     .format(s, c, c, s))</span><br><span class="line">                exec('self._{}_{}.setFocusPolicy(Qt.NoFocus)'.format(s, c))</span><br><span class="line">                exec('self._{}_{}.turn_on(True)'.format(s, c))</span><br><span class="line"></span><br><span class="line">    def _arrange_leds(self):</span><br><span class="line">        for r in range(3):</span><br><span class="line">            for c in range(6):</span><br><span class="line">                exec('self._layout.addWidget(self._{}_{}, {}, {}, 1, 1, \</span><br><span class="line">                      Qt.AlignCenter)'</span><br><span class="line">                     .format(self._shape[r], self._color[c], r, c))</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">demo = Demo()</span><br><span class="line">demo.show()</span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></tbody></table></figure></div>
<p>运行这个程序后，即可出现本文开头所示的在一个窗口上显示了不同形状、不同颜色的Led的窗口。默认运行时显示的为全亮状态，当设置为全灭状态时，如下图所示：</p>
<p>在代码中，Led类实例化时，其构造函数原型如下所示：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">Led(parent, on_color=green, off_color=black, shape=rectangle, build=<span class="string">'release'</span>)</span><br></pre></td></tr></tbody></table></figure></div>

<p>可传入父窗口、初始的亮颜色、灭颜色、形状及状态参数。</p>
<p>对于需要在程序开发中使用指示灯的情况，如显示各种程序的运行状态等，应该说这是一个比较实用的库了。当然，由于源代码比较简单，你也可以在其基础上进一步修改订制，比如添加其它形状、颜色等选项设置，以满足自己的项目使用要求。</p>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Pyqt5</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyqt5嵌套窗口切换</title>
    <url>/2020/05/07/Pyqt5%E5%B5%8C%E5%A5%97%E7%AA%97%E5%8F%A3%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="使用designer设计"><a href="#使用designer设计" class="headerlink" title="使用designer设计"></a>使用designer设计</h3><p>使用QstackerWidget 进行多界面切换</p>
<p>在stackedWidget对象中插入页，即可实现多页面。<br>将控件放入指定对应页面。<br><a href="designer%E8%AE%BE%E8%AE%A1%E5%9B%BE.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="designer%E8%AE%BE%E8%AE%A1%E5%9B%BE.png" class="lazyload"></a></p>
<h3 id="Ui代码"><a href="#Ui代码" class="headerlink" title="Ui代码"></a>Ui代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_MainWindow</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        MainWindow.setObjectName(<span class="string">"MainWindow"</span>)</span><br><span class="line">        MainWindow.resize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">        self.centralwidget.setObjectName(<span class="string">"centralwidget"</span>)</span><br><span class="line">        self.B1 = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">        self.B1.setGeometry(QtCore.QRect(<span class="number">50</span>, <span class="number">180</span>, <span class="number">75</span>, <span class="number">23</span>))</span><br><span class="line">        self.B1.setObjectName(<span class="string">"B1"</span>)</span><br><span class="line">        self.B2 = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">        self.B2.setGeometry(QtCore.QRect(<span class="number">50</span>, <span class="number">280</span>, <span class="number">75</span>, <span class="number">23</span>))</span><br><span class="line">        self.B2.setObjectName(<span class="string">"B2"</span>)</span><br><span class="line">        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)</span><br><span class="line">        self.stackedWidget.setGeometry(QtCore.QRect(<span class="number">200</span>, <span class="number">60</span>, <span class="number">551</span>, <span class="number">421</span>))</span><br><span class="line">        self.stackedWidget.setObjectName(<span class="string">"stackedWidget"</span>)</span><br><span class="line">        self.page1 = QtWidgets.QWidget()</span><br><span class="line">        self.page1.setObjectName(<span class="string">"page1"</span>)</span><br><span class="line">        self.frame1 = QtWidgets.QFrame(self.page1)</span><br><span class="line">        self.frame1.setGeometry(QtCore.QRect(<span class="number">180</span>, <span class="number">110</span>, <span class="number">221</span>, <span class="number">141</span>))</span><br><span class="line">        self.frame1.setStyleSheet(<span class="string">"background-color: rgb(255, 255, 127);"</span>)</span><br><span class="line">        self.frame1.setFrameShape(QtWidgets.QFrame.StyledPanel)</span><br><span class="line">        self.frame1.setFrameShadow(QtWidgets.QFrame.Raised)</span><br><span class="line">        self.frame1.setObjectName(<span class="string">"frame1"</span>)</span><br><span class="line">        self.stackedWidget.addWidget(self.page1)</span><br><span class="line">        self.page2 = QtWidgets.QWidget()</span><br><span class="line">        self.page2.setObjectName(<span class="string">"page2"</span>)</span><br><span class="line">        self.frame2 = QtWidgets.QFrame(self.page2)</span><br><span class="line">        self.frame2.setGeometry(QtCore.QRect(<span class="number">149</span>, <span class="number">89</span>, <span class="number">251</span>, <span class="number">191</span>))</span><br><span class="line">        self.frame2.setStyleSheet(<span class="string">"background-color: rgb(255, 0, 127);"</span>)</span><br><span class="line">        self.frame2.setFrameShape(QtWidgets.QFrame.StyledPanel)</span><br><span class="line">        self.frame2.setFrameShadow(QtWidgets.QFrame.Raised)</span><br><span class="line">        self.frame2.setObjectName(<span class="string">"frame2"</span>)</span><br><span class="line">        self.stackedWidget.addWidget(self.page2)</span><br><span class="line">        MainWindow.setCentralWidget(self.centralwidget)</span><br><span class="line">        self.menubar = QtWidgets.QMenuBar(MainWindow)</span><br><span class="line">        self.menubar.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">23</span>))</span><br><span class="line">        self.menubar.setObjectName(<span class="string">"menubar"</span>)</span><br><span class="line">        MainWindow.setMenuBar(self.menubar)</span><br><span class="line">        self.statusbar = QtWidgets.QStatusBar(MainWindow)</span><br><span class="line">        self.statusbar.setObjectName(<span class="string">"statusbar"</span>)</span><br><span class="line">        MainWindow.setStatusBar(self.statusbar)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(MainWindow)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(MainWindow)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        MainWindow.setWindowTitle(_translate(<span class="string">"MainWindow"</span>, <span class="string">"MainWindow"</span>))</span><br><span class="line">        self.B1.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"一号色"</span>))</span><br><span class="line">        self.B2.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"二号色"</span>))</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="控制代码"><a href="#控制代码" class="headerlink" title="控制代码"></a>控制代码</h3><p>button按钮绑定对应事件进行页面展示。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"><span class="keyword">from</span> win <span class="keyword">import</span> Ui_MainWindow</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWin</span><span class="params">(QMainWindow, Ui_MainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(MainWin, self).__init__(parent)</span><br><span class="line">        self.setupUi(self)</span><br><span class="line"></span><br><span class="line">        self.B1.clicked.connect(<span class="keyword">lambda</span>: self.stackedWidget.setCurrentIndex(<span class="number">0</span>))  <span class="comment"># 点击按钮1展示第一个frame</span></span><br><span class="line">        self.B2.clicked.connect(<span class="keyword">lambda</span>: self.stackedWidget.setCurrentIndex(<span class="number">1</span>))  <span class="comment"># 点击按钮2展示第二个frame</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = MainWin()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><a href="b1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="b1.png" class="lazyload"></a><br><a href="b2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="b2.png" class="lazyload"></a></p>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Pyqt5</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础语法</title>
    <url>/2018/02/10/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h2 id="input输入"><a href="#input输入" class="headerlink" title="input输入"></a>input输入</h2><ul>
<li>input()的小括号中放入的是，提示信息，用来在获取数据之前给用户的一个简单提示</li>
<li>input()在从键盘获取了数据以后，会存放到等号右边的变量中</li>
<li>input()会把用户输入的任何值都作为字符串来对待</li>
<li>注意：在python2中还有一个raw_input()输入，但到python3中没有了</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">str = input(<span class="string">"请输入："</span>);</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"你输入的内容是: "</span>, str)</span><br></pre></td></tr></tbody></table></figure></div>
<ul>
<li>这会产生如下的对应着输入的结果<blockquote>
<p>请输入：Hello Python!<br>你输入的内容是:  Hello Python!</p>
</blockquote>
</li>
</ul>
<h2 id="Print-输出"><a href="#Print-输出" class="headerlink" title="Print()输出"></a>Print()输出</h2><ul>
<li>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=””：</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">x=<span class="string">"a"</span></span><br><span class="line">y=<span class="string">"b"</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line">print( x )</span><br><span class="line">print( y )</span><br><span class="line"></span><br><span class="line">print(<span class="string">'---------'</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line">print( x, end=<span class="string">" "</span> )</span><br><span class="line">print( y, end=<span class="string">" "</span> )</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时输出多个变量</span></span><br><span class="line">print(x,y)</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2><ul>
<li>python最具特色的就是使用缩进来表示代码块，不需要使用大括号({})。</li>
<li>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"True"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"False"</span>)</span><br></pre></td></tr></tbody></table></figure></div></li>
<li>以下代码最后一行语句缩进数的空格数不一致，会导致运行错误：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Answer"</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"True"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Answer"</span>)</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">"False"</span>)    <span class="comment"># 缩进不一致，会导致运行错误</span></span><br></pre></td></tr></tbody></table></figure></div></li>
<li>以上程序由于缩进不一致，执行后会出现类似以下错误：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">File <span class="string">"test.py"</span>, line <span class="number">6</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"False"</span>)    <span class="comment"># 缩进不一致，会导致运行错误</span></span><br><span class="line">IndentationError: unindent does <span class="keyword">not</span> match any outer indentation level</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><ul>
<li>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></tbody></table></figure></div></li>
<li>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">total = [<span class="string">'item_one'</span>, <span class="string">'item_two'</span>, <span class="string">'item_three'</span>,</span><br><span class="line">        <span class="string">'item_four'</span>, <span class="string">'item_five'</span>]</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><ul>
<li>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</li>
<li>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</li>
<li>记住：空行也是程序代码的一部分。</li>
</ul>
<h2 id="format的格式化函数（了解）"><a href="#format的格式化函数（了解）" class="headerlink" title="format的格式化函数（了解）"></a>format的格式化函数（了解）</h2><ul>
<li>格式化字符串的函数 str.format()，它增强了字符串格式化的功能。</li>
<li>基本语法是通过 {} 和 : 来代替以前的 % 。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">>>><span class="string">"{} {}"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)    <span class="comment"># 不设置指定位置，按默认顺序</span></span><br><span class="line"><span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">>>> </span><span class="string">"{0} {1}"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">>>> </span><span class="string">"{1} {0} {1}"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="string">'world hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">>>> </span>print(<span class="string">"网站名：{name}, 地址 {url}"</span>.format(name=<span class="string">"百度"</span>, url=<span class="string">"www.baidu.com"</span>)) <span class="comment">#指定参数名</span></span><br><span class="line"><span class="string">'网站名：百度, 地址 www.baidu.com'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">>>>site = {<span class="string">"name"</span>: <span class="string">"百度"</span>, <span class="string">"url"</span>: <span class="string">"www.baidu.com"</span>}</span><br><span class="line">>>>print(<span class="string">"网站名：{name}, 地址 {url}"</span>.format(**site)) <span class="comment"># 通过字典设置参数</span></span><br><span class="line"><span class="string">'网站名：百度, 地址 www.baidu.com'</span></span><br><span class="line"></span><br><span class="line">>>>my_list = [<span class="string">'百度'</span>, <span class="string">'www.baidu.com'</span>]</span><br><span class="line">>>>print(<span class="string">"网站名：{0[0]}, 地址 {0[1]}"</span>.format(my_list))  <span class="comment"># "0" 是必须的 通过列表索引设置参数</span></span><br><span class="line"><span class="string">'网站名：百度, 地址 www.baidu.com'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">>>> </span>print(<span class="string">"{:.2f}"</span>.format(<span class="number">3.1415926</span>)); <span class="comment">#数字格式化</span></span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="Python中的注释有单行注释和多行注释"><a href="#Python中的注释有单行注释和多行注释" class="headerlink" title="Python中的注释有单行注释和多行注释"></a>Python中的注释有单行注释和多行注释</h2><ul>
<li>python中单行注释采用 # 开头。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">name = <span class="string">"Madisetti"</span> <span class="comment"># 这是一个注释</span></span><br></pre></td></tr></tbody></table></figure></div></li>
<li>python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul>
<li>在Python里，标识符: 由字母、数字、下划线组成,但不能以数字开头。</li>
<li>Python 中的标识符是区分大小写的。</li>
<li>特殊标识符：</li>
<li>以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入；</li>
<li>以双下划线开头的 <strong>foo 代表类的私有成员；以双下划线开头和结尾的 __foo</strong> 代表 Python 里特殊方法专用的标识，如 <strong>init</strong>() 代表类的构造函数。</li>
<li>python保留字： 保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">>>> </span><span class="keyword">import</span> keyword</span><br><span class="line"><span class="meta">>>> </span>keyword.kwlist</span><br><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>,</span><br><span class="line"><span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>,</span><br><span class="line"><span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'if'</span>,</span><br><span class="line"><span class="string">'return'</span>,<span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</li>
<li>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</li>
<li>等号（=）用来给变量赋值。</li>
<li>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：</li>
<li>实例(Python 3.0+)<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">counter = <span class="number">100</span>          <span class="comment"># 整型变量</span></span><br><span class="line">miles   = <span class="number">1000.0</span>       <span class="comment"># 浮点型变量</span></span><br><span class="line">name    = <span class="string">"demo"</span>     <span class="comment"># 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (counter)</span><br><span class="line"><span class="keyword">print</span> (miles)</span><br><span class="line"><span class="keyword">print</span> (name)</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<p>执行以上程序会输出如下结果:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">1000.0</span></span><br><span class="line">demo</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h3><ul>
<li>Python允许你同时为多个变量赋值。例如：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure></div></li>
<li>以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。</li>
<li>您也可以为多个对象指定多个变量。例如：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">"demo"</span></span><br></pre></td></tr></tbody></table></figure></div></li>
<li>以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 “demo” 分配给变量 c。</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pipenv管理Python虚拟环境</title>
    <url>/2018/05/12/Pipenv%E7%AE%A1%E7%90%86Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><a id="more"></a>
<h2 id="安装pipenv"><a href="#安装pipenv" class="headerlink" title="安装pipenv"></a>安装pipenv</h2><p>首先，确保你已经正确安装python3和pip3</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[root@shiyanlou ~]# python3 -V</span><br><span class="line">Python 3.7.2</span><br><span class="line">[root@shiyanlou ~]# pip3 -V</span><br><span class="line">pip 19.0.1 from /usr/local/python3/lib/python3.7/site-packages/pip (python 3.7)</span><br><span class="line">[root@shiyanlou ~]#</span><br></pre></td></tr></tbody></table></figure></div>
<p>然后，Linux下pip3 install pipenv</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[root@shiyanlou ~]# pip3 install pipenv</span><br><span class="line">Looking in indexes: http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">Collecting pipenv</span><br><span class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/13/b4/3ffa55f77161cff9a5220f162670f7c5eb00df52e00939e203f601b0f579/pipenv-2018.11.26-py3-none-any.whl (5.2MB)</span><br><span class="line">    100% |████████████████████████████████| 5.2MB 4.0MB/s</span><br><span class="line">Requirement already satisfied: certifi in /usr/local/python3/lib/python3.7/site-packages (from pipenv) (2018.11.29)</span><br><span class="line">Requirement already satisfied: setuptools>=36.2.1 in /usr/local/python3/lib/python3.7/site-packages (from pipenv) (40.6.2)</span><br><span class="line">Requirement already satisfied: pip>=9.0.1 in /usr/local/python3/lib/python3.7/site-packages (from pipenv) (18.1)</span><br><span class="line">Requirement already satisfied: virtualenv in /usr/local/python3/lib/python3.7/site-packages (from pipenv) (16.2.0)</span><br><span class="line">Requirement already satisfied: virtualenv-clone>=0.2.5 in /usr/local/python3/lib/python3.7/site-packages (from pipenv) (0.4.0)</span><br><span class="line">Installing collected packages: pipenv</span><br><span class="line">Successfully installed pipenv-2018.11.26</span><br><span class="line">[root@shiyanlou ~]#</span><br></pre></td></tr></tbody></table></figure></div>
<p>pipenv依赖psutil, virtualenv-clone, pew, certifi, urllib3, chardet, requests, mccabe, pyflakes, pycodestyle, flake8等第三方模块</p>
<h2 id="Pipfile和Pipfile-lock"><a href="#Pipfile和Pipfile-lock" class="headerlink" title="Pipfile和Pipfile.lock"></a>Pipfile和Pipfile.lock</h2><h3 id="Pipfile-简明地显示项目环境和依赖包"><a href="#Pipfile-简明地显示项目环境和依赖包" class="headerlink" title="Pipfile, 简明地显示项目环境和依赖包"></a>Pipfile, 简明地显示项目环境和依赖包</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[[source]]</span><br><span class="line">name = "pypi"</span><br><span class="line">url = "https://mirrors.aliyun.com/pypi/simple/"  # 指定国内pip源，不然会慢死人的</span><br><span class="line">verify_ssl = true</span><br><span class="line"></span><br><span class="line">[dev-packages]  # 开发环境</span><br><span class="line"></span><br><span class="line">[packages]  # 生产环境</span><br><span class="line">requests = "*"  # *表示最新版本</span><br><span class="line">django = "*"</span><br><span class="line"></span><br><span class="line">[requires]  </span><br><span class="line">python_version = "3.7"  # python版本</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="Pipfile-lock-详细记录环境依赖，并且利用了Hash算法保证了它完整对应关系"><a href="#Pipfile-lock-详细记录环境依赖，并且利用了Hash算法保证了它完整对应关系" class="headerlink" title="Pipfile.lock, 详细记录环境依赖，并且利用了Hash算法保证了它完整对应关系"></a>Pipfile.lock, 详细记录环境依赖，并且利用了Hash算法保证了它完整对应关系</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    "_meta": {</span><br><span class="line">        "hash": {</span><br><span class="line">            "sha256": "d737a1ef2f8b591f86cd0fa6a8cb48918f742d60df2a394ebc3d23aff4748999"</span><br><span class="line">        },</span><br><span class="line">        "pipfile-spec": 6,</span><br><span class="line">        "requires": {</span><br><span class="line">            "python_version": "3.7"</span><br><span class="line">        },</span><br><span class="line">        "sources": [</span><br><span class="line">            {</span><br><span class="line">                "name": "pypi",</span><br><span class="line">                "url": "https://pypi.org/simple",</span><br><span class="line">                "verify_ssl": true</span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    },</span><br><span class="line">    "default": {</span><br><span class="line">        "certifi": {</span><br><span class="line">            "hashes": [</span><br><span class="line">                "sha256:47f9c83ef4c0c621eaef743f133f09fa8a74a9b75f037e8624f83bd1b6626cb7",</span><br><span class="line">                "sha256:993f830721089fef441cdfeb4b2c8c9df86f0c63239f06bd025a76a7daddb033"</span><br><span class="line">            ],</span><br><span class="line">            "version": "==2018.11.29"</span><br><span class="line">        },</span><br><span class="line">        "chardet": {</span><br><span class="line">            "hashes": [</span><br><span class="line">                "sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae",</span><br><span class="line">                "sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691"</span><br><span class="line">            ],</span><br><span class="line">            "version": "==3.0.4"</span><br><span class="line">        },</span><br><span class="line">        "django": {</span><br><span class="line">            "hashes": [</span><br><span class="line">                "sha256:a32c22af23634e1d11425574dce756098e015a165be02e4690179889b207c7a8",</span><br><span class="line">                "sha256:d6393918da830530a9516bbbcbf7f1214c3d733738779f06b0f649f49cc698c3"</span><br><span class="line">            ],</span><br><span class="line">            "index": "pypi",</span><br><span class="line">            "version": "==2.1.5"</span><br><span class="line">        },</span><br><span class="line">        "idna": {</span><br><span class="line">            "hashes": [</span><br><span class="line">                "sha256:c357b3f628cf53ae2c4c05627ecc484553142ca23264e593d327bcde5e9c3407",</span><br><span class="line">                "sha256:ea8b7f6188e6fa117537c3df7da9fc686d485087abf6ac197f9c46432f7e4a3c"</span><br><span class="line">            ],</span><br><span class="line">            "version": "==2.8"</span><br><span class="line">        },</span><br><span class="line">        "pytz": {</span><br><span class="line">            "hashes": [</span><br><span class="line">                "sha256:32b0891edff07e28efe91284ed9c31e123d84bea3fd98e1f72be2508f43ef8d9",</span><br><span class="line">                "sha256:d5f05e487007e29e03409f9398d074e158d920d36eb82eaf66fb1136b0c5374c"</span><br><span class="line">            ],</span><br><span class="line">            "version": "==2018.9"</span><br><span class="line">        },</span><br><span class="line">        "requests": {</span><br><span class="line">            "hashes": [</span><br><span class="line">                "sha256:502a824f31acdacb3a35b6690b5fbf0bc41d63a24a45c4004352b0242707598e",</span><br><span class="line">                "sha256:7bf2a778576d825600030a110f3c0e3e8edc51dfaafe1c146e39a2027784957b"</span><br><span class="line">            ],</span><br><span class="line">            "index": "pypi",</span><br><span class="line">            "version": "==2.21.0"</span><br><span class="line">        },</span><br><span class="line">        "urllib3": {</span><br><span class="line">            "hashes": [</span><br><span class="line">                "sha256:61bf29cada3fc2fbefad4fdf059ea4bd1b4a86d2b6d15e1c7c0b582b9752fe39",</span><br><span class="line">                "sha256:de9529817c93f27c8ccbfead6985011db27bd0ddfcdb2d86f3f663385c6a9c22"</span><br><span class="line">            ],</span><br><span class="line">            "version": "==1.24.1"</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    "develop": {}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="虚拟环境管理"><a href="#虚拟环境管理" class="headerlink" title="虚拟环境管理"></a>虚拟环境管理</h2><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><p>进入项目的文件夹，直接pipenv install xxx安装你需要的包，就会在当前文件夹下创建虚拟环境，生成Pipfile和Pipfile.lock</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[root@shiyanlou ~]# cd myproject/</span><br><span class="line">[root@shiyanlou myproject]# pipenv install requests</span><br><span class="line">Creating a virtualenv for this project…</span><br><span class="line">Pipfile: /root/myproject/Pipfile</span><br><span class="line">Using /usr/local/python3/bin/python3.7 (3.7.2) to create virtualenv…</span><br><span class="line">⠸ Creating virtual environment...Already using interpreter /usr/local/python3/bin/python3.7</span><br><span class="line">Using base prefix '/usr/local/python3'</span><br><span class="line">New python executable in /root/.local/share/virtualenvs/myproject-zKJX12a5/bin/python3.7</span><br><span class="line">Also creating executable in /root/.local/share/virtualenvs/myproject-zKJX12a5/bin/python</span><br><span class="line">Installing setuptools, pip, wheel...</span><br><span class="line">done.</span><br><span class="line">✔ Successfully created virtual environment!</span><br><span class="line">Virtualenv location: /root/.local/share/virtualenvs/myproject-zKJX12a5</span><br><span class="line">Creating a Pipfile for this project…</span><br><span class="line">Installing requests…</span><br><span class="line">✔ Installation Succeeded</span><br><span class="line">Pipfile.lock not found, creating…</span><br><span class="line">Locking [dev-packages] dependencies…</span><br><span class="line">Locking [packages] dependencies…</span><br><span class="line">✔ Success!</span><br><span class="line">Updated Pipfile.lock (444a6d)!</span><br><span class="line">Installing dependencies from Pipfile.lock (444a6d)…</span><br><span class="line">    ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 5/5 — 00:00:04</span><br><span class="line">To activate this project's virtualenv, run pipenv shell.</span><br><span class="line">Alternatively, run a command inside the virtualenv with pipenv run.</span><br><span class="line">[root@shiyanlou myproject]# ll -al</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x.  2 root root   39 Jan 31 14:09 .</span><br><span class="line">dr-xr-x---. 17 root root 4096 Jan 31 14:08 ..</span><br><span class="line">-rw-r--r--.  1 root root  153 Jan 31 14:09 Pipfile</span><br><span class="line">-rw-r--r--.  1 root root 1914 Jan 31 14:09 Pipfile.lock</span><br><span class="line">[root@shiyanlou myproject]#</span><br></pre></td></tr></tbody></table></figure></div>
<p>如果需要指定python版本的话</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ pipenv --three # 泛指python的版本</span><br><span class="line">$ pipenv --python 3.7 # 或者，特指某个python版本</span><br><span class="line">$ pipenv --python <path to python> # 或者，特指某个位置的python</path></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="进入-退出-删除虚拟环境"><a href="#进入-退出-删除虚拟环境" class="headerlink" title="进入/退出/删除虚拟环境"></a>进入/退出/删除虚拟环境</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[root@shiyanlou myproject]# pipenv shell  # 进入虚拟环境</span><br><span class="line">Launching subshell in virtual environment…</span><br><span class="line"> . /root/.local/share/virtualenvs/myproject-zKJX12a5/bin/activate</span><br><span class="line">[root@shiyanlou myproject]#  . /root/.local/share/virtualenvs/myproject-zKJX12a5/bin/activate</span><br><span class="line">(myproject) [root@shiyanlou myproject]# exit  # 退出虚拟环境</span><br><span class="line">exit</span><br><span class="line">[root@shiyanlou myproject]# pipenv --rm  # 删除整个环境</span><br><span class="line">Removing virtualenv (/root/.local/share/virtualenvs/myproject-zKJX12a5)…</span><br><span class="line">[root@shiyanlou myproject]#</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="管理开发环境"><a href="#管理开发环境" class="headerlink" title="管理开发环境"></a>管理开发环境</h3><p>通常有一些Python包只在你的开发环境中需要，而不是在生产环境中，例如单元测试包。 Pipenv使用–dev标志区分两个环境。也就是说一个–dev参数，帮你在同一个虚拟环境中又区分出了开发和非开发环境。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ pipenv install --dev pytest</span><br></pre></td></tr></tbody></table></figure></div>
<p>在虚拟环境中运行命令，使用run参数，提供要运行的命令：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ pipenv run python manage.py runserver</span><br></pre></td></tr></tbody></table></figure></div>
<p>这将使用当前虚拟环境关联的Python解释器，执行命令。或者简单的执行脚本：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ pipenv run python your_script.py</span><br></pre></td></tr></tbody></table></figure></div>
<p>如果你不想每次运行Python时都输入这么多字符，可以在shell中设置一个别名，例如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ alias prp="pipenv run python"</span><br></pre></td></tr></tbody></table></figure></div>
<p>冻结Pipfile，相当于将项目所使用的第三方库列表进行打包输出，类似于virtualenv中生成requirements.txt文件。通过更新Pipfile.lock来冻结库名称及其版本，以及其依赖关系的列表。需要使用lock参数：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[root@shiyanlou myproject]# pipenv lock</span><br><span class="line">Locking [dev-packages] dependencies…</span><br><span class="line">Locking [packages] dependencies…</span><br><span class="line">✔ Success!</span><br><span class="line">Updated Pipfile.lock (748999)!</span><br><span class="line">[root@shiyanlou myproject]#</span><br></pre></td></tr></tbody></table></figure></div>
<p>定位项目路径、虚拟环境、Python解释器，显示依赖关系，卸载包</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[root@shiyanlou myproject]# pipenv --where  # 定位项目路径</span><br><span class="line">/root/myproject</span><br><span class="line">[root@shiyanlou myproject]# pipenv --venv  # 定位虚拟环境</span><br><span class="line">/root/.local/share/virtualenvs/myproject-zKJX12a5</span><br><span class="line">[root@shiyanlou myproject]# pipenv --py  # 定位Python解释器</span><br><span class="line">/root/.local/share/virtualenvs/myproject-zKJX12a5/bin/python</span><br><span class="line">[root@shiyanlou myproject]# pipenv graph  # 显示依赖关系</span><br><span class="line">atomicwrites==1.2.1</span><br><span class="line">attrs==18.2.0</span><br><span class="line">Django==2.1.5</span><br><span class="line">  - pytz [required: Any, installed: 2018.9]</span><br><span class="line">more-itertools==5.0.0</span><br><span class="line">  - six [required: >=1.0.0,<2.0.0, installed: 1.12.0]</span><br><span class="line">py==1.7.0</span><br><span class="line">requests==2.21.0</span><br><span class="line">  - certifi [required: >=2017.4.17, installed: 2018.11.29]</span><br><span class="line">  - chardet [required: >=3.0.2,<3.1.0, installed: 3.0.4]</span><br><span class="line">  - idna [required: >=2.5,<2.9, installed: 2.8]</span><br><span class="line">  - urllib3 [required: >=1.21.1,<1.25, installed: 1.24.1]</span><br><span class="line">[root@shiyanlou myproject]# pipenv uninstall --all  # 卸载所有包</span><br><span class="line">Un-installing all [dev-packages] and [packages]…</span><br><span class="line">Found 12 installed package(s), purging…</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="练习网站"><a href="#练习网站" class="headerlink" title="练习网站"></a>练习网站</h2><p>Pipenv playground是官方的在线练习网站：<a href="https://rootnroll.com/d/pipenv/，非常棒！" target="_blank" rel="noopener">https://rootnroll.com/d/pipenv/，非常棒！</a></p>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis知识点</title>
    <url>/2020/03/21/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>Redis本质上是一个Key-Value类型的内存数据库，很像memcached，整个数据库统统加载在内存当中进行操作。</p>
<p>因为是纯内存操作，Redis的性能非常出色，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。</p>
<p>Redis可以用来实现很多有用的功能</p>
<ol>
<li>用他的List来做FIFO双向链表，实现一个轻量级的高性 能消息队列服务</li>
<li>用他的Set可以做高性能的tag系统</li>
<li>Redis也可以对存入的Key-Value设置expire时间，因此也可以被当作一 个功能加强版的memcached来用</li>
</ol>
<h4 id="使用redis有哪些好处？"><a href="#使用redis有哪些好处？" class="headerlink" title="使用redis有哪些好处？"></a>使用redis有哪些好处？</h4><ol>
<li><p>速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)</p>
</li>
<li><p>支持丰富数据类型，支持string，list，set，zset, set，hash</p>
</li>
<li><p>支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</p>
</li>
<li><p>丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</p>
</li>
</ol>
<h4 id="Memcache与Redis的区别都有哪些？"><a href="#Memcache与Redis的区别都有哪些？" class="headerlink" title="Memcache与Redis的区别都有哪些？"></a>Memcache与Redis的区别都有哪些？</h4><ol>
<li><p>存储方式 Memecache把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。 Redis有部份存在硬盘上，这样能保证数据的持久性。</p>
</li>
<li><p>数据支持类型 Memcache对数据类型支持相对简单。 Redis有复杂的数据类型。</p>
</li>
</ol>
<h4 id="redis相比memcached有哪些优势？"><a href="#redis相比memcached有哪些优势？" class="headerlink" title="redis相比memcached有哪些优势？"></a>redis相比memcached有哪些优势？</h4><ol>
<li>memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</li>
<li>redis的速度比memcached快很多</li>
<li>redis可以持久化其数据</li>
</ol>
<h4 id="为什么用redis"><a href="#为什么用redis" class="headerlink" title="为什么用redis"></a>为什么用redis</h4><ol>
<li><p>假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！</p>
</li>
<li><p>直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。</p>
</li>
</ol>
<h4 id="Redis-的持久化机制是什么？各自的优缺点？"><a href="#Redis-的持久化机制是什么？各自的优缺点？" class="headerlink" title="Redis 的持久化机制是什么？各自的优缺点？"></a>Redis 的持久化机制是什么？各自的优缺点？</h4><h5 id="RDB：是Redis-DataBase缩写快照"><a href="#RDB：是Redis-DataBase缩写快照" class="headerlink" title="RDB：是Redis DataBase缩写快照"></a>RDB：是Redis DataBase缩写快照</h5><p>RDB是Redis默认的持久化方式。按照一定的时间将内存的数据以快照的形式保存到硬盘中，对应产生的数据文件为dump.rdb。通过配置文件中的save参数来定义快照的周期。</p>
<ol>
<li>只有一个文件 dump.rdb，方便持久化。</li>
<li>容灾性好，一个文件可以保存到安全的磁盘</li>
</ol>
<h5 id="AOF：持久化："><a href="#AOF：持久化：" class="headerlink" title="AOF：持久化："></a>AOF：持久化：</h5><p>AOF持久化(即Append Only File持久化)，则是将Redis执行的每次写命令记录到单独的日志文件中，当重启Redis会重新将持久化的日志中文件恢复数据。</p>
<h4 id="Redis的过期策略和内存淘汰机制"><a href="#Redis的过期策略和内存淘汰机制" class="headerlink" title="Redis的过期策略和内存淘汰机制"></a>Redis的过期策略和内存淘汰机制</h4><h5 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h5><p>redis采用的是定期删除+惰性删除策略</p>
<p>定期删除，redis默认每个100ms检查，是否有过期的key,有过期key则删除。需要说明的是，redis不是每个100ms将所有的key检查一次，而是随机抽取进行检查(如果每隔100ms,全部key进行检查，redis岂不是卡死)。因此，如果只采用定期删除策略，会导致很多key到时间没有删除。</p>
<p>于是，惰性删除派上用场。也就是说在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。</p>
<h5 id="内存淘汰机制"><a href="#内存淘汰机制" class="headerlink" title="内存淘汰机制"></a>内存淘汰机制</h5><p>如果定期删除没删除key。然后你也没即时去请求key，也就是说惰性删除也没生效。这样，redis的内存会越来越高。那么就应该采用内存淘汰机制。<br>在redis.conf中有一行配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># maxmemory-policy volatile-lru</span><br></pre></td></tr></tbody></table></figure></div>
<p>该配置就是配内存淘汰策略的</p>
<ol>
<li>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。应该没人用吧。</li>
<li>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。推荐使用，目前项目在用这种。</li>
<li>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。应该也没人用吧，你不删最少使用Key,去随机删。</li>
<li>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。这种情况一般是把redis既当缓存，又做持久化存储的时候才用。不推荐</li>
<li>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。依然不推荐</li>
<li>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。不推荐</li>
</ol>
<h4 id="Redis主要消耗什么物理资源？"><a href="#Redis主要消耗什么物理资源？" class="headerlink" title="Redis主要消耗什么物理资源？"></a>Redis主要消耗什么物理资源？</h4><p>内存</p>
<h4 id="Redis的内存用完了会发生什么？"><a href="#Redis的内存用完了会发生什么？" class="headerlink" title="Redis的内存用完了会发生什么？"></a>Redis的内存用完了会发生什么？</h4><p>如果达到设置的上限，Redis的写命令会返回错误信息（但是读命令还可以正常返回。）或者你可以配置内存淘汰机制，当Redis达到内存上限时会冲刷掉旧的内容。</p>
<h4 id="缓存穿透和缓存雪崩"><a href="#缓存穿透和缓存雪崩" class="headerlink" title="缓存穿透和缓存雪崩"></a>缓存穿透和缓存雪崩</h4><h5 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h5><p>缓存穿透，即黑客故意去请求缓存中不存在的数据，导致所有的请求都怼到数据库上，从而数据库连接异常。</p>
<h5 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h5><p>即缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。</p>
<p>解决方法：</p>
<ol>
<li>给缓存的失效时间，加上一个随机值，避免集体失效。</li>
</ol>
<h4 id="mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"><a href="#mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据" class="headerlink" title="mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"></a>mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</h4><p>redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略（回收策略）。<br>可以设置成最近最少使用的数据淘汰。</p>
</body></html>]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium的使用</title>
    <url>/2019/01/28/Selenium%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h2 id="Selenium的使用"><a href="#Selenium的使用" class="headerlink" title="Selenium的使用"></a>Selenium的使用</h2><h3 id="模拟谷歌浏览器访问百度首页，并输入python关键字搜索"><a href="#模拟谷歌浏览器访问百度首页，并输入python关键字搜索" class="headerlink" title="模拟谷歌浏览器访问百度首页，并输入python关键字搜索"></a>模拟谷歌浏览器访问百度首页，并输入python关键字搜索</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from selenium.webdriver.common.keys import Keys</span><br><span class="line">from selenium.webdriver.support import expected_conditions as EC</span><br><span class="line">from selenium.webdriver.support.wait import WebDriverWait</span><br><span class="line"></span><br><span class="line">#初始化一个浏览器（如：谷歌，使用Chrome需安装chromedriver）</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">#driver = webdriver.PhantomJS() #无界面浏览器</span><br><span class="line">try:</span><br><span class="line">    #请求网页</span><br><span class="line">    driver.get("https://www.baidu.com")</span><br><span class="line">    #查找id值为kw的节点对象（搜索输入框）</span><br><span class="line">    input = driver.find_element_by_id("kw")</span><br><span class="line">    #模拟键盘输入字串内容</span><br><span class="line">    input.send_keys("python")</span><br><span class="line">    #模拟键盘点击回车键</span><br><span class="line">    input.send_keys(Keys.ENTER)</span><br><span class="line">    #显式等待,最长10秒</span><br><span class="line">    wait = WebDriverWait(driver,10)</span><br><span class="line">    #等待条件：10秒内必须有个id属性值为content_left的节点加载出来，否则抛异常。</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.ID,'content_left')))</span><br><span class="line">    # 输出响应信息</span><br><span class="line">    print(driver.current_url)</span><br><span class="line">    print(driver.get_cookies())</span><br><span class="line">    print(driver.page_source)</span><br><span class="line">finally:</span><br><span class="line">    #关闭浏览器</span><br><span class="line">    #driver.close()</span><br><span class="line">    pass</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()  #谷歌 需：ChromeDriver驱动</span><br><span class="line">driver = webdriver.FireFox() #火狐 需：GeckoDriver驱动</span><br><span class="line">driver = webdriver.Edge()  </span><br><span class="line">driver = webdriver.Safari()  </span><br><span class="line">driver = webdriver.PhantomJS() #无界面浏览器</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">#driver = webdriver.PhantomJS()</span><br><span class="line">driver.get("http://www.taobao.com")</span><br><span class="line">print(driver.page_source)</span><br><span class="line">#driver.close()</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h3><h4 id="获取单个节点的方法"><a href="#获取单个节点的方法" class="headerlink" title="获取单个节点的方法"></a>获取单个节点的方法</h4><blockquote>
<p>find_element_by_id()<br>find_element_by_name()<br>find_element_by_xpath()<br>find_element_by_link_text()<br>find_element_by_partial_link_text()<br>find_element_by_tag_name()<br>find_element_by_class_name()<br>find_element_by_css_seletor()</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line"></span><br><span class="line">#创建浏览器对象</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">#driver = webdriver.PhantomJS()</span><br><span class="line">driver.get("http://www.taobao.com")</span><br><span class="line">#下面都是获取id属性值为q的节点对象</span><br><span class="line">input = driver.find_element_by_id("q")</span><br><span class="line">print(input)</span><br><span class="line"></span><br><span class="line">input = driver.find_element_by_css_selector("#q")</span><br><span class="line">print(input)</span><br><span class="line"></span><br><span class="line">input = driver.find_element_by_xpath("//*[@id='q']")</span><br><span class="line">print(input)</span><br><span class="line"></span><br><span class="line">#效果同上</span><br><span class="line">input = driver.find_element(By.ID,"q")</span><br><span class="line">print(input)</span><br><span class="line"></span><br><span class="line">#driver.close()</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="获取多个节点的方法"><a href="#获取多个节点的方法" class="headerlink" title="获取多个节点的方法"></a>获取多个节点的方法</h4><blockquote>
<p>find_elements_by_id()<br>find_elements_by_name()<br>find_elements_by_xpath()<br>find_elements_by_link_text()<br>find_elements_by_partial_link_text()<br>find_elements_by_tag_name()<br>find_elements_by_class_name()<br>find_elements_by_css_seletor()</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">#创建浏览器对象</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">#driver = webdriver.PhantomJS()</span><br><span class="line">driver.get("http://www.taobao.com")</span><br><span class="line">#下面都是获取id属性值为q的节点对象</span><br><span class="line">input = driver.find_element_by_id("q")</span><br><span class="line">#模拟键盘输入iphone</span><br><span class="line">input.send_keys('iphone')</span><br><span class="line">time.sleep(3)</span><br><span class="line">#清空输入框</span><br><span class="line">input.clear()</span><br><span class="line">#模拟键盘输入iPad</span><br><span class="line">input.send_keys('iPad')</span><br><span class="line">#获取搜索按钮节点</span><br><span class="line">botton = driver.find_element_by_class_name("btn-search")</span><br><span class="line">#触发点击动作</span><br><span class="line">botton.click()</span><br><span class="line"></span><br><span class="line">#driver.close()</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="动态链"><a href="#动态链" class="headerlink" title="动态链"></a>动态链</h4><p>ActionChains是一种自动化低级别交互的方法，如鼠标移动，鼠标按钮操作，按键操作和上下文菜单交互。这对于执行更复杂的操作（如悬停和拖放）很有用.</p>
<blockquote>
<p>move_to_element（to_element ）– 将鼠标移到元素的中间<br>move_by_offset（xoffset，yoffset ）– 将鼠标移至当前鼠标位置的偏移量<br>drag_and_drop（源，目标）– 然后移动到目标元素并释放鼠标按钮。<br>pause（秒）– 以秒为单位暂停指定持续时间的所有输入<br>perform（）– 执行所有存储的操作。<br>release（on_element = None ）释放元素上的一个持有鼠标按钮。<br>reset_actions（）– 清除已存储在远程端的操作。<br>send_keys（* keys_to_send ）– 将键发送到当前的焦点元素。<br>send_keys_to_element（element，* keys_to_send ）– 将键发送到一个元素。</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#创建浏览器对象</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">#加载指定url地址</span><br><span class="line">url = 'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span><br><span class="line">driver.get(url)</span><br><span class="line"># 切换Frame窗口    </span><br><span class="line">driver.switch_to.frame('iframeResult')</span><br><span class="line">#获取两个div节点对象</span><br><span class="line">source = driver.find_element_by_css_selector("#draggable")</span><br><span class="line">target = driver.find_element_by_css_selector("#droppable")</span><br><span class="line">#创建一个动作链对象</span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line">#将一个拖拽操作添加到动作链队列中</span><br><span class="line">actions.drag_and_drop(source,target)</span><br><span class="line">time.sleep(3)</span><br><span class="line">#执行所有存储的操作（顺序被触发）</span><br><span class="line">actions.perform()</span><br><span class="line">#driver.close()</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="执行JavaScript"><a href="#执行JavaScript" class="headerlink" title="执行JavaScript"></a>执行JavaScript</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">#创建浏览器对象</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">#加载指定url地址</span><br><span class="line">driver.get("https://www.zhihu.com/explore")</span><br><span class="line">#执行javascript程序将页面滚动移至底部</span><br><span class="line">driver.execute_script('window.scrollTo(0,document.body.scrollHeight)')</span><br><span class="line">#执行javascript实现一个弹框操作</span><br><span class="line">driver.execute_script('window.alert("Hello Selenium!")')</span><br><span class="line"></span><br><span class="line">#driver.close()</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver import ActionChains</span><br><span class="line"></span><br><span class="line">#创建浏览器对象</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">#加载请求指定url地址</span><br><span class="line">driver.get("https://www.zhihu.com/explore")</span><br><span class="line">#获取id属性值为zh-top-link-logo的节点（logo）</span><br><span class="line">logo = driver.find_element_by_id("zh-top-link-logo")</span><br><span class="line">print(logo) #输出节点对象</span><br><span class="line">print(logo.get_attribute('class')) #节点的class属性值</span><br><span class="line">#获取id属性值为zu-top-add-question节点（提问按钮）</span><br><span class="line">input = driver.find_element_by_id("zu-top-add-question")</span><br><span class="line">print(input.text) #获取节点间内容</span><br><span class="line">print(input.id)  #获取id属性值</span><br><span class="line">print(input.location) #节点在页面中的相对位置</span><br><span class="line">print(input.tag_name) #节点标签名称</span><br><span class="line">print(input.size)     #获取节点的大小</span><br><span class="line">#driver.close()</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="切换Frame"><a href="#切换Frame" class="headerlink" title="切换Frame"></a>切换Frame</h4><p>我们可以使用switch_to.frame()来切换Frame界面</p>
<h3 id="延迟等待"><a href="#延迟等待" class="headerlink" title="延迟等待"></a>延迟等待</h3><p>浏览器加载网页是需要时间的，Selenium也不例外，若要获取完整网页内容，就要延时等待。<br>在Selenium中延迟等待方式有两种：一种是隐式等待，一种是显式等待（推荐）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rom selenium import webdriver</span><br><span class="line"></span><br><span class="line">#创建浏览器对象</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">#使用隐式等待(固定时间)</span><br><span class="line">driver.implicitly_wait(2)</span><br><span class="line">#加载请求指定url地址</span><br><span class="line">driver.get("https://www.zhihu.com/explore")</span><br><span class="line">#获取节点    </span><br><span class="line">input = driver.find_element_by_id("zu-top-add-question")</span><br><span class="line">print(input.text) #获取节点间内容</span><br><span class="line"></span><br><span class="line">#driver.close()</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from selenium.webdriver.support import expected_conditions as EC</span><br><span class="line">from selenium.webdriver.support.wait import WebDriverWait</span><br><span class="line"></span><br><span class="line">#创建浏览器对象</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">#加载请求指定url地址</span><br><span class="line">driver.get("https://www.zhihu.com/explore")</span><br><span class="line">#显式等待,最长10秒</span><br><span class="line">wait = WebDriverWait(driver,10)</span><br><span class="line">#等待条件：10秒内必须有个id属性值为zu-top-add-question的节点加载出来，否则抛异常。</span><br><span class="line">input = wait.until(EC.presence_of_element_located((By.ID,'zu-top-add-question')))</span><br><span class="line">print(input.text) #获取节点间内容</span><br><span class="line">#driver.close()</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="前进和后退"><a href="#前进和后退" class="headerlink" title="前进和后退"></a>前进和后退</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">#创建浏览器对象</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">#加载请求指定url地址</span><br><span class="line">driver.get("https://www.baidu.com")</span><br><span class="line">driver.get("https://www.taobao.com")</span><br><span class="line">driver.get("https://www.jd.com")</span><br><span class="line">time.sleep(2)</span><br><span class="line">driver.back() #后退</span><br><span class="line">time.sleep(2) #前进</span><br><span class="line">driver.forward()</span><br><span class="line">#driver.close()</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver import ActionChains</span><br><span class="line"></span><br><span class="line">#创建浏览器对象</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">#加载请求指定url地址</span><br><span class="line">driver.get("https://www.zhihu.com/explore")</span><br><span class="line">print(driver.get_cookies())</span><br><span class="line">driver.add_cookie({'name':'namne','domain':'www.zhihu.com','value':'zhangsan'})</span><br><span class="line">print(driver.get_cookies())</span><br><span class="line">driver.delete_all_cookies()</span><br><span class="line">print(driver.get_cookies())</span><br><span class="line">#driver.close()</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">#创建浏览器对象</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">#加载请求指定url地址</span><br><span class="line">driver.get("https://www.baidu.com")</span><br><span class="line">#使用JavaScript开启一个新的选型卡</span><br><span class="line">driver.execute_script('window.open()')</span><br><span class="line">print(driver.window_handles)</span><br><span class="line">#切换到第二个选项卡，并打开url地址</span><br><span class="line">driver.switch_to_window(driver.window_handles[1])</span><br><span class="line">driver.get("https://www.taobao.com")</span><br><span class="line">time.sleep(2)</span><br><span class="line">#切换到第一个选项卡，并打开url地址</span><br><span class="line">driver.switch_to_window(driver.window_handles[0])</span><br><span class="line">driver.get("https://www.jd.com")</span><br><span class="line">#driver.close()</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.common.exceptions import TimeoutException,NoSuchElementException</span><br><span class="line"></span><br><span class="line">#创建浏览器对象</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">try:</span><br><span class="line">    #加载请求指定url地址</span><br><span class="line">    driver.get("https://www.baidu.com")</span><br><span class="line">except TimeoutException:</span><br><span class="line">    print('Time Out')</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    #加载请求指定url地址</span><br><span class="line">    driver.find_element_by_id("demo")</span><br><span class="line">except NoSuchElementException:</span><br><span class="line">    print('No Element')</span><br><span class="line">finally:</span><br><span class="line">    #driver.close()</span><br><span class="line">    pass</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Selenuim</category>
      </categories>
      <tags>
        <tag>Selenuim</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP协议</title>
    <url>/2019/03/15/TCP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h4 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h4><ol>
<li>TCP提供一种面向连接的、可靠的字节流服务。</li>
<li>在一个TCP连接中，仅有两方进行彼此通信。广播和多播不能用于TCP。</li>
<li>TCP 使用校验和，确认和重传机制来保证可靠传输。</li>
<li>TCP 给数据分节进行排序，并使用累积确认保证数据的顺序不变和非重复。</li>
<li>TCP 使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制。</li>
</ol>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>TCP 并不能保证数据一定会被对方接收到，因为这是不可能的。</p>
<p>TCP 能够做到的是，如果有可能，就把数据递送到接收方，否则就（通过放弃重传并且中断连接这一手段）通知用户。因此准确说 TCP 也不是 100% 可靠的协议，它所能提供的是数据的可靠递送或故障的可靠通知。</p>
<h4 id="三次挥手-Three-way-Handshake"><a href="#三次挥手-Three-way-Handshake" class="headerlink" title="三次挥手(Three-way Handshake)"></a>三次挥手(Three-way Handshake)</h4><p>所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包。</p>
<p>三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。</p>
<ol>
<li><p>第一次握手(SYN=1, seq=x):</p>
<p> 客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。<br>发送完毕后，客户端进入 SYN_SEND 状态。</p>
</li>
<li><p>第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):</p>
<p> 服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加1，即X+1。 发送完毕后，服务器端进入 SYN_RCVD 状态。</p>
</li>
<li><p>第三次握手(ACK=1，ACKnum=y+1):</p>
<p> 客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1。</p>
</li>
</ol>
<p>发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束。</p>
<h4 id="四次挥手-Four-way-handshake"><a href="#四次挥手-Four-way-handshake" class="headerlink" title="四次挥手(Four-way handshake)"></a>四次挥手(Four-way handshake)</h4><p>客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 close() 操作即可产生挥手操作。</p>
<ol>
<li><p>第一次挥手(FIN=1，seq=x):</p>
<p> 假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为1的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。</p>
<p> 发送完毕后，客户端进入 FIN_WAIT_1 状态。</p>
</li>
<li><p>第二次挥手(ACK=1，ACKnum=x+1):</p>
<p> 服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。</p>
<p> 发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态，等待服务器端关闭连接。</p>
</li>
<li><p>第三次挥手(FIN=1，seq=y):</p>
<p> 服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为1。</p>
<p> 发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个ACK。</p>
</li>
<li><p>第四次挥手(ACK=1，ACKnum=y+1):</p>
<p> 客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT状态，等待可能出现的要求重传的 ACK 包。</p>
<p> 服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。</p>
<p> 客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。</p>
</li>
</ol>
<h4 id="TCP-KeepAlive"><a href="#TCP-KeepAlive" class="headerlink" title="TCP KeepAlive"></a>TCP KeepAlive</h4><p>TCP 的连接，实际上是一种纯软件层面的概念，在物理层面并没有“连接”这种概念。TCP 通信双方建立交互的连接，但是并不是一直存在数据交互，有些连接会在数据交互完毕后，主动释放连接，而有些不会。</p>
<p>TCP KeepAlive 的基本原理是，隔一段时间给连接对端发送一个探测包，如果收到对方回应的 ACK，则认为连接还是存活的，在超过一定重试次数之后还是没有收到对方的回应，则丢弃该 TCP 连接。</p>
</body></html>]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>UDP打洞测试</title>
    <url>/2018/09/13/UDP%E6%89%93%E6%B4%9E%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>UDP打洞实现了私有网络中的Internet主机之间建立双向UDP连接的方法。不过由于NAT的行为是非标准化的，这方法不能应用于所有类型的NAT。</p>
<p>基本上就是让位于NAT后的两台主机都连上某个拥有Public IP 的伺服器，当两个主机与服务器建立好UDP连线后，转成直接连线来传送资料，其原理简单来说是让NAT以为他连线的是原本的那台服务器主机。</p>
<p>下面是我用了python来实验UDP打洞的原始码。</p>
<h3 id="Server-py"><a href="#Server-py" class="headerlink" title="Server.py"></a>Server.py</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立 UDP Scoket</span></span><br><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"><span class="comment"># 监听所有IP的 3386 端口</span></span><br><span class="line">listen_addr = (<span class="string">""</span>, <span class="number">3386</span>)</span><br><span class="line">server.bind(listen_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 储存IP用的 Array</span></span><br><span class="line">ips = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 接收数据</span></span><br><span class="line">    data, addr = server.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(data.decode(<span class="string">'gbk'</span>), addr, <span class="string">'is connected.'</span>)</span><br><span class="line">    <span class="comment"># 將Client IP:Port 儲存到Array內</span></span><br><span class="line">    ips.append(str(addr[<span class="number">0</span>]) + <span class="string">':'</span> + str(addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当第二个client连上時，進行IP交換動作</span></span><br><span class="line">    <span class="keyword">if</span> len(ips) == <span class="number">2</span>:</span><br><span class="line">        dest = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> ips:</span><br><span class="line">                <span class="keyword">if</span> ip != i:</span><br><span class="line">                    dest = i  <span class="comment"># 对方的IP</span></span><br><span class="line">                <span class="comment"># 將A的IP传給B，B的IP传給A</span></span><br><span class="line">                    server.sendto(dest.encode(<span class="string">'gbk'</span>),(ip.split(<span class="string">':'</span>)[<span class="number">0</span>],int(ip.split(<span class="string">':'</span>)[<span class="number">1</span>])))</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="ClientA-py"><a href="#ClientA-py" class="headerlink" title="ClientA.py"></a>ClientA.py</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">data = <span class="string">'hello world A'</span></span><br><span class="line"><span class="comment"># 先连线到公开的服务器</span></span><br><span class="line">addr = (<span class="string">"120.78.222.167"</span>, <span class="number">3386</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threaded_function</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'Send '</span> , i ,<span class="string">'to '</span>, arg)</span><br><span class="line">        client.sendto(<span class="string">b'i'</span>, (arg.split(<span class="string">':'</span>)[<span class="number">0</span>], int(arg.split(<span class="string">':'</span>)[<span class="number">1</span>])))</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client.sendto(data.encode(<span class="string">'gbk'</span>), addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收返回的主机IP</span></span><br><span class="line">dest,adr = client.recvfrom(<span class="number">1024</span>)</span><br><span class="line">print(dest.decode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#发送数据开始打洞</span></span><br><span class="line">client.sendto(<span class="string">b'ping'</span>, (dest.decode(<span class="string">'gbk'</span>).split(<span class="string">':'</span>)[<span class="number">0</span>], int(dest.decode(<span class="string">'gbk'</span>).split(<span class="string">':'</span>)[<span class="number">1</span>])))</span><br><span class="line">thread = Thread(target = threaded_function, args = (dest.decode(<span class="string">'gbk'</span>), ))</span><br><span class="line">thread.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data,adr = client.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">'Recv：'</span>, data, <span class="string">'from：'</span>,adr)</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="ClientB-py"><a href="#ClientB-py" class="headerlink" title="ClientB.py"></a>ClientB.py</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">data = <span class="string">'hello world B'</span></span><br><span class="line"><span class="comment"># 先连线到公开的服务器</span></span><br><span class="line">addr = (<span class="string">"120.78.222.167"</span>, <span class="number">3386</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threaded_function</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'Send '</span> , i ,<span class="string">'to '</span>, arg)</span><br><span class="line">        client.sendto(<span class="string">b'i'</span>, (arg.split(<span class="string">':'</span>)[<span class="number">0</span>], int(arg.split(<span class="string">':'</span>)[<span class="number">1</span>])))</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client.sendto(data.encode(<span class="string">'gbk'</span>), addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收返回的主机IP</span></span><br><span class="line">dest,adr = client.recvfrom(<span class="number">1024</span>)</span><br><span class="line">print(dest.decode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#发送数据开始打洞</span></span><br><span class="line">client.sendto(<span class="string">b'ping'</span>, (dest.decode(<span class="string">'gbk'</span>).split(<span class="string">':'</span>)[<span class="number">0</span>], int(dest.decode(<span class="string">'gbk'</span>).split(<span class="string">':'</span>)[<span class="number">1</span>])))</span><br><span class="line">thread = Thread(target = threaded_function, args = (dest.decode(<span class="string">'gbk'</span>), ))</span><br><span class="line">thread.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data,adr = client.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">'Recv：'</span>, data, <span class="string">'from：'</span>,adr)</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><a href="result.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="result.png" class="lazyload"></a><br><a href="result2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="result2.png" class="lazyload"></a></p>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>TLS协议</title>
    <url>/2019/03/10/TLS%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h4 id="TLS-安全传输层"><a href="#TLS-安全传输层" class="headerlink" title="TLS 安全传输层"></a>TLS 安全传输层</h4><p>很多应用层协议都存在安全问题。如http协议，在传输过程中使用明文信息，传输报文一旦被截获便会泄漏内容；传输过程中报文如果被篡改，无法轻易发现；<br>为了解决这个问题，就在应用层和传输层之间加入了SSL/TLS协议。</p>
<h5 id="什么是TLS"><a href="#什么是TLS" class="headerlink" title="什么是TLS"></a>什么是TLS</h5><p>TLS（Transport Layer Security, 安全传输层）。TLS是建立在传输层TCP协议之上的协议，服务于应用层。前身是SSL（Secure Socket Layer, 安全套接字层）,它实现了将应用层报文加密后再交由TCP进行传输的可能。</p>
<h5 id="TLS的作用"><a href="#TLS的作用" class="headerlink" title="TLS的作用"></a>TLS的作用</h5><ol>
<li>保密。保密通过加密encryption实现，所有信息都加密传输，第三方无法嗅探。</li>
<li>完整性。通过MAC校验机制，一旦被篡改，通信双方会立刻发现。</li>
<li>认证。双方认证，双方都可以配备证书，防止身份被冒充。</li>
</ol>
<h5 id="TLS实现"><a href="#TLS实现" class="headerlink" title="TLS实现"></a>TLS实现</h5><p>TLS协议分为两部分</p>
<ol>
<li>通信协议<br> 通过使用客户端和服务端协商后的密钥进行数据加密传输。</li>
<li>握手协议<br> 客户端和服务端进行协商，确定一组用于数据传输加密的密钥串。</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity脚本开发学习笔记2</title>
    <url>/2019/09/01/Unity%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h2 id="按键控制"><a href="#按键控制" class="headerlink" title="按键控制"></a>按键控制</h2><p>Input.GetKey和Input.GetButton两种方法用于获取按键情况。</p>
<p>区别在于，Key有确定的KeyCode。KeyCode是Unity内置的枚举类，内含各种键盘、手柄按键，如空格键就由KeyCode.Space表示。</p>
<p>而Button是可以自定义详细配置的。在Edit-ProjectSettings-Input中可以对输入进行详细配置，为一种操作提供一个字符串别名。只要使用GetBotton(string str)就可以监测对应的输入了。</p>
<p>除了知道按键是否被按下之外，我们还需要确切地知道按键在哪一帧被按下，哪一帧被松开。 因此，这两个方法都有衍生的GetxxxDown和GetxxxUp。在对应按键被按下后的第一帧，GetKeyDown返回true，而到了第二帧，它就再次返回false了。同理，GetKeyUp也仅在松开按键后的第一帧返回true。</p>
<p>当然，这些方法都应该被放在Update()函数里，这样才能在每一帧对按键进行监测。</p>
<h2 id="摇杆控制"><a href="#摇杆控制" class="headerlink" title="摇杆控制"></a>摇杆控制</h2><p>确切地讲，这里应该是“轴”而不是摇杆。不过比起按键，摇杆更能体现“轴”的涵义，虽然按键确实也可以作为轴。</p>
<p>摇杆控制就比较麻烦了，因为按键只有按下与没按下两个状态，可以简单地用bool值表示，但摇杆有推移的距离，只能用浮点数表示。而且摇杆还有反向。</p>
<p>对于这些特性，GetKey之类的方法显然无法处理，所以需要使用Input.GetAxis。</p>
<p>Input.GetAxis的参数是称为axisName的字符串，可以在Edit-ProjectSettings-Input中定义。其返回的是一个-1到1之间的浮点数，Positive Botton使其返回正值，而Negative Botton让其返回负值。</p>
<p>Sensitivity和Gravity决定了按键触发/松开时返回值多快地上升/归零。</p>
<p>此外还有Dead值，这使得可以不对较小幅度的摇杆活动进行处理，一定程度上能够防止误触。Snap选项，其为true时如果同时触发了Positive Botton和Negative Botton，就返回0。</p>
<p>以上说的，是比较“完备”的摇杆控制，但是在很多时候我们并不需要这个“轴”返回浮点值。举个例子，《刺客信条：起源》中并没有以往的“奔跑”键，而是用摇杆推移的幅度决定移动速度，这就非常GetAxis。如果用键盘操作，WASD控制方向，是没有推移幅度这一说的，我们就当按下按键就是摇杆直接推到底，这就是Type属性为Key or Mouse Button而不是Joystick Axis的轴。无论如何，巴耶克并不是弹射起步，而是有gravity和sensitivity的作用。</p>
<p>但是，在东方的STG里就没有这些玩意，大家的运动都像加速度不存在一样。这种情况下，应当使用Input.GetAxisRaw方法，按键后返回的是1和-1这两个整数而非浮点数。</p>
<h2 id="重写和成员隐藏"><a href="#重写和成员隐藏" class="headerlink" title="重写和成员隐藏"></a>重写和成员隐藏</h2><p>重写（Overriding，有人称为覆盖）是在派生类中重新实现基类中已有的方法和属性等，为了安全，基类中被重写的方法/属性需要有virtual修饰符（或者abstract、override），派生类重写的方法/属性需要有override修饰符。由于是重新“实现”，重写的方法签名/属性类型和名称必须和之前保持一致，也不能改变访问性，重写方法相当于只是重新编写了方法的函数体。</p>
<p>我的理解是，在派生类中重写之后，从基类继承下来的方法/属性就相当于不存在了。因此，不管我们把派生类的对象当成该类的对象还是其基类的对象，在直接调用方法时调用的都是重写之后的方法。</p>
<p>而成员隐藏则完全不同（Member Hiding，虽然也有人称其为覆盖），它虽然看上去是在派生类中用new修饰符重新定义了基类中已有的成员，但！是！ 从基类继承下来的成员并没有消失，而是被隐藏了。如果我们把派生类的对象作为其基类的对象（Upcasting，向上转型），那调用到的就是被隐藏的基类成员。</p>
<h2 id="委托和事件"><a href="#委托和事件" class="headerlink" title="委托和事件"></a>委托和事件</h2><p>委托（delegate）可以被当作函数指针。要定义委托，首先需要用delegate关键字声明一个模板，模板展示了这种委托应该存放怎样的函数——用其返回类型以及参数列表来限定。</p>
<p>可以把委托名直接当成函数名来用。</p>
<p>委托支持“多播”，这使得我们可以把同一类型的函数集中放到一个委托里，只要调用这个委托，就是依次调用委托中函数列表里的函数。用+=和-=运算符把函数加入委托或从委托中删除。</p>
<p>最初看到多播委托这里，我还没有领会这个机制的用处，但很快我就看到了“事件”。</p>
<p>事件就是一种特殊的委托，或者说它非常类似于公共的多播委托。我们在定义委托的基础上使用event关键字定义一个事件。</p>
<p>对于同一个事件，不同的对象可能有不同的反应，也就有不同的处理函数。如果把唤起事件视作调用委托，那么一系列的事件处理函数就是委托的函数列表，要订阅或取消订阅事件的话，用+=和-=就好了。</p>
<h2 id="协程和生成器"><a href="#协程和生成器" class="headerlink" title="协程和生成器"></a>协程和生成器</h2><p>看到C#协程（Coroutine）里熟悉的yield，我想到的是此前在Python中学到过的生成器（Generator）。简直是一个套路，运行到yield时，函数返回，但下次调用该函数时不会再从头执行，而是从上次退出的地方之后开始执行。</p>
<p>实际上生成器就是协程的一种，称为半协程（Semi-coroutine），这是一种受限制的协程实现。</p>
</body></html>]]></content>
      <categories>
        <category>游戏开发</category>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity脚本开发学习笔记1</title>
    <url>/2019/08/28/Unity%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h2 id="Awake-和-Start"><a href="#Awake-和-Start" class="headerlink" title="Awake() 和 Start()"></a>Awake() 和 Start()</h2><p>这两个函数用于做一些前置性工作。</p>
<p>不同之处在于，Awake()只要脚本被加载就会执行，即使脚本没有被使能（也就是勾上）。而Start()则在Awake()之后执行，且脚本必须被使能。</p>
<h2 id="Update-和-FixedUpdate"><a href="#Update-和-FixedUpdate" class="headerlink" title="Update() 和 FixedUpdate()"></a>Update() 和 FixedUpdate()</h2><p>Update()很简单，每一帧调用一次。但显然，每一帧的渲染时间不会是一致的，即调用Update()的间隔时间不确定，这就导致如果我们把物理效果放到Update()里，会导致物理效果不太流畅。</p>
<p>为了保证物理运动与时间之间的紧密联系，应该使用FixedUpdate()。顾名思义，这是“固定的”Update，即间隔时间可以保持一致。间隔时间由Time.fixedDeltaTime决定，默认的时间是0.02s，一秒钟调用50次。</p>
<h2 id="坐标与向量"><a href="#坐标与向量" class="headerlink" title="坐标与向量"></a>坐标与向量</h2><p>Unity使用左手坐标系，三轴的相对位置依照下图所示。与数学立体几何中的一般表示不同，在这里Z轴代表的是“深度”而不是“高度”。</p>
<p><a href="%E5%9D%90%E6%A0%87%E4%B8%8E%E5%90%91%E9%87%8F.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E5%9D%90%E6%A0%87%E4%B8%8E%E5%90%91%E9%87%8F.png" class="lazyload"></a></p>
<p>Unity包含了一些用于进行向量运算的方法，它们基本被放在Vector2和Vector3类里。</p>
<p>Vector3里包含了一些常用向量，以(0,0,1)为forward（依照上面的坐标手势，中指指向前面），有up、down、left、right、back，以及(0,0,0)的zero和(1,1,1)的one。Vector2里没有z轴，故没有forward和back。</p>
<h2 id="游戏对象、组件，及其开关"><a href="#游戏对象、组件，及其开关" class="headerlink" title="游戏对象、组件，及其开关"></a>游戏对象、组件，及其开关</h2><p>一个游戏对象（GameObject）可以拥有多个组件（Component）。</p>
<p>比如一个简单的点光源，其本身是一个GameObject。首先它有一个Transform组件标示其位置、旋转、缩放等信息，还得有一个Light组件让它发光。也许，还有若干用于控制这个点光源的脚本组件。</p>
<p>如果我们关闭这个游戏对象（我们把它叫做激活/停用），那么这个灯整个就从场景中消失了。用游戏对象的SetActive(bool value)方法来实现这一点。</p>
<p>需要注意的是，如果游戏对象有多层结构，将一个父对象停用并不会使其子对象停用（虽然效果上，子对象也消失了）。查看一个对象到底是在层级中被激活还是本身确实在场景里激活了，可以用游戏对象的activeInHierarchy()和activeSelf()方法来确定。</p>
<p>要关掉灯，除了让灯凭空消失，我们当然还有更正常的做法。每一个组件都有一个bool类型的enabled标志位，只要把这个标志位设为false，就能去使能（禁用）这个组件。如将点光源的Light组件禁用，光是没了，但灯依然还在原处。</p>
</body></html>]]></content>
      <categories>
        <category>游戏开发</category>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>django-form使用和验证</title>
    <url>/2018/03/23/django-form%E4%BD%BF%E7%94%A8%E5%92%8C%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="创建Form"><a href="#创建Form" class="headerlink" title="创建Form"></a>创建Form</h3><p>新建form.py</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    username = forms.CharField(required=<span class="literal">True</span>,)</span><br><span class="line">    password = forms.CharField(required=<span class="literal">True</span>, min_length=<span class="number">3</span>)</span><br></pre></td></tr></tbody></table></figure></div>

<p>规定form表单中字段的长度</p>
<h3 id="使用form验证Post数据"><a href="#使用form验证Post数据" class="headerlink" title="使用form验证Post数据"></a>使用form验证Post数据</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'user/login.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        form = LoginForm(request.POST)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># 通过用户名和密码查询用户是否存在</span></span><br><span class="line">            user_name = LoginForm.cleaned_data[<span class="string">'username'</span>]</span><br><span class="line">            password = LoginForm.cleaned_data[<span class="string">'password'</span>]</span><br><span class="line">            user = authenticate(username=user_name, password=password)</span><br><span class="line">            <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                login(request, user)</span><br><span class="line">                <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'login'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'user/login.html'</span>, {<span class="string">'login_form'</span>: form})</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>django继承默认User表</title>
    <url>/2018/06/01/django%E7%BB%A7%E6%89%BF%E9%BB%98%E8%AE%A4User%E8%A1%A8/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="继承默认User表"><a href="#继承默认User表" class="headerlink" title="继承默认User表"></a>继承默认User表</h3><p>models.py中继承AbstractUser类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用户信息</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    nickname = models.CharField(verbose_name=<span class="string">'昵称'</span>, max_length=<span class="number">32</span>, null=<span class="literal">True</span>)</span><br><span class="line">    telephone = models.CharField(max_length=<span class="number">11</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">'手机号码'</span>)</span><br><span class="line">    avatar = models.ImageField(verbose_name=<span class="string">'头像'</span>, upload_to=<span class="string">'avatar/'</span>, default=<span class="string">"avatar/default.png"</span>)  <span class="comment"># 保存图片</span></span><br><span class="line">    create_time = models.DateTimeField(verbose_name=<span class="string">'创建时间'</span>, auto_now_add=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure></div>

<p>并在settings.py中指明AUTH_USER_MODEL</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">AUTH_USER_MODEL = <span class="string">'user.UserInfo'</span></span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>django设置media文件夹存储</title>
    <url>/2018/06/07/django%E8%AE%BE%E7%BD%AEmedia%E6%96%87%E4%BB%B6%E5%A4%B9%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="Media文件夹设置和使用"><a href="#Media文件夹设置和使用" class="headerlink" title="Media文件夹设置和使用"></a>Media文件夹设置和使用</h3><p>在settings.py文件中写入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'media'</span>)</span><br></pre></td></tr></tbody></table></figure></div>

<p>urls.py中写入路径</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> BookShop.settings <span class="keyword">import</span> MEDIA_ROOT <span class="comment"># 从配置中导入MEDIA_ROOT</span></span><br><span class="line">url(<span class="string">r'^media/(?P<path>.*)$'</path></span>, serve, {<span class="string">"document_root"</span>:MEDIA_ROOT})  <span class="comment"># media文件夹路径</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>models.py中使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">avatar = models.ImageField(verbose_name=<span class="string">'头像'</span>, upload_to=<span class="string">'avatar/'</span>, default=<span class="string">"avatar/default.png"</span>)  <span class="comment"># 保存图片</span></span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装卸载与镜像容器管理</title>
    <url>/2020/01/01/docker%E5%AE%89%E8%A3%85%E4%B8%8E%E9%95%9C%E5%83%8F%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h1 id="Docker来来回回整都还没整清楚，先把安装卸载，添加和删除镜像整明白，方便重来。"><a href="#Docker来来回回整都还没整清楚，先把安装卸载，添加和删除镜像整明白，方便重来。" class="headerlink" title="Docker来来回回整都还没整清楚，先把安装卸载，添加和删除镜像整明白，方便重来。"></a>Docker来来回回整都还没整清楚，先把安装卸载，添加和删除镜像整明白，方便重来。</h1><h3 id="安装与卸载Docker"><a href="#安装与卸载Docker" class="headerlink" title="安装与卸载Docker"></a>安装与卸载Docker</h3><ol>
<li><p>首先，更新软件包索引，并且安装必要的依赖软件，来添加一个新的 HTTPS 软件源：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>使用下面的 curl 导入源仓库的 GPG key：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>将 Docker APT 软件源添加到你的系统：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"</span><br></pre></td></tr></tbody></table></figure></div>
<p>现在，Docker 软件源被启用了，你可以安装软件源中任何可用的 Docker 版本。</p>
</li>
<li><p>运行下面的命令来安装 Docker 最新版本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>安装指定版本的Docker，首先列出 Docker 软件源中所有可用的版本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">apt list -a docker-ce</span><br></pre></td></tr></tbody></table></figure></div>
<p>可用的 Docker 版本将会在第二列显示。</p>
<blockquote>
<p>docker-ce/focal 5:19.03.9<del>3-0</del>ubuntu-focal amd64</p>
</blockquote>
<p>通过在软件包名后面添加版本=<version>来安装指定版本</version></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install docker-ce=<version> docker-ce-cli=<version> containerd.io</version></version></span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>安装完成后，Docker 服务将会自动启动。输入下面的命令来验证</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>验证安装过程<br>想要验证 Docker 是否已经成功被安装，你可以执行docker命令，前面不需要加sudo, 会自动运行一个测试容器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker container run hello-world</span><br></pre></td></tr></tbody></table></figure></div>
</li>
<li><p>卸载Docker<br>在卸载 Docker 之前，你最好移除所有的容器，镜像，卷和网络。<br>运行下面的命令停止所有正在运行的容器，并且移除所有的 docker 对象</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">docker container stop $(docker container ls -aq)</span><br><span class="line">docker system prune -a --volumes</span><br></pre></td></tr></tbody></table></figure></div>

<p>接下来你可以使用apt命令来卸载 Docke</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt purge docker-ce</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ol>
<h3 id="Docker删除容器和镜像"><a href="#Docker删除容器和镜像" class="headerlink" title="Docker删除容器和镜像"></a>Docker删除容器和镜像</h3><blockquote>
<p>docker ps -aq # 列出所有容器ID<br>docker ps -a # 查看所有运行或者不运行容器<br>docker stop $;(docker ps -a -q) # 停止所有的container（容器），这样才能够删除其中的images<br>docker rm $(docker ps -a -q) # 如果想要删除所有container（容器）的话再加一个指令<br>docker container prune # 删除所有停止的容器<br>docker stop Name或者ID  # 停止一个容器<br>docker start Name或者ID  # 启动一个容器<br>docker kill Name或者ID  # 杀死一个容器<br>docker restart name或者ID # 重启一个容器</p>
</blockquote>
<blockquote>
<p>docker images # 查看当前有些什么images<br>docker rmi imageid # 删除images（镜像），通过image的id来指定删除谁<br>docker rmi $(docker images | grep “^<none>“ | awk “{print $3}”) # 想要删除untagged images，也就是那些id为的image的话可以用<br>docker rmi $(docker images -q) # 要删除全部image（镜像）的话<br>docker rmi -f $(docker images -q) # 强制删除全部image的话</none></p>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>运维</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>django集成支付宝</title>
    <url>/2020/05/04/django%E9%9B%86%E6%88%90%E6%94%AF%E4%BB%98%E5%AE%9D/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="支付宝支付"><a href="#支付宝支付" class="headerlink" title="支付宝支付"></a>支付宝支付</h3><h4 id="Alipay"><a href="#Alipay" class="headerlink" title="Alipay"></a>Alipay</h4><p>阿里的支付也就是支付宝，官网以及出了Python的SDK了~所以要先下载</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install alipay-sdk-python</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h4><h5 id="第一步-访问沙箱环境地址，注册一个商家账户"><a href="#第一步-访问沙箱环境地址，注册一个商家账户" class="headerlink" title="第一步 访问沙箱环境地址，注册一个商家账户"></a>第一步 访问沙箱环境地址，注册一个商家账户</h5><p><a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info" target="_blank" rel="noopener">https://openhome.alipay.com/platform/appDaily.htm?tab=info</a><br>按照他要求的方式生成商户的公钥和私钥<del>把公钥放入网站</del>私钥自己留着签名用~~</p>
<p>下面是商户信息以及卖家信息<del>下载一个支付宝的沙箱环境</del></p>
<p>然后按照下面的账号和密码登录和支付<del>只支持安卓的</del><br>按照他要求的方式生成商户的公钥和私钥<del>把公钥放入网站</del>私钥自己留着签名用~~</p>
<p>下面是商户信息以及卖家信息<del>下载一个支付宝的沙箱环境</del></p>
<p>然后按照下面的账号和密码登录和支付<del>只支持安卓的</del></p>
<h5 id="第二步-阅读文档-找到一个适合自己的API"><a href="#第二步-阅读文档-找到一个适合自己的API" class="headerlink" title="第二步 阅读文档 找到一个适合自己的API"></a>第二步 阅读文档 找到一个适合自己的API</h5><h5 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> demo.views <span class="keyword">import</span> AliPayView, PayHandlerView</span><br><span class="line">urlpatterns = [</span><br><span class="line">  url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">  url(<span class="string">r'^pay$'</span>, AliPayView.as_view()),</span><br><span class="line">  url(<span class="string">r'^alipay_handler'</span>, PayHandlerView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.DefaultAlipayClient <span class="keyword">import</span> DefaultAlipayClient</span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.AlipayClientConfig <span class="keyword">import</span> AlipayClientConfig</span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.domain.AlipayTradePrecreateModel <span class="keyword">import</span> AlipayTradePrecreateModel</span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.request. AlipayTradePrecreateRequest <span class="keyword">import</span> AlipayTradePrecreateRequest</span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.domain.AlipayTradePagePayModel <span class="keyword">import</span> AlipayTradePagePayModel</span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.request.AlipayTradePagePayRequest <span class="keyword">import</span> AlipayTradePagePayRequest</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="comment"># 沙箱环境地址：https://openhome.alipay.com/platform/appDaily.htm?tab=info</span></span><br><span class="line"><span class="comment"># "https://openapi.alipaydev.com/gateway.do", APP_ID, APP_PRIVATE_KEY, "json", CHARSET, ALIPAY_PUBLIC_KEY, "RSA2"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ali_pay</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="comment"># 为阿里支付实例化一个配置信息对象</span></span><br><span class="line">  alipay_config = AlipayClientConfig(sandbox_debug=<span class="literal">True</span>)</span><br><span class="line">  <span class="comment"># 初始化各种配置信息</span></span><br><span class="line">  <span class="comment"># 阿里提供服务的接口</span></span><br><span class="line">  alipay_config.server_url = <span class="string">"https://openapi.alipaydev.com/gateway.do"</span></span><br><span class="line">  <span class="comment"># 申请的沙箱环境的app_id</span></span><br><span class="line">  alipay_config.app_id = <span class="string">"2016091800540924"</span></span><br><span class="line">  <span class="comment"># 商户的私钥</span></span><br><span class="line">  <span class="keyword">with</span> open(<span class="string">"keys/app_private_key.txt"</span>) <span class="keyword">as</span> f: alipay_config.app_private_key = f.read()</span><br><span class="line">  <span class="comment"># 阿里的公钥</span></span><br><span class="line">  <span class="keyword">with</span> open(<span class="string">"keys/alipay_public_key.txt"</span>) <span class="keyword">as</span> f: alipay_config.alipay_public_key = f.read()</span><br><span class="line">  <span class="comment"># 实例化一个支付对象并返回</span></span><br><span class="line">  alipay_client = DefaultAlipayClient(alipay_client_config=alipay_config)</span><br><span class="line">  <span class="keyword">return</span> alipay_client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPayView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">"pay.html"</span>)</span><br><span class="line">    <span class="comment"># 生成支付宝自带页面的API</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="comment"># 得到阿里支付的实例化对象</span></span><br><span class="line">    client = ali_pay()</span><br><span class="line">    <span class="comment"># 为API生成一个模板对象 初始化参数用的</span></span><br><span class="line">    model = AlipayTradePagePayModel()</span><br><span class="line">    <span class="comment"># 订单号</span></span><br><span class="line">    model.out_trade_no = <span class="string">"pay"</span> + str(time.time())</span><br><span class="line">    <span class="comment"># 金额</span></span><br><span class="line">    model.total_amount = <span class="number">8888</span></span><br><span class="line">    <span class="comment"># 商品标题</span></span><br><span class="line">    model.subject = <span class="string">"测试"</span></span><br><span class="line">    <span class="comment"># 商品详细内容</span></span><br><span class="line">    model.body = <span class="string">"支付宝测试"</span></span><br><span class="line">    <span class="comment"># 销售产品码，与支付宝签约的产品码名称</span></span><br><span class="line">    model.product_code = <span class="string">"FAST_INSTANT_TRADE_PAY"</span></span><br><span class="line">    <span class="comment"># 实例化一个请求对象</span></span><br><span class="line">    request = AlipayTradePagePayRequest(biz_model=model)</span><br><span class="line">    <span class="comment"># get请求 用户支付成功后返回的页面请求地址</span></span><br><span class="line">    request.return_url = <span class="string">"http://140.143.63.45:8000/alipay_handler"</span></span><br><span class="line">    <span class="comment"># post请求 用户支付成功通知商户的请求地址</span></span><br><span class="line">    request.notify_url = <span class="string">"http://140.143.63.45:8000/alipay_handler"</span></span><br><span class="line">    <span class="comment"># 利用阿里支付对象发一个获得页面的请求 参数是request</span></span><br><span class="line">    response = client.page_execute(request, http_method=<span class="string">"GET"</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">PayHandlerView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">      <span class="comment"># return_url的回调地址</span></span><br><span class="line">      print(request.data)</span><br><span class="line">      <span class="comment"># 用户支付成功之后回到哪</span></span><br><span class="line">      <span class="keyword">return</span> HttpResponse(<span class="string">"return_url测试"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">      print(request.data) <span class="comment"># 用户支付成功 在这里修改订单状态以及优惠券贝里等等情况</span></span><br><span class="line">      <span class="keyword">return</span> HttpResponse(<span class="string">"notify_url"</span>)</span><br><span class="line"></span><br><span class="line">views.py</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>drf使用jwt登录验证及判断是否登录和对象拥有者</title>
    <url>/2019/03/17/drf%E4%BD%BF%E7%94%A8jwt%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E5%8F%8A%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E7%99%BB%E5%BD%95%E5%92%8C%E5%AF%B9%E8%B1%A1%E6%8B%A5%E6%9C%89%E8%80%85/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote>
<p>pip install djangorestframework-jwt</p>
</blockquote>
<h3 id="setting-py中配置"><a href="#setting-py中配置" class="headerlink" title="setting.py中配置"></a>setting.py中配置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = {</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">            <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">            <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">        ),</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>


<h3 id="urls-py中配置"><a href="#urls-py中配置" class="headerlink" title="urls.py中配置"></a>urls.py中配置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># url(r'^api-token-auth/', views.obtain_auth_token),  # drf自带的认证模式</span></span><br><span class="line">    url(<span class="string">r'^login/'</span>, obtain_jwt_token),  <span class="comment"># jwt的认证接口</span></span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></div>


<h3 id="视图中的配置-在需要登录验证的函数中加入"><a href="#视图中的配置-在需要登录验证的函数中加入" class="headerlink" title="视图中的配置,在需要登录验证的函数中加入"></a>视图中的配置,在需要登录验证的函数中加入</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.authentication <span class="keyword">import</span> JSONWebTokenAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication</span><br><span class="line"><span class="keyword">from</span> apps.utils.permissions <span class="keyword">import</span> IsOwnerOrReadOnly</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFavViewSet</span><span class="params">(mixins.CreateModelMixin,mixins.ListModelMixin,mixins.RetrieveModelMixin,mixins.DestroyModelMixin,viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    permission_classes = (IsAuthenticated, IsOwnerOrReadOnly)  <span class="comment"># 判断用户是否登录</span></span><br><span class="line">    authentication_classes = (JSONWebTokenAuthentication, SessionAuthentication)  <span class="comment"># jwt验证，session验证</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Model.objects.filter(user=self.request.user)  <span class="comment"># 获取当前登录用户的数据</span></span><br></pre></td></tr></tbody></table></figure></div>
<blockquote>
<p>JSONWebTokenAuthentication为jwt验证<br>SessionAuthentication为session验证<br>IsAuthenticated判断是否已登录<br>IsOwnerOrReadOnly判断是否为对象拥有者，继承rest_framework.permissions.permissions</p>
</blockquote>
<h4 id="IsOwnerOrReadOnly代码-permissions-py"><a href="#IsOwnerOrReadOnly代码-permissions-py" class="headerlink" title="IsOwnerOrReadOnly代码 permissions.py"></a>IsOwnerOrReadOnly代码 permissions.py</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsOwnerOrReadOnly</span><span class="params">(permissions.BasePermission)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    对象级权限仅允许对象的所有者对其进行编辑</span></span><br><span class="line"><span class="string">    假设模型实例具有`owner`属性。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span><span class="params">(self, request, view, obj)</span>:</span></span><br><span class="line">        <span class="comment"># 任何请求都允许读取权限，</span></span><br><span class="line">        <span class="comment"># 所以我们总是允许GET，HEAD或OPTIONS 请求.</span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> permissions.SAFE_METHODS:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 示例必须要有一个名为`owner`的属性</span></span><br><span class="line">        <span class="keyword">return</span> obj.user == request.user</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
        <category>restframework</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>drf配置redis缓存</title>
    <url>/2019/04/15/drf%E9%85%8D%E7%BD%AEredis%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="安装django-redis-drf-extensions"><a href="#安装django-redis-drf-extensions" class="headerlink" title="安装django-redis,drf-extensions"></a>安装django-redis,drf-extensions</h3><blockquote>
<p>pip install django-redis<br>pip install drf-extensions</p>
</blockquote>
<h3 id="setting-py配置"><a href="#setting-py配置" class="headerlink" title="setting.py配置"></a>setting.py配置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">CACHES = {</span><br><span class="line">    <span class="string">"default"</span>: {</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://127.0.0.1:6379/1"</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: {</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="在视图函数中设置"><a href="#在视图函数中设置" class="headerlink" title="在视图函数中设置"></a>在视图函数中设置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_extensions.cache.mixins <span class="keyword">import</span> CacheResponseMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodlistViewSet</span><span class="params">(CacheResponseMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet)</span>:</span> <span class="comment"># 继承CacheResponseMixin</span></span><br><span class="line">    <span class="comment"># mixins.RetrieveModelMixin 详情</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    list:</span></span><br><span class="line"><span class="string">        商品列表数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    throttle_classes = (UserRateThrottle, AnonRateThrottle, )</span><br><span class="line">    pagination_class = LargeResultsSetPagination</span><br><span class="line">    filter_backends = (DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter)</span><br><span class="line">    filter_class = GoodsFilter</span><br><span class="line">    search_fields = (<span class="string">'=goods_sn'</span>, <span class="string">'name'</span>, <span class="string">'=goods_num'</span>)</span><br><span class="line">    ordering_fields = (<span class="string">'sold_num'</span>, <span class="string">'add_time'</span>, <span class="string">'shop_price'</span>)</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
        <category>restframework</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>git基础操作</title>
    <url>/2018/01/06/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="用户信息配置"><a href="#用户信息配置" class="headerlink" title="用户信息配置"></a>用户信息配置</h3><blockquote>
<p>git config –global user.name “xxx”<br>git config –global user.email “<a href="mailto:xxx@eamil.com">xxx@eamil.com</a>“</p>
</blockquote>
<h3 id="新建git仓库"><a href="#新建git仓库" class="headerlink" title="新建git仓库"></a>新建git仓库</h3><blockquote>
<p>git init</p>
</blockquote>
<h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><blockquote>
<p>git remote add origin 仓库链接</p>
</blockquote>
<h3 id="上传修改文件"><a href="#上传修改文件" class="headerlink" title="上传修改文件"></a>上传修改文件</h3><blockquote>
<p>git add</p>
</blockquote>
<h3 id="上传文件描述"><a href="#上传文件描述" class="headerlink" title="上传文件描述"></a>上传文件描述</h3><blockquote>
<p>git commit -m “xxx”</p>
</blockquote>
<h3 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h3><blockquote>
<p>git branch new</p>
</blockquote>
<h3 id="切换到新分支"><a href="#切换到新分支" class="headerlink" title="切换到新分支"></a>切换到新分支</h3><blockquote>
<p>git checkout new</p>
</blockquote>
<h3 id="上传分支"><a href="#上传分支" class="headerlink" title="上传分支"></a>上传分支</h3><blockquote>
<p>git push origin master</p>
</blockquote>
<h3 id="拉去更新分支"><a href="#拉去更新分支" class="headerlink" title="拉去更新分支"></a>拉去更新分支</h3><blockquote>
<p>git pull origin master</p>
</blockquote>
<h3 id="更新分支"><a href="#更新分支" class="headerlink" title="更新分支"></a>更新分支</h3><blockquote>
<p>git add<br>git commit -m “xxx”<br>git push origin master</p>
</blockquote>
<h3 id="添加ssh-key"><a href="#添加ssh-key" class="headerlink" title="添加ssh key"></a>添加ssh key</h3><blockquote>
<p>ssh-keygen -t rsa -C “<a href="mailto:your_email@mail.com">your_email@mail.com</a>“</p>
</blockquote>
<p>t 指定密钥类型，默认是 rsa ，可以省略。 -C 设置注释文字，比如邮箱或其他。<br>登录github,点击Settings,然后点击 SSH keys ,在这个页面你可以管理你所有的ssh keys<br>然后点击Add SSH key<br>用文本编辑器打开刚刚添加的key文件id_rsa.pub,复制里面的所有的内容<br>回到github页面,将复制的内容粘贴到刚刚那个页面的key对应的文本框里面,title 可以随便填写<br><a href="%E6%B7%BB%E5%8A%A0sshkey.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E6%B7%BB%E5%8A%A0sshkey.png" class="lazyload"></a></p>
</body></html>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>golang基础</title>
    <url>/2019/09/07/golang%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>在 Go 语言中定义变量有两种方式 : 一般声明和简短声明</p>
<h4 id="一般声明"><a href="#一般声明" class="headerlink" title="一般声明"></a>一般声明</h4><p>一般声明就是使用关键字 var 进行声明 , 格式如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 声明单个变量</span></span><br><span class="line"><span class="keyword">var</span> variableName <span class="keyword">type</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明多个变量</span></span><br><span class="line"><span class="keyword">var</span> variableName1, variableName2, variableName3 <span class="keyword">type</span></span><br><span class="line">或</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    variableName1 <span class="keyword">type</span></span><br><span class="line">    variableName2 <span class="keyword">type</span></span><br><span class="line">    variableName3 <span class="keyword">type</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化值</span></span><br><span class="line">variableName = value</span><br><span class="line">variableName1, variableName2, variableName3 = value1, value2, value3</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明并初始化值</span></span><br><span class="line"><span class="keyword">var</span> variableName <span class="keyword">type</span> = value</span><br><span class="line"><span class="keyword">var</span> variableName1, variableName2, variableName3 <span class="keyword">type</span> = value1, value2, value3</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    variableName1 <span class="keyword">type</span> = value1</span><br><span class="line">    variableName2 <span class="keyword">type</span> = value2</span><br><span class="line">    variableName3 <span class="keyword">type</span> = value3</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果初始化值存在, 可以省略类型, 变量会从初始值中获取类型</span></span><br><span class="line"><span class="keyword">var</span> variableName1, variableName2, variableName3 = value1, value2, value3</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="简短声明"><a href="#简短声明" class="headerlink" title="简短声明"></a>简短声明</h4><p>简短声明是使用 := 来定义变量 , 但是它只能在函数中使用 , 也就是说它只能用来定义局部变量 , 如果要定义全局变量 , 还是需要通过一般声明 var 来进行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    variableName := value</span><br><span class="line">    variableName1, variableName2, variableName3 := value1, value2, value3</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量用于存储不会改变的数据 , 它在编译阶段就已经被确定了 , 并且在程序运行时无法改变</p>
<p>常量的声明与变量类似 , 只不过是使用 const 关键字 , 但是常量只能使用一般声明 , 不能使用简短声明 ( := )</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> constantName = value</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你也可以明确指定常量的类型</span></span><br><span class="line"><span class="keyword">const</span> constantName <span class="keyword">type</span> = value</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义多个常量</span></span><br><span class="line"><span class="keyword">const</span> constantName1, constantName2, constantName3 = value1, value2, value3</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><p>Go 的数据类型有</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">uint</span> <span class="keyword">uint8</span> <span class="keyword">uint16</span> <span class="keyword">uint32</span> <span class="keyword">uint64</span> <span class="keyword">uintptr</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> <span class="comment">// uint8 的别名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">rune</span> <span class="comment">// int32 的别名</span></span><br><span class="line">    <span class="comment">// 表示一个 Unicode 码点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float32</span> <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">complex64</span> <span class="keyword">complex128</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件表达式 {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可使用初始化语句</span></span><br><span class="line"><span class="keyword">if</span> 初始化语句; 条件表达式 {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x < <span class="number">0</span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用初始化语句</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(a, b <span class="keyword">int</span>)</span></span> {</span><br><span class="line">    <span class="keyword">if</span> c := a + b; c < <span class="number">10</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件表达式 {</span><br><span class="line"></span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> 条件表达式 {</span><br><span class="line"></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用初始化语句</span></span><br><span class="line"><span class="keyword">if</span> 初始化语句; 条件表达式 {</span><br><span class="line"></span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> 初始化语句; 条件表达式 {</span><br><span class="line"></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x < <span class="number">0</span> {</span><br><span class="line"></span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> x < <span class="number">5</span> {</span><br><span class="line"></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用初始化语句</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(a, b <span class="keyword">int</span>)</span></span> {</span><br><span class="line">    <span class="keyword">if</span> c := a + b; c < <span class="number">2</span> {</span><br><span class="line"></span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> c := a + b; c > <span class="number">5</span> {</span><br><span class="line"></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p>switch 是编写一连串 if - else 语句的简便方法 , 它运行第一个值等于条件表达式的 case 语句</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> 值 {</span><br><span class="line">    <span class="keyword">case</span> 值:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> 值, 值...:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有条件的switch</span></span><br><span class="line"><span class="keyword">switch</span> {</span><br><span class="line">    <span class="keyword">case</span> 条件表达式:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> 条件表达式, 条件表达式...:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有初始化语句</span></span><br><span class="line"><span class="keyword">switch</span> 初始化语句; 值 {</span><br><span class="line">    <span class="keyword">case</span> 值:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> 值, 值...:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> 初始化语句; {</span><br><span class="line">    <span class="keyword">case</span> 条件表达式:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> 条件表达式, 条件表达式...:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">i := <span class="number">10</span></span><br><span class="line"><span class="keyword">switch</span> i {</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有条件的switch</span></span><br><span class="line"><span class="keyword">switch</span> {</span><br><span class="line"><span class="keyword">case</span> i < <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> i > <span class="number">1</span>, i < <span class="number">5</span>:</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有初始化语句</span></span><br><span class="line"><span class="keyword">switch</span> i := <span class="number">10</span>; i {</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> i := <span class="number">10</span>; {</span><br><span class="line"><span class="keyword">case</span> i < <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> i > <span class="number">1</span>, i < <span class="number">5</span>:</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>switch 语句从上到下执行 , 当匹配成功的时候停止 , 如果需要往下继续执行 , 可以使用 fallthrough 强制执行后面的 case</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">i := <span class="number">10</span></span><br><span class="line"><span class="keyword">switch</span> i {</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    fmt.Println(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    fmt.Println(<span class="number">9</span>)</span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    fmt.Println(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    fmt.Println(<span class="number">7</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">执行结果:</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure></div>
<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 初始化语句; 条件表达式; 后置语句 {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化语句和后置语句是可选的</span></span><br><span class="line"><span class="keyword">for</span> ; 条件表达式; {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// for去掉分号之后将会变成while</span></span><br><span class="line"><span class="keyword">for</span> 条件表达式 {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当省略条件表达式时, for将变成无限循环</span></span><br><span class="line"><span class="keyword">for</span> 初始化语句; ; 后置语句 {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// while同样</span></span><br><span class="line"><span class="keyword">for</span> {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i < <span class="number">10</span>; i++ {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化语句和后置语句是可选的</span></span><br><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ; sum < <span class="number">1000</span>; {</span><br><span class="line">    sum += sum</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// while</span></span><br><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> sum < <span class="number">1000</span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略条件表达式, for变成无限循环</span></span><br><span class="line"><span class="keyword">for</span> sum := <span class="number">1</span>; ; sum++ {</span><br><span class="line">    <span class="keyword">if</span> sum == <span class="number">3</span> {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>当然 break 和 continue 就不用说了</p>
<h4 id="for-range"><a href="#for-range" class="headerlink" title="for-range"></a>for-range</h4><p>用于迭代可迭代的结构 , 如 array 和 map</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> <span class="keyword">map</span> {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h4><p>goto 必须与标签配合使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">HERE:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i++</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span> {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">goto</span> HERE</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>特别注意 : 使用标签和 goto 语句是不被鼓励的 , 因为它们会很快导致非常糟糕的程序设置 , 而且总有更加可读的代替方案来实现相同的需求</p>
<p>除了 goto 之外 , fot , switch 和 select 与都也可以与标签配合使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"></span><br><span class="line">LABEL1:</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i <= <span class="number">5</span>; i++ {</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j <= <span class="number">5</span>; j++ {</span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">4</span> {</span><br><span class="line">                <span class="keyword">continue</span> LABEL1</span><br><span class="line">            }</span><br><span class="line">            fmt.Printf(<span class="string">"i is: %d, and j is: %d\n"</span>, i, j)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 无返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcName</span><span class="params">(input1 type1, input2 type2)</span></span> {</span><br><span class="line">    <span class="keyword">return</span> value1, value2</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcName</span><span class="params">(input1 type1, input2 type2)</span> <span class="title">type</span></span> {</span><br><span class="line">    <span class="keyword">return</span> value1</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcName</span><span class="params">(input1 type1, input2 type2)</span> <span class="params">(output1 type1, output2 type2)</span></span> {</span><br><span class="line">    <span class="keyword">return</span> value1, value2</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcName</span><span class="params">(input1 type1, input2 ...type2)</span> <span class="params">(output1 type1, output2 type2)</span></span> {</span><br><span class="line">    <span class="keyword">return</span> value1, value2</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> {</span><br><span class="line">    <span class="keyword">if</span> a > b {</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> {</span><br><span class="line">    total := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, value := <span class="keyword">range</span> a {</span><br><span class="line">        total = total + value</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p>defer 语句会在函数执行都最后时执行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">"world"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
        <category>Golang基础</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang中什么时候使用指针</title>
    <url>/2019/09/17/golang%E4%B8%AD%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>什么是指针：即一个指针变量指向一个值的内存地址。</p>
<h3 id="使用值类型和指针类型的区别"><a href="#使用值类型和指针类型的区别" class="headerlink" title="使用值类型和指针类型的区别"></a>使用值类型和指针类型的区别</h3><p>首先，我们来看一个计算面积的代码，如下所示。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rect <span class="keyword">struct</span> {                               <span class="comment">//定义一个结构体</span></span><br><span class="line">    width  <span class="keyword">float64</span></span><br><span class="line">    length <span class="keyword">float64</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rect Rect)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span> {               <span class="comment">//定义一个方法，按值传递</span></span><br><span class="line">	<span class="keyword">return</span> rect.width * rect.length</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rect *Rect)</span> <span class="title">area1</span><span class="params">()</span> <span class="title">float64</span></span> {            <span class="comment">//定义一个方法，按指针传递</span></span><br><span class="line">    rect.width *= <span class="number">2</span></span><br><span class="line">    rect.length *= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> rect.width * rect.length</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> rect = <span class="built_in">new</span>(Rect)     <span class="comment">//使用new函数创建一个结构体指针rect，也就是说rect的类型是*Rect</span></span><br><span class="line">    rect.width = <span class="number">100</span></span><br><span class="line">    rect.length = <span class="number">200</span></span><br><span class="line">    fmt.Println(<span class="string">"Width:"</span>, rect.width, <span class="string">"Length:"</span>, rect.length,<span class="string">"Area:"</span>, rect.area())  <span class="comment">//通过结构体指针类型的变量调用area()方法</span></span><br><span class="line">    fmt.Println(<span class="string">"Width:"</span>, rect.width, <span class="string">"Length:"</span>, rect.length,<span class="string">"Area:"</span>, rect.area1())</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>在Go语言中，默认是按值传递。当一个变量当作参数传递的时候，会创建一个变量的副本，然后传递给函数或者方法，你可以看到这个副本的地址和变量的地址是不一样的。当变量当做指针被传递的时候，一个新的指针被创建，它指向变量同样的内存地址，所以你可以将这个指针看成原始变量指针的副本。</p>
<h3 id="故此"><a href="#故此" class="headerlink" title="故此"></a>故此</h3><p>1.是否使用结构体指针，取决于是否要在函数内部改变传递进来的参数的值。如果你的struct足够大，使用指针可以加快效率。如果不使用指针，在函数内部则无法修改struct中的值。<br>2.结构体赋值默认是按值传递，你要改变原来的那个值，要使用指针（即如果你要修改对象本身，那就要传指针，否则修改的是副本）。</p>
<h3 id="go什么情况下使用指针"><a href="#go什么情况下使用指针" class="headerlink" title="go什么情况下使用指针"></a>go什么情况下使用指针</h3><p>1.推荐在方法上使用指针（前提是这个类型不是 map、slice 等引用类型）<br>2.当结构体较大的时候使用指针会更高效，可以避免内存拷贝，“结构较大” 到底多大才算大可能需要自己或团队衡量，如超过5个字段或者根据结构体内存占用来计算<br>3.如果要修改结构体内部的数据或状态必须使用指针<br>4.如果方法的receiver是map、slice 、channel等引用类型不要使用指针<br>5.小数据类型如 bool、int 等没必要使用指针传递<br>6.如果该函数会修改receiver或变量等，使用指针</p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
        <category>Golang基础</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch</title>
    <url>/2020/01/09/elasticsearch/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><p>elasticsearch 原理<br><a href="1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="1.png" class="lazyload"></a></p>
<ol>
<li>首先来看图中, 用户将全文搜索的请求发送至django, 即输入搜索内容</li>
<li>全文搜索需要分词和模糊查询, 这些操作在mysql中也可以使用, 但如果遇到数据量大的项目, 效率会很低, 因此, 就需要借助搜索引擎elasticsearch</li>
<li>要实现查询, 那么我们的django需要连接mysql和elasticsearch:<ol>
<li>连接mysql使用的是mysqlclient</li>
<li>连接elasticsearch使用的是django-haystack, 以及python的es驱动</li>
</ol>
</li>
<li>elasticsearch会去到mysql中获取数据, 然后进行索引, 并储存到它自己那里</li>
<li>然后django就会利用haystack到elasticsearch中查询想要的数据, 即执行搜索</li>
<li>es查询到后返回给haystack(haystack是属于django项目中的一个从外部引入的app)</li>
<li>haystack会返回给django框架, 然后django再展示给用户看, 即展示搜索结果</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>golang接口理解与使用</title>
    <url>/2019/09/16/golang%E6%8E%A5%E5%8F%A3%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="interface是一种类型"><a href="#interface是一种类型" class="headerlink" title="interface是一种类型"></a>interface是一种类型</h3><p>首先 interface 是一种类型，从它的定义可以看出来用了 type 关键字，更准确的说 interface 是一种具有一组方法的类型，这些方法定义了 interface 的行为</p>
<p>go 允许不带任何方法的 interface ，这种类型的 interface 叫 empty interface</p>
<h3 id="interface-变量存储的是实现者的值"><a href="#interface-变量存储的是实现者的值" class="headerlink" title="interface 变量存储的是实现者的值"></a>interface 变量存储的是实现者的值</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> {    </span><br><span class="line">    Get() <span class="keyword">int</span></span><br><span class="line">    Set(<span class="keyword">int</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">type</span> S <span class="keyword">struct</span> {</span><br><span class="line">    Age <span class="keyword">int</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(s S)</span> <span class="title">Get</span><span class="params">()</span><span class="title">int</span></span> {</span><br><span class="line">    <span class="keyword">return</span> s.Age</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(s *S)</span> <span class="title">Set</span><span class="params">(age <span class="keyword">int</span>)</span></span> {</span><br><span class="line">    s.Age = age</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i I)</span></span>{</span><br><span class="line">    i.Set(<span class="number">10</span>)</span><br><span class="line">    fmt.Println(i.Get())</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    s := S{}</span><br><span class="line">    f(&s)  <span class="comment">//4</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>这段代码在 #1 定义了 interface I，在 #2 用 struct S 实现了 I 定义的两个方法，接着在 #3 定义了一个函数 f 参数类型是 I，S 实现了 I 的两个方法就说 S 是 I 的实现者，执行 f(&s) 就完了一次 interface 类型的使用。</p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
        <category>Golang基础</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang的继承</title>
    <url>/2019/09/18/golang%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>对于 go 语言的继承，之前总是模模糊糊的分不清是什么。不知道如何通过何种方式来继承的。<br>然后我就开始对照着 java 的方式，用 java 实现继承，然后用 go 语言实现同样的继承。</p>
<h4 id="Java的继承"><a href="#Java的继承" class="headerlink" title="Java的继承"></a>Java的继承</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 动物类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="keyword">public</span>   String name;</span><br><span class="line">    <span class="keyword">public</span> String subject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>{</span><br><span class="line">        System.out.println(name + <span class="string">"喜欢吃："</span> + food + <span class="string">",它属于："</span> + subject);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猫类。 猫类继承动物类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>{</span><br><span class="line">    <span class="comment">// 猫自己的属性和方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(name + <span class="string">"今年"</span> + age + <span class="string">"岁了，特别喜欢睡觉"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="comment">// 创建一个动物实例</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">        a.name = <span class="string">"动物"</span>;</span><br><span class="line">        a.subject = <span class="string">"动物科"</span>;</span><br><span class="line">        a.eat(<span class="string">"肉"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个猫实例</span></span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        cat.name = <span class="string">"咪咪"</span>;</span><br><span class="line">        cat.subject = <span class="string">"猫科"</span>;</span><br><span class="line">        cat.age = <span class="number">1</span>;</span><br><span class="line">        cat.eat(<span class="string">"鱼"</span>);</span><br><span class="line">        cat.sleep();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">输出结果入下：</span><br><span class="line">    动物喜欢吃：肉,它属于：动物科</span><br><span class="line">    咪咪喜欢吃：鱼,它属于：猫科</span><br><span class="line">    咪咪今年1岁了，特别喜欢睡觉</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="golang的继承"><a href="#golang的继承" class="headerlink" title="golang的继承"></a>golang的继承</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动物类</span></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> {</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">  subject <span class="keyword">string</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动物的公共方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Animal)</span> <span class="title">eat</span><span class="params">(food <span class="keyword">string</span>)</span></span> {</span><br><span class="line">  fmt.Println(a.name + <span class="string">"喜欢吃："</span> + food +<span class="string">",它属于:"</span> + a.subject)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猫类，继承动物类</span></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> {</span><br><span class="line">  <span class="comment">// 继承动物的属性和方法</span></span><br><span class="line">  Animal</span><br><span class="line">  <span class="comment">// 猫自己的属性</span></span><br><span class="line">  age <span class="keyword">int</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猫类独有的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cat)</span> <span class="title">sleep</span><span class="params">()</span></span> {</span><br><span class="line">  fmt.Println(c.name + <span class="string">" 今年"</span> + strconv.Itoa(c.age) + <span class="string">"岁了,特别喜欢睡觉"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">  <span class="comment">// 创建一个动物类</span></span><br><span class="line">  animal := Animal{name:<span class="string">"动物"</span>, subject:<span class="string">"动物科"</span>}</span><br><span class="line">  animal.eat(<span class="string">"肉"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个猫类</span></span><br><span class="line">  cat := Cat{Animal: Animal{name:<span class="string">"咪咪"</span>, subject:<span class="string">"猫科"</span>},age:<span class="number">1</span>}</span><br><span class="line">  cat.eat(<span class="string">"鱼"</span>)</span><br><span class="line">  cat.sleep()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">    动物喜欢吃：肉,它属于:动物科</span><br><span class="line">    咪咪喜欢吃：鱼,它属于:猫科</span><br><span class="line">    咪咪 今年1岁了,特别喜欢睡觉</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>在 go 语言中， type name struct{} 结构体 就相当于其他语言中的 class 类的概念。</li>
<li>在其他语言中，方法是直接写在在 类 里面的，而在 go 语言中，我们对于该结构体，如果存在方法，比如猫咪存在睡觉的方法那么是以 func (结构体名) 方法名{}，即 func(c Cat) sleep{} 的方式来声明方法。</li>
<li>在 java 中， string + int = string，int 类型的值不需要类型转换，而在 go 语言中，string + int，如果想要一个字符串，则需要对 int 类型的值转换为 string 类型，然后才能拼接。</li>
</ol>
<h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><ol>
<li>结构体解决的是基本数据类型不能满足我们日常需要的问题。再简单点理解就是一个结构体就是一个 json 类型的 object。</li>
<li>接口是一种类型。是一种特殊的类型，它规定了不同结构体有哪些相同的行为，只是制定标准，而不实现标准。就好比自来水厂只规定水龙头的半径大小，而不去考虑谁生产水龙头，生产水龙头的厂家不管用什么材料，只需要按照自来水厂的标准制定就好。</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
        <category>Golang基础</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang并发</title>
    <url>/2020/01/25/golang%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>线程是操作系统进行运算调度的最小单位，它是操作系统内核进行调度的，可以将其理解为“轻量级进程”。但是无论如何，作为一个内核态的调度，控制权限从线程A到线程B需要经历一个完整的内核态上下文切换。而Go语言的调度器不需要切换到内核语境，由它的语言结构完成线程的调度。这在很大程度上节省了无用的时间开销。</p>
<h4 id="goroutine用法"><a href="#goroutine用法" class="headerlink" title="goroutine用法"></a>goroutine用法</h4><p>使用“go”关键词即可以创建一个goroutine。go Function(param1, …)将会在相同的地址空间运行这个函数，并实现函数的并发操作。<br>goroutine有些类似于协程，但一般来说，协程是不支持并发的，而goroutine是支持并发操作的，一个简单的用法如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test_loop</span><span class="params">(id <span class="keyword">string</span>, times <span class="keyword">int</span>)</span></span> {</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span> i < times; i++ {</span><br><span class="line">        fmt.Printf(<span class="string">"%s: Time %d"</span>, id, i)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">go</span> test_loop(<span class="string">"ID 1"</span>, <span class="number">10</span>) <span class="comment">// 启动一个goroutine</span></span><br><span class="line">    time.Sleep(time.Second) <span class="comment">// 让主程序休眠一秒</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>注意，如果没有让主程序休眠一秒，那么有可能在goroutine执行完前主线程已经终止，从而使得goroutine没有执行完成就被迫终止。</p>
<h3 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h3><p>通道是goroutine直接的连接方式，是可以让一个goroutine发送特定值到另一个goroutine的通信机制，每一个通道都有一个具体的对应类型。创建一个通道的语法如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>) <span class="comment">// 创建一个chan int类型的无缓冲通道</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">0</span>) <span class="comment">// 创建一个chan int类型的无缓冲通道</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span>, <span class="keyword">int</span>, <span class="number">10</span>) <span class="comment">// 创建一个容量为10的chan int类型的缓冲通道</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>通道主要支持三种操作，分别为发送，接收和关闭，其语法如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">ch <- x <span class="comment">// 发送</span></span><br><span class="line"></span><br><span class="line">x = <- ch <span class="comment">// 接收并赋值</span></span><br><span class="line"><- ch <span class="comment">// 接收并丢弃</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">close</span>(ch) <span class="comment">// 关闭</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>利用通道，我们可以实现goroutine间的连接，形成一个管道（pipeline），使得goroutine间能够互相通信。</p>
<h4 id="单向通道"><a href="#单向通道" class="headerlink" title="单向通道"></a>单向通道</h4><p>在实际使用中，多数情况下一个通道只需完成发送或者接收中的一个功能。为了安全性问题，GO语言也提供了单向通道类型。例如在下面生产者和消费者的示例中，生产者只负责发送数据给通道，而消费者只负责从通道中取出数据，它们的代码分别如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">producer</span><span class="params">(data <span class="keyword">string</span>, channel <span class="keyword">chan</span> <- <span class="keyword">string</span>)</span></span> {</span><br><span class="line">    <span class="comment">// 类型chan <- string是一个只能发送数据的通道</span></span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consumer</span><span class="params">(channel <- <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> {</span><br><span class="line">    <span class="comment">// 类型<- chan string是一个只能接收数据的通道</span></span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="事例"><a href="#事例" class="headerlink" title="事例"></a>事例</h3><p>我们可以用goroutine和channel能模拟一个生产者和消费者的情景，生产者可以无限循环产生新的数据到channel中，而消费者可以通过无限循环来从channel中获取数据。<br>生产者函数如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 生产者函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">producer</span><span class="params">(data <span class="keyword">string</span>, channel <span class="keyword">chan</span> <- <span class="keyword">string</span>)</span></span> {</span><br><span class="line">     <span class="comment">// 生产者开始生产</span></span><br><span class="line">     <span class="keyword">for</span> {</span><br><span class="line">            <span class="comment">// 将随机数和字符串格式化为字符串发送给通道</span></span><br><span class="line">            fmt.Printf(<span class="string">"Produced: %s\n"</span>, data)</span><br><span class="line">            channel <- fmt.Sprintf(<span class="string">"%s"</span>, data)</span><br><span class="line"></span><br><span class="line">            time.Sleep(time.Second)</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>消费者函数如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 消费者函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consumer</span><span class="params">(channel <- <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> {</span><br><span class="line">     <span class="comment">// 消费者开始消费</span></span><br><span class="line">     <span class="keyword">for</span> {</span><br><span class="line">            <span class="comment">// 从通道中取出数据, 此处会阻塞直到信道中返回数据</span></span><br><span class="line">            data := <- channel</span><br><span class="line">            fmt.Printf(<span class="string">"Consumed: %s\n"</span>, data)</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>利用goroutine，我们无需像操作系统中的做法，在生产者和消费者间添加各种互斥锁，也不需要我们手动去实现对信道的阻塞。例如，在执行“message := <- channel”时，程序从channel中取出数据时，会使自己处于阻塞态直到channel中返回数据。</p>
<p>这样，我们就可以实现一个“生产者与消费者”的经典问题，即父亲每秒生产一个苹果到盘子中，母亲每秒生产一个香蕉到盘子中，儿子当盘中有水果时，就会按水果生产的水果将水果吃掉。主函数如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">go</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">    <span class="comment">// 创建父亲生产者和母亲生产者</span></span><br><span class="line">    <span class="keyword">go</span> producer(<span class="string">"apple"</span>, channel)</span><br><span class="line">    <span class="keyword">go</span> producer(<span class="string">"banana"</span>, channel)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者开始消费</span></span><br><span class="line">    consumer(channel)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Produced: banana</span><br><span class="line">Produced: apple</span><br><span class="line">Consumed: banana</span><br><span class="line">Consumed: apple</span><br><span class="line">Produced: banana</span><br><span class="line">Consumed: banana</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>利用channel可以实现不同协程之间的通信，golang提倡“share memory by communicating”而不是“communicate by sharing memory”，这样可以避免竞争状况下复杂的互斥锁机制。</p>
<p>goroutine使得用户能在用户态实现一个轻量级的“线程创建”，而通道则负责完成这些goroutine间的通信。通道的独写操作类似于操作系统下P/V信号量，让系统无须陷入内核态就可以完成协程间的通信。</p>
</body></html>]]></content>
      <categories>
        <category>Golang</category>
        <category>Golang基础</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2018/10/16/mysql/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h4 id="MySql-Oracle，Sql-Service的区别"><a href="#MySql-Oracle，Sql-Service的区别" class="headerlink" title="MySql, Oracle，Sql Service的区别"></a>MySql, Oracle，Sql Service的区别</h4><ol>
<li>Oracle没有自动增长类型，Mysql和Sql Service一般使用自动增长类型</li>
<li>做分页的话，MySql使用Limit，Sql Service使用top，Oracle使用row</li>
<li>Oracle支持多用户不同权限来进行操作，而MySql只要有登录权限就可操作全部数据库</li>
</ol>
<h4 id="数据库三大范式"><a href="#数据库三大范式" class="headerlink" title="数据库三大范式"></a>数据库三大范式</h4><p>第一范式：每个列都不可以再拆分。<br>第二范式：在第一范式的基础上，非主键列完全依赖于主键，而不能是依赖于主键的一部分。<br>第三范式：在第二范式的基础上，非主键列只依赖于主键，不依赖于其他非主键。</p>
<h4 id="Mysql事务"><a href="#Mysql事务" class="headerlink" title="Mysql事务"></a>Mysql事务</h4><p>事务(transaction)是作为一个单元的一组有序的数据库操作(sql语句分组)。</p>
<h5 id="事务的四大特性-ACID"><a href="#事务的四大特性-ACID" class="headerlink" title="事务的四大特性(ACID)"></a>事务的四大特性(ACID)</h5><ol>
<li><p>原子性(Atomicity)：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</p>
</li>
<li><p>一致性(Consistency)：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；</p>
</li>
<li><p>隔离性(lsolation)：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</p>
</li>
<li><p>持久性(Durability)：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</p>
</li>
</ol>
<h5 id="什么是脏读？幻读？不可重复读？"><a href="#什么是脏读？幻读？不可重复读？" class="headerlink" title="什么是脏读？幻读？不可重复读？"></a>什么是脏读？幻读？不可重复读？</h5><ol>
<li>脏读：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。</li>
<li>不可重复读：不可重复读(Non-repeatable read):在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。</li>
<li>幻读：在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。</li>
</ol>
<h5 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h5><p>SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。</p>
<ol>
<li><p>读取未提交内容(Read Uncommitted)：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</p>
</li>
<li><p>读取提交内容(Read Committed)：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</p>
</li>
<li><p>可重复读(Repeatable Read)：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</p>
</li>
<li><p>串行读(Serializable)：最高的隔离级别。通过强制事务排序，使之不能互相冲突，从而解决幻读问题。简言之，在每个读的数据行上加上共享锁。在这个级别时，可能导致大量的超时现象和锁竞争。</p>
</li>
</ol>
<h4 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h4><h5 id="六种关联查询"><a href="#六种关联查询" class="headerlink" title="六种关联查询"></a>六种关联查询</h5><ol>
<li>交叉连接</li>
<li>内连接</li>
<li>外连接</li>
<li>联合查询</li>
<li>全连接</li>
<li>交叉连接</li>
</ol>
<h4 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h4><ol>
<li>选取最适合的字段属性<br>例如 在定义邮政编码这个字段的时候，如果设置为char(255)，就会给数据库增加不必要的空间，甚至使用varchar这种类型也是多余的，char(6)就够了</li>
<li>尽量把字段设置为not null<br>这样执行查询时，数据库不会去比较Null值</li>
<li>优化查询语句</li>
<li>使用索引<br>查询时使用join代替子查询<br>尽量使用一条或者少数几条语句完成</li>
<li>使用外键</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>数据库</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql表设计注意问题</title>
    <url>/2019/10/07/mysql%E8%A1%A8%E8%AE%BE%E8%AE%A1%E6%B3%A8%E6%84%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><a id="more"></a>
<h5 id="为什么一定要设一个主键？"><a href="#为什么一定要设一个主键？" class="headerlink" title="为什么一定要设一个主键？"></a>为什么一定要设一个主键？</h5><p>不管设置不设置主键，innodb也会生成一个隐藏列，作为自增主键。所以啦，反正都要生成一个主键，那你还不如自己指定一个主键，在有些情况下，就能显式的用上主键索引，提高查询效率！</p>
<h5 id="主键是用自增还是UUID"><a href="#主键是用自增还是UUID" class="headerlink" title="主键是用自增还是UUID?"></a>主键是用自增还是UUID?</h5><p>自增。数据在物理结构上是顺序存储，性能最好。</p>
<h6 id="自增主键用完后怎么办？"><a href="#自增主键用完后怎么办？" class="headerlink" title="自增主键用完后怎么办？"></a>自增主键用完后怎么办？</h6><p>把自增主键改成bigint类型就好了。不过一般int类型用不到最大值，就分表分库了。</p>
<h5 id="主键为什么不推荐有业务含义"><a href="#主键为什么不推荐有业务含义" class="headerlink" title="主键为什么不推荐有业务含义?"></a>主键为什么不推荐有业务含义?</h5><ol>
<li>因为任何有业务含义的列都有改变的可能性,主键一旦带上了业务含义，那么主键就有可能发生变更。主键一旦发生变更，该数据在磁盘上的存储位置就会发生变更，有可能会引发页分裂，产生空间碎片。</li>
<li>带有业务含义的主键，不一定是顺序自增的。那么就会导致数据的插入顺序，并不能保证后面插入数据的主键一定比前面的数据大。如果出现了，后面插入数据的主键比前面的小，就有可能引发页分裂，产生空间碎片。</li>
</ol>
<h5 id="表示枚举的字段为什么不用enum类型？"><a href="#表示枚举的字段为什么不用enum类型？" class="headerlink" title="表示枚举的字段为什么不用enum类型？"></a>表示枚举的字段为什么不用enum类型？</h5><ol>
<li>ENUM类型的ORDER BY操作效率低，需要额外操作</li>
<li>如果枚举值是数值，有陷阱</li>
</ol>
<h5 id="货币字段用什么类型"><a href="#货币字段用什么类型" class="headerlink" title="货币字段用什么类型?"></a>货币字段用什么类型?</h5><p>如果货币单位是分，可以用Int类型。如果坚持用元，用Decimal[ˈdes(ə)məl]。<br>千万不要答float和double，因为float和double是以二进制存储的，所以有一定的误差。</p>
<h5 id="时间字段用什么类型"><a href="#时间字段用什么类型" class="headerlink" title="时间字段用什么类型?"></a>时间字段用什么类型?</h5><ol>
<li>varchar，如果用varchar类型来存时间，优点在于显示直观。但是坑的地方也是挺多的。比如，插入的数据没有校验，你可能某天就发现一条数据为2013111的数据，请问这是代表2013年1月11日，还是2013年11月1日？<br>其次，做时间比较运算，你需要用STR_TO_DATE等函数将其转化为时间类型，你会发现这么写是无法命中索引的。数据量一大，是个坑！</li>
<li>timestamp，该类型是四个字节的整数，它能表示的时间范围为1970-01-01 08:00:01到2038-01-19 11:14:07。2038年以后的时间，是无法用timestamp类型存储的。<br>但是它有一个优势，timestamp类型是带有时区信息的。一旦你系统中的时区发生改变，例如你修改了时区<br>SET TIME_ZONE = “america/new_york”;<br>你会发现，项目中的该字段的值自己会发生变更。这个特性用来做一些国际化大项目，跨时区的应用时，特别注意！</li>
<li>datetime，datetime储存占用8个字节，它存储的时间范围为1000-01-01 00:00:00 ~ 9999-12-31 23:59:59。显然，存储时间范围更大。但是它坑的地方在于，他存储的是时间绝对值，不带有时区信息。如果你改变数据库的时区，该项的值不会自己发生变更！</li>
<li>bigint，也是8个字节，自己维护一个时间戳，表示范围比timestamp大多了，就是要自己维护，不大方便。</li>
</ol>
<h5 id="为什么不直接存储图片、音频、视频等大容量内容"><a href="#为什么不直接存储图片、音频、视频等大容量内容" class="headerlink" title="为什么不直接存储图片、音频、视频等大容量内容?"></a>为什么不直接存储图片、音频、视频等大容量内容?</h5><p>我们在实际应用中，都是用HDFS来存储文件。然后mysql中，只存文件的存放路径。mysql中有两个字段类型被用来设计存放大容量文件，也就是text和blob类型。但是，我们在生产中，基本不用这两个类型！</p>
<ol>
<li>Mysql内存临时表不支持TEXT、BLOB这样的大数据类型，如果查询中包含这样的数据，在排序等操作时，就不能使用内存临时表，必须使用磁盘临时表进行。导致查询效率缓慢</li>
<li>binlog内容太多。因为你数据内容比较大，就会造成binlog内容比较多。大家也知道，主从同步是靠binlog进行同步，binlog太大了，就会导致主从同步效率问题！</li>
</ol>
<h6 id="字段为什么要定义为NOT-NULL"><a href="#字段为什么要定义为NOT-NULL" class="headerlink" title="字段为什么要定义为NOT NULL?"></a>字段为什么要定义为NOT NULL?</h6><ol>
<li>索引性能不好</li>
<li>查询会出现一些不可预料的结果<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table_2 (</span><br><span class="line">	 <span class="string">`id`</span> <span class="built_in">INT</span> (<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure></div>
表数据是这样的<br>id    name<br>1    孤独烟<br>3<br>5    肥朝<br>7<br>你执行语句<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">name</span>) <span class="keyword">from</span> table_2;</span><br></pre></td></tr></tbody></table></figure></div>
会发现结果为2，但是实际上是有四条数据的！</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>数据库</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>pyqt5弹出窗口代码实例大全</title>
    <url>/2020/10/15/pyqt5%E5%BC%B9%E5%87%BA%E7%AA%97%E5%8F%A3%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="PyQT5弹出窗口代码大全"><a href="#PyQT5弹出窗口代码大全" class="headerlink" title="PyQT5弹出窗口代码大全"></a>PyQT5弹出窗口代码大全</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, pyqtSignal, QTimer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">'PyQt5 弹出窗口（框）大全'</span>)</span><br><span class="line">        self.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 全局布局（注意参数 self）</span></span><br><span class="line">        wl = QVBoxLayout(self)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 局部布局</span></span><br><span class="line">        h1 = QHBoxLayout()  <span class="comment"># 输入框</span></span><br><span class="line">        h2 = QHBoxLayout()  <span class="comment"># 消息窗口</span></span><br><span class="line">        h3 = QHBoxLayout()  <span class="comment"># 文件（夹）打开，保存</span></span><br><span class="line">        h4 = QHBoxLayout()  <span class="comment"># 颜色、字体、自定义</span></span><br><span class="line"></span><br><span class="line">        btn11 = QPushButton(<span class="string">'输入：整数'</span>)</span><br><span class="line">        btn12 = QPushButton(<span class="string">'输入：小数'</span>)</span><br><span class="line">        btn13 = QPushButton(<span class="string">'输入：文本'</span>)</span><br><span class="line">        btn14 = QPushButton(<span class="string">'输入：多文'</span>)</span><br><span class="line">        btn15 = QPushButton(<span class="string">'输入：选项'</span>)</span><br><span class="line"></span><br><span class="line">        btn21 = QPushButton(<span class="string">'消息：信息'</span>)</span><br><span class="line">        btn22 = QPushButton(<span class="string">'消息：问答'</span>)</span><br><span class="line">        btn23 = QPushButton(<span class="string">'消息：警告'</span>)</span><br><span class="line">        btn24 = QPushButton(<span class="string">'消息：危险'</span>)</span><br><span class="line">        btn25 = QPushButton(<span class="string">'消息：关于'</span>)</span><br><span class="line"></span><br><span class="line">        btn31 = QPushButton(<span class="string">'文件：文件夹'</span>)</span><br><span class="line">        btn32 = QPushButton(<span class="string">'文件：单文件'</span>)</span><br><span class="line">        btn33 = QPushButton(<span class="string">'文件：多文件'</span>)</span><br><span class="line">        btn34 = QPushButton(<span class="string">'文件：保存'</span>)</span><br><span class="line">        btn35 = QPushButton(<span class="string">'文件：另存为'</span>)</span><br><span class="line"></span><br><span class="line">        btn41 = QPushButton(<span class="string">'颜色'</span>)</span><br><span class="line">        btn42 = QPushButton(<span class="string">'字体'</span>)</span><br><span class="line">        btn43 = QPushButton(<span class="string">'自定义'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> btn <span class="keyword">in</span> (btn11, btn12, btn13, btn14, btn15):</span><br><span class="line">            h1.addWidget(btn)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> btn <span class="keyword">in</span> (btn21, btn22, btn23, btn24, btn25):</span><br><span class="line">            h2.addWidget(btn)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> btn <span class="keyword">in</span> (btn31, btn32, btn33, btn34, btn35):</span><br><span class="line">            h3.addWidget(btn)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> btn <span class="keyword">in</span> (btn41, btn42, btn43):</span><br><span class="line">            h4.addWidget(btn)</span><br><span class="line"></span><br><span class="line">        btn11.clicked.connect(self.do_btn11)  <span class="comment"># 输入：整数</span></span><br><span class="line">        btn12.clicked.connect(self.do_btn12)  <span class="comment"># 输入：小数</span></span><br><span class="line">        btn13.clicked.connect(self.do_btn13)  <span class="comment"># 输入：文本</span></span><br><span class="line">        btn14.clicked.connect(self.do_btn14)  <span class="comment"># 输入：多文</span></span><br><span class="line">        btn15.clicked.connect(self.do_btn15)  <span class="comment"># 输入：选项</span></span><br><span class="line"></span><br><span class="line">        btn21.clicked.connect(self.do_btn21)  <span class="comment"># 消息：信息</span></span><br><span class="line">        btn22.clicked.connect(self.do_btn22)  <span class="comment"># 消息：问答</span></span><br><span class="line">        btn23.clicked.connect(self.do_btn23)  <span class="comment"># 消息：警告</span></span><br><span class="line">        btn24.clicked.connect(self.do_btn24)  <span class="comment"># 消息：危险</span></span><br><span class="line">        btn25.clicked.connect(self.do_btn25)  <span class="comment"># 消息：关于</span></span><br><span class="line"></span><br><span class="line">        btn31.clicked.connect(self.do_btn31)  <span class="comment"># 文件：文件夹</span></span><br><span class="line">        btn32.clicked.connect(self.do_btn32)  <span class="comment"># 文件：单文件</span></span><br><span class="line">        btn33.clicked.connect(self.do_btn33)  <span class="comment"># 文件：多文件</span></span><br><span class="line">        btn34.clicked.connect(self.do_btn34)  <span class="comment"># 文件：保存</span></span><br><span class="line">        btn35.clicked.connect(self.do_btn35)  <span class="comment"># 文件：另存为</span></span><br><span class="line"></span><br><span class="line">        btn41.clicked.connect(self.do_btn41)  <span class="comment"># 颜色</span></span><br><span class="line">        btn42.clicked.connect(self.do_btn42)  <span class="comment"># 字体</span></span><br><span class="line">        btn43.clicked.connect(self.do_btn43)  <span class="comment"># 自定义</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加到全局布局</span></span><br><span class="line">        wl.addLayout(h1)</span><br><span class="line">        wl.addLayout(h2)</span><br><span class="line">        wl.addLayout(h3)</span><br><span class="line">        wl.addLayout(h4)</span><br><span class="line"></span><br><span class="line">        self.window2 = MyWindow2()  <span class="comment"># 自定义窗口</span></span><br><span class="line">        self.window2.before_close_signal.connect(self.echo)  <span class="comment"># 接收自定义窗口关闭时发送过来的信号，交给 echo 函数显示</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="string">'''显示对话框返回值'''</span></span><br><span class="line">        QMessageBox.information(self, <span class="string">"返回值"</span>, <span class="string">"得到：{}\n\ntype: {}"</span>.format(value, type(value)),</span><br><span class="line">                                QMessageBox.Yes | QMessageBox.No)</span><br><span class="line">        <span class="comment"># pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># =====================================================================</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn11</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 输入：整数</span></span><br><span class="line">        <span class="comment"># 后面四个数字的作用依次是 初始值 最小值 最大值 步幅</span></span><br><span class="line">        value, ok = QInputDialog.getInt(self, <span class="string">"输入框标题"</span>, <span class="string">"这是提示信息\n\n请输入整数:"</span>, <span class="number">37</span>, <span class="number">-10000</span>, <span class="number">10000</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># self.echo(value)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn12</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 输入：小数</span></span><br><span class="line">        <span class="comment"># 后面四个数字的作用依次是 初始值 最小值 最大值 小数点后位数</span></span><br><span class="line">        value, ok = QInputDialog.getDouble(self, <span class="string">"输入框标题"</span>, <span class="string">"这是提示信息\n\n请输入整数:"</span>, <span class="number">37.56</span>, <span class="number">-10000</span>, <span class="number">10000</span>, <span class="number">2</span>)</span><br><span class="line">        self.echo(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn13</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 输入：文本</span></span><br><span class="line">        <span class="comment"># 第三个参数表示显示类型，可选，有正常（QLineEdit.Normal）、密碼（ QLineEdit. Password）、不显示（ QLineEdit. NoEcho）三种情况</span></span><br><span class="line">        value, ok = QInputDialog.getText(self, <span class="string">"输入框标题"</span>, <span class="string">"这是提示信息\n\n请输入文本:"</span>, QLineEdit.Normal, <span class="string">"这是默认值"</span>)</span><br><span class="line">        self.echo(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn14</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 输入：多文</span></span><br><span class="line">        value, ok = QInputDialog.getMultiLineText(self, <span class="string">"输入框标题"</span>, <span class="string">"这是提示信息\n\n请输入地址:"</span>, <span class="string">"默认的\n我的地址是\n中国广东广州番禺"</span>)</span><br><span class="line">        self.echo(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn15</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 输入：选项</span></span><br><span class="line">        <span class="comment"># 1为默认选中选项目，True/False  列表框是否可编辑。</span></span><br><span class="line">        items = [<span class="string">"Spring"</span>, <span class="string">"Summer"</span>, <span class="string">"Fall"</span>, <span class="string">"Winter"</span>]</span><br><span class="line">        value, ok = QInputDialog.getItem(self, <span class="string">"输入框标题"</span>, <span class="string">"这是提示信息\n\n请选择季节:"</span>, items, <span class="number">1</span>, <span class="literal">True</span>)</span><br><span class="line">        self.echo(value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># =====================================================================</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn21</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 消息：信息</span></span><br><span class="line">        reply = QMessageBox.information(self,</span><br><span class="line">                                        <span class="string">"消息框标题"</span>,</span><br><span class="line">                                        <span class="string">"这是一条消息。"</span>,</span><br><span class="line">                                        QMessageBox.Yes | QMessageBox.No)</span><br><span class="line">        self.echo(reply)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn22</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 消息：问答</span></span><br><span class="line">        reply = QMessageBox.question(self,</span><br><span class="line">                                     <span class="string">"消息框标题"</span>,</span><br><span class="line">                                     <span class="string">"这是一条问答吗？"</span>,</span><br><span class="line">                                     QMessageBox.Yes | QMessageBox.No)</span><br><span class="line">        self.echo(reply)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn23</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 消息：警告</span></span><br><span class="line">        reply = QMessageBox.warning(self,</span><br><span class="line">                                    <span class="string">"消息框标题"</span>,</span><br><span class="line">                                    <span class="string">"这是一条警告！"</span>,</span><br><span class="line">                                    QMessageBox.Yes | QMessageBox.No)</span><br><span class="line">        self.echo(reply)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn24</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 消息：危险</span></span><br><span class="line">        reply = QMessageBox.ctitical(self,</span><br><span class="line">                                     <span class="string">"消息框标题"</span>,</span><br><span class="line">                                     <span class="string">"危险！程序即将强制退出！！！\n\n这个按钮再也点不开。"</span>,</span><br><span class="line">                                     QMessageBox.Yes | QMessageBox.No)</span><br><span class="line">        self.echo(reply)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn25</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 消息：关于</span></span><br><span class="line">        reply = QMessageBox.about(self,</span><br><span class="line">                                  <span class="string">"消息框标题"</span>,</span><br><span class="line">                                  <span class="string">"这是关于软件的说明。。。"</span>,</span><br><span class="line">                                  QMessageBox.Yes | QMessageBox.No)</span><br><span class="line">        self.echo(reply)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># =====================================================================</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn31</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 文件：文件夹</span></span><br><span class="line">        dir = QFileDialog.getExistingDirectory(self,</span><br><span class="line">                                               <span class="string">"选取文件夹"</span>,</span><br><span class="line">                                               <span class="string">"C:/"</span>)  <span class="comment"># 起始路径</span></span><br><span class="line">        self.echo(dir)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn32</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 文件：单文件</span></span><br><span class="line">        file_, filetype = QFileDialog.getOpenFileName(self,</span><br><span class="line">                                                      <span class="string">"选取文件"</span>,</span><br><span class="line">                                                      <span class="string">"C:/"</span>,</span><br><span class="line">                                                      <span class="string">"All Files (*);;Text Files (*.txt)"</span>)  <span class="comment"># 设置文件扩展名过滤,注意用双分号间隔</span></span><br><span class="line">        self.echo(file_)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn33</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 文件：多文件</span></span><br><span class="line">        files, ok = QFileDialog.getOpenFileNames(self,</span><br><span class="line">                                                 <span class="string">"多文件选择"</span>,</span><br><span class="line">                                                 <span class="string">"C:/"</span>,</span><br><span class="line">                                                 <span class="string">"All Files (*);;Text Files (*.txt)"</span>)</span><br><span class="line">        self.echo(files)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn34</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 文件：保存</span></span><br><span class="line">        file_, ok = QFileDialog.getSaveFileName(self,</span><br><span class="line">                                                <span class="string">"文件保存"</span>,</span><br><span class="line">                                                <span class="string">"C:/"</span>,</span><br><span class="line">                                                <span class="string">"All Files (*);;Text Files (*.txt)"</span>)</span><br><span class="line">        self.echo(file_)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn35</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 文件：另存为</span></span><br><span class="line">        file_, ok = QFileDialog.getSaveFileName(self,</span><br><span class="line">                                                <span class="string">"文件另存为"</span>,</span><br><span class="line">                                                <span class="string">"C:/"</span>,</span><br><span class="line">                                                <span class="string">"All Files (*);;Text Files (*.txt)"</span>)</span><br><span class="line">        self.echo(file_)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># =====================================================================</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn41</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 颜色</span></span><br><span class="line">        color = QColorDialog.getColor(Qt.blue, self, <span class="string">"Select Color"</span>)</span><br><span class="line">        self.echo(color)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn42</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 字体</span></span><br><span class="line">        font, ok = QFontDialog.getFont()</span><br><span class="line">        self.echo(font)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_btn43</span><span class="params">(self, event)</span>:</span>  <span class="comment"># 自定义</span></span><br><span class="line"></span><br><span class="line">        self.window2.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow2</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="string">'''自定义窗口'''</span></span><br><span class="line">    <span class="comment"># 知识点：</span></span><br><span class="line">    <span class="comment"># 1.为了得到返回值用到了自定义的信号/槽</span></span><br><span class="line">    <span class="comment"># 2.为了显示动态数字，使用了计时器</span></span><br><span class="line"></span><br><span class="line">    before_close_signal = pyqtSignal(int)  <span class="comment"># 自定义信号（int类型）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">        self.sec = <span class="number">0</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'自定义窗口'</span>)</span><br><span class="line">        self.resize(<span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.lcd = QLCDNumber(<span class="number">18</span>, self)</span><br><span class="line">        btn1 = QPushButton(self, text=<span class="string">"测试"</span>)</span><br><span class="line">        btn2 = QPushButton(self, text=<span class="string">"关闭"</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout(self)</span><br><span class="line">        layout.addWidget(self.lcd)</span><br><span class="line">        layout.addWidget(btn1)</span><br><span class="line">        layout.addWidget(btn2)</span><br><span class="line"></span><br><span class="line">        self.timer = QTimer()</span><br><span class="line"></span><br><span class="line">        self.timer.timeout.connect(self.update)  <span class="comment"># 每次计时结束，触发update</span></span><br><span class="line">        btn1.clicked.connect(self.startTimer)</span><br><span class="line">        btn2.clicked.connect(self.stopTimer)  <span class="comment"># 去到关闭前的处理</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sec += <span class="number">1</span></span><br><span class="line">        self.lcd.display(self.sec)  <span class="comment"># LED显示数字+1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startTimer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.timer.start(<span class="number">1000</span>)  <span class="comment"># 计时器每秒计数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stopTimer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.timer.stop()</span><br><span class="line">        self.sec = <span class="number">0</span></span><br><span class="line">        self.before_close_signal.emit(self.lcd.value())  <span class="comment"># 发送信号，带参数 888</span></span><br><span class="line">        self.close()  <span class="comment"># 然后窗口关闭</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 默认关闭事件     def closeEvent(self, e):        self.stopTimer()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = MyWindow()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Pyqt5</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx+uwsgi部署django项目步骤</title>
    <url>/2019/12/21/nginx+uwsgi%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h3><h4 id="项目环境准备"><a href="#项目环境准备" class="headerlink" title="项目环境准备"></a>项目环境准备</h4><p>安装启动nginx</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br><span class="line">sudo /etc/init.d/nginx restart</span><br></pre></td></tr></tbody></table></figure></div>
<p>验证<br>打开浏览器输入: 127.0.0.1:80 -> Welcome to Nginx</p>
<p>安装uwsgi</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo pip3 install uwsgi</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="部署配置"><a href="#部署配置" class="headerlink" title="部署配置"></a>部署配置</h4><h5 id="1-在项目目录中新建文件SourcelistUwsgi-ini文件"><a href="#1-在项目目录中新建文件SourcelistUwsgi-ini文件" class="headerlink" title="1. 在项目目录中新建文件SourcelistUwsgi.ini文件"></a>1. 在项目目录中新建文件SourcelistUwsgi.ini文件</h5><p>  在配置文件中写入如下内容：<br>  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ini</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="comment"># 指定和nginx通信的端口</span></span><br><span class="line"><span class="attr">socket</span>=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8001</span></span><br><span class="line"><span class="comment"># 项目路径</span></span><br><span class="line"><span class="attr">chdir</span>=/home/sourcelist/project/Sourcelist</span><br><span class="line"><span class="comment"># wsgi.py路径</span></span><br><span class="line"><span class="attr">wsgi-file</span>=Sourcelist/wsgi.py</span><br><span class="line"><span class="comment"># 进程数</span></span><br><span class="line"><span class="attr">processes</span>=<span class="number">4</span></span><br><span class="line"><span class="comment"># 线程数</span></span><br><span class="line"><span class="attr">thread</span>=<span class="number">2</span></span><br><span class="line"><span class="comment"># uwsgi自身占用端口</span></span><br><span class="line"><span class="attr">stats</span>=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span></span><br></pre></td></tr></tbody></table></figure></div><p></p>
<h5 id="2-配置nginx"><a href="#2-配置nginx" class="headerlink" title="2. 配置nginx"></a>2. 配置nginx</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-enabled/</span><br><span class="line">vi projectNginx.conf</span><br></pre></td></tr></tbody></table></figure></div>
<p>内容：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">server{</span><br><span class="line">        # 指定本项目监听端口,浏览器输入端口</span><br><span class="line">        listen 80;</span><br><span class="line">        # 域名</span><br><span class="line">        server_name 127.0.0.1:80;</span><br><span class="line">        # 指定字符集</span><br><span class="line">        charset utf-8;</span><br><span class="line">        # 指定收集静态文件路径</span><br><span class="line">        location /static{</span><br><span class="line">            alias /home/sourcelist/project/Sourcelist/static;</span><br><span class="line">          }</span><br><span class="line">        # 指定收集媒体文件路径</span><br><span class="line">        location /media{</span><br><span class="line">          alias /home/sourcelist/project/Sourcelist/media;</span><br><span class="line">          }</span><br><span class="line">        # 和uwsgi通信端口和通信文件</span><br><span class="line">        location /{</span><br><span class="line">          include uwsgi_params;</span><br><span class="line">          uwsgi_pass 127.0.0.1:8001;</span><br><span class="line">      }            </span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></div>

<h6 id="3-拷贝uwsgi-params到项目根目录"><a href="#3-拷贝uwsgi-params到项目根目录" class="headerlink" title="3. 拷贝uwsgi_params到项目根目录"></a>3. 拷贝uwsgi_params到项目根目录</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx</span><br><span class="line">cp uwsgi_params /home/sourcelist/project/Sourcelist</span><br></pre></td></tr></tbody></table></figure></div>

<h6 id="4-改掉nginx默认的server-80"><a href="#4-改掉nginx默认的server-80" class="headerlink" title="4. 改掉nginx默认的server(80)"></a>4. 改掉nginx默认的server(80)</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-enabled</span><br><span class="line">vi deault <span class="comment">#把listen的端口由80改为800</span></span><br></pre></td></tr></tbody></table></figure></div>
<blockquote>
<p>server {<br>        listen 800 default_server;<br>        listen [::]:80 default_server;</p>
</blockquote>
<h6 id="5-重启nginx服务"><a href="#5-重启nginx服务" class="headerlink" title="5. 重启nginx服务"></a>5. 重启nginx服务</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo /etc/init.d/nginx restart</span><br></pre></td></tr></tbody></table></figure></div>

<h6 id="6-收集静态文件"><a href="#6-收集静态文件" class="headerlink" title="6. 收集静态文件"></a>6. 收集静态文件</h6><ol>
<li>在settings.py文件中添加路径(STATIC_ROOT)<br>STATIC_ROOT = ‘/home/sourcelist/project/Sourcelist/static’</li>
<li>收集静态文件<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/sourcelist/project/Sourcelist</span><br><span class="line">python3 manage.py collectstatic</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ol>
<h6 id="7-uwsgi启动项目"><a href="#7-uwsgi启动项目" class="headerlink" title="7. uwsgi启动项目"></a>7. uwsgi启动项目</h6><p>在项目根目录启动项目</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">uwsgi --ini fruitdayUwsgi.ini</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>运维</category>
        <category>项目部署</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>pyqt5插入图片</title>
    <url>/2020/05/25/pyqt5%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="designer中图片资源插入"><a href="#designer中图片资源插入" class="headerlink" title="designer中图片资源插入"></a>designer中图片资源插入</h3><p><a href="1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="1.png" class="lazyload"></a><br>如修改lable控件的背景图，选择资源，导入qrc文件。</p>
<p>qrc文件格式编辑</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"><rcc></rcc></span><br><span class="line">  <qresource></qresource></span><br><span class="line">    <file>1.jpeg</file></span><br><span class="line">    <file>ico/add.png</file></span><br><span class="line">    <file>ico/add_to_list.png</file></span><br><span class="line">    <file>ico/center_volume.png</file></span><br><span class="line">    <file>ico/cycle.png</file></span><br><span class="line">    <file>ico/cycle_one.png</file></span><br><span class="line">    <file>ico/de.png</file></span><br><span class="line">    <file>ico/delete.png</file></span><br><span class="line">    <file>ico/disc.png</file></span><br><span class="line">    <file>ico/downloads.png</file></span><br><span class="line">    <file>ico/high_volume.png</file></span><br><span class="line">    <file>ico/kk-music.ico</file></span><br><span class="line">    <file>ico/logo.png</file></span><br><span class="line">    <file>ico/music.png</file></span><br><span class="line">    <file>ico/my_playlist.png</file></span><br><span class="line">    <file>ico/no_volume.png</file></span><br><span class="line">    <file>ico/on.png</file></span><br><span class="line">    <file>ico/open_folder.png</file></span><br><span class="line">    <file>ico/random.png</file></span><br><span class="line">    <file>ico/small_volume.png</file></span><br><span class="line">    <file>ico/song.png</file></span><br><span class="line">    <file>ico/start.png</file></span><br><span class="line">    <file>ico/搜索.png</file></span><br><span class="line">    <file>ico/网易云音乐.png</file></span><br><span class="line">    <file>ico/stop.png</file></span><br><span class="line">    <file>ico/音量 .png</file></span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div>
<p>再使用命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pyrcc5 xx.qrc -o xx.py</span><br></pre></td></tr></tbody></table></figure></div>
<p>并在ui文件转换的py文件中导入该文件，作为图片资源文件。</p>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Pyqt5</category>
      </categories>
      <tags>
        <tag>Pyqt5</tag>
      </tags>
  </entry>
  <entry>
    <title>pyqt5文本高亮</title>
    <url>/2020/04/15/pyqt5%E6%96%87%E6%9C%AC%E9%AB%98%E4%BA%AE/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span><span class="params">(QMainWindow, Ui_MainWindow)</span>:</span></span><br><span class="line">    ......</span><br><span class="line">    ......</span><br><span class="line">    ......</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file</span><span class="params">(self, Qmodelidx)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(self.model.filePath(Qmodelidx), <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># 打开utf-8格式的文件，遇到出错进行忽略</span></span><br><span class="line">            <span class="comment"># filename返回值为('C:/PyQt5/PyQt1.py', 'All Files (*)')是一个元组，但with...open...只需要提供一个文件的地址而已,故输入参数filename[0]</span></span><br><span class="line">            <span class="comment"># 读取所选择的文件名，并将文本编辑小部件的内容设置为文件读取的内容。这里提一下使用with语句来自动帮我们调用close()</span></span><br><span class="line">            <span class="comment"># 方法，避免由于文件读写时产生IOError，导致close()</span></span><br><span class="line">            <span class="comment"># 不会调用，需要try...finally来实现的不便。</span></span><br><span class="line">            data = f.read()  <span class="comment"># 将文件读取出来</span></span><br><span class="line"></span><br><span class="line">        self.textEdit.setPlainText(data)  <span class="comment"># 将读取到的内容放到textEdit小部件中</span></span><br><span class="line">        li = [<span class="string">'def'</span>, <span class="string">'import'</span>, <span class="string">'from'</span>, <span class="string">'print'</span>] <span class="comment"># 高亮的关键字</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">            text = i</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            col = QColor(<span class="number">250</span>, <span class="number">97</span>, <span class="number">0</span>)  <span class="comment"># 置为橙色</span></span><br><span class="line">            fmt = QTextCharFormat()</span><br><span class="line">            fmt.setForeground(col)</span><br><span class="line">            <span class="comment"># 先把光标移动到开头</span></span><br><span class="line">            self.textEdit.moveCursor(QTextCursor.Start)</span><br><span class="line">            <span class="keyword">while</span> self.textEdit.find(text, QTextDocument.FindWholeWords):  <span class="comment"># 查找所有文字</span></span><br><span class="line">                self.mergeFormatOnWordOrSelection(fmt)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeFormatOnWordOrSelection</span><span class="params">(self, format)</span>:</span></span><br><span class="line">        cursor = self.textEdit.textCursor()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cursor.hasSelection():</span><br><span class="line">            cursor.select(QTextCursor.WordUnderCursor)</span><br><span class="line">        cursor.mergeCharFormat(format)</span><br><span class="line">        self.textEdit.mergeCurrentCharFormat(format)</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Pyqt5</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python分支结构</title>
    <url>/2018/02/12/python%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>流程控制: 对计算机代码执行顺序的管理就是流程控制</p>
<h2 id="单项分支"><a href="#单项分支" class="headerlink" title="单项分支"></a>单项分支</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> age < <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"你是在逗我吧!"</span>)</span><br></pre></td></tr></tbody></table></figure></div>



<h2 id="多项分支"><a href="#多项分支" class="headerlink" title="多项分支"></a>多项分支</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">age = int(input(<span class="string">"请输入你家狗狗的年龄: "</span>))</span><br><span class="line">print(<span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> age < <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"你是在逗我吧!"</span>)</span><br><span class="line"><span class="keyword">elif</span> age == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"相当于 14 岁的人。"</span>)</span><br><span class="line"><span class="keyword">elif</span> age == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">"相当于 22 岁的人。"</span>)</span><br><span class="line"><span class="keyword">elif</span> age > <span class="number">2</span>:</span><br><span class="line">    human = <span class="number">22</span> + (age <span class="number">-2</span>)*<span class="number">5</span></span><br><span class="line">    print(<span class="string">"对应人类年龄: "</span>, human)</span><br><span class="line"></span><br><span class="line">input(<span class="string">"点击 enter 键退出"</span>)</span><br></pre></td></tr></tbody></table></figure></div>


<h2 id="巢状分支"><a href="#巢状分支" class="headerlink" title="巢状分支"></a>巢状分支</h2><p>巢状分支是其他分支结构的嵌套结构，无论哪个分支都可以嵌套</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">num=int(input(<span class="string">"输入一个数字："</span>))</span><br><span class="line"><span class="keyword">if</span> num%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"你输入的数字可以整除 2 和 3"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"你输入的数字可以整除 2，但不能整除 3"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"你输入的数字可以整除 3，但不能整除 2"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span>  (<span class="string">"你输入的数字不能整除 2 和 3"</span>)</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python循环结构</title>
    <url>/2018/02/12/python%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h2 id="while型循环"><a href="#while型循环" class="headerlink" title="while型循环"></a>while型循环</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">n = <span class="number">100</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line">counter = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> counter <= n:</span><br><span class="line">    sum = sum + counter</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"1 到 %d 之和为: %d"</span> % (n,sum))</span><br></pre></td></tr></tbody></table></figure></div>
<p>执行结果</p>
<blockquote>
<p>1 到 100 之和为: 5050</p>
</blockquote>
<h3 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h3><p>死循环就是循环不会终止的循环类型，通过将用于判断的条件表达式设置为永远为True来实现。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">var = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> var == <span class="number">1</span> :  <span class="comment"># 表达式永远为 true</span></span><br><span class="line">   num = int(input(<span class="string">"输入一个数字  :"</span>))</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"你输入的数字是: "</span>, num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Good bye!"</span>)</span><br></pre></td></tr></tbody></table></figure></div>
<ul>
<li>你可以使用 CTRL+C 来退出当前的无限循环</li>
<li>执行以上脚本，输出结果如下：<blockquote>
<p>输入一个数字  :5<br>你输入的数字是:  5<br>输入一个数字  :</p>
</blockquote>
</li>
</ul>
<h2 id="for-…-in-循环"><a href="#for-…-in-循环" class="headerlink" title="for … in 循环"></a>for … in 循环</h2><p>for…in 循环用于遍历容器类的数据（字符串，列表，元组，字典，集合）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">'c'</span>,<span class="string">'py'</span>,<span class="string">'java'</span>]</span><br><span class="line">    print(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h2><ul>
<li>如果你需要遍历数字序列，可以使用内置range()函数。它会生成数列<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">>>><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">9</span>) :</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<h2 id="break和continue语句及循环中的else子句"><a href="#break和continue语句及循环中的else子句" class="headerlink" title="break和continue语句及循环中的else子句"></a>break和continue语句及循环中的else子句</h2><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><ul>
<li>break作用:在循环中break的作用是终止当前循环结构的后续操作，一旦程序运行了break，循环也就终止了！</li>
<li>break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">'Runoob'</span>:     <span class="comment"># 第一个实例</span></span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">'b'</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">'当前字母为 :'</span>, letter)</span><br><span class="line"></span><br><span class="line">var = <span class="number">10</span>                    <span class="comment"># 第二个实例</span></span><br><span class="line"><span class="keyword">while</span> var > <span class="number">0</span>:              </span><br><span class="line">   <span class="keyword">print</span> (<span class="string">'当期变量值为 :'</span>, var)</span><br><span class="line">   var = var <span class="number">-1</span></span><br><span class="line">   <span class="keyword">if</span> var == <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Good bye!"</span>)</span><br></pre></td></tr></tbody></table></figure></div>
<p>输出结果为</p>
<blockquote>
<p>当前字母为 : R<br>当前字母为 : u<br>当前字母为 : n<br>当前字母为 : o<br>当前字母为 : o<br>当期变量值为 : 10<br>当期变量值为 : 9<br>当期变量值为 : 8<br>当期变量值为 : 7<br>当期变量值为 : 6<br>Good bye!</p>
</blockquote>
<h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">'Runoob'</span>:     <span class="comment"># 第一个实例</span></span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">'o'</span>:        <span class="comment"># 字母为 o 时跳过输出</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">'当前字母 :'</span>, letter)</span><br><span class="line"></span><br><span class="line">var = <span class="number">10</span>                    <span class="comment"># 第二个实例</span></span><br><span class="line"><span class="keyword">while</span> var > <span class="number">0</span>:              </span><br><span class="line">   var = var <span class="number">-1</span></span><br><span class="line">   <span class="keyword">if</span> var == <span class="number">5</span>:             <span class="comment"># 变量为 5 时跳过输出</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">'当前变量值 :'</span>, var)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Good bye!"</span>)</span><br></pre></td></tr></tbody></table></figure></div>
<blockquote>
<p>输出结果为<br>当前字母 : R<br>当前字母 : u<br>当前字母 : n<br>当前字母 : b<br>当前变量值 : 9<br>当前变量值 : 8<br>当前变量值 : 7<br>当前变量值 : 6<br>当前变量值 : 4<br>当前变量值 : 3<br>当前变量值 : 2<br>当前变量值 : 1<br>当前变量值 : 0<br>Good bye!</p>
</blockquote>
<h3 id="pass-语句"><a href="#pass-语句" class="headerlink" title="pass 语句"></a>pass 语句</h3><ul>
<li>pass是空语句，是为了保持程序结构的完整性。</li>
<li>pass 不做任何事情，一般用做占位语句</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Python基础</category>
      </categories>
  </entry>
  <entry>
    <title>python函数</title>
    <url>/2018/02/10/python%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h2 id="函数的定义格式"><a href="#函数的定义格式" class="headerlink" title="函数的定义格式"></a>函数的定义格式</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  函数名<span class="params">()</span>:</span></span><br><span class="line">    函数功能代码...</span><br><span class="line">    函数功能代码...</span><br></pre></td></tr></tbody></table></figure></div>
<ul>
<li>特征:函数定义之后不会自动执行,必须在调用函数后函数才会执行.</li>
<li>函数名的命名规则:和变量基本一样<ul>
<li>推荐使用英文或者拼音,禁止使用中文</li>
<li>可以使用数字，但是不能用数字开头</li>
<li>不可以使用特殊字符，除了_</li>
<li>函数名严格区分大小写</li>
<li>函数名必须要有意义。</li>
<li>不能和系统已经存在的保留关键字冲突!</li>
<li>禁止使用和系统提供函数相同的函数名</li>
</ul>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">>>> </span><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span> :</span></span><br><span class="line">   print(<span class="string">"Hello World!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">>>> </span>hello()</span><br><span class="line">Hello World!</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="带有参数的函数格式"><a href="#带有参数的函数格式" class="headerlink" title="带有参数的函数格式"></a>带有参数的函数格式</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数,参数...)</span>:</span></span><br><span class="line">    函数功能代码...</span><br><span class="line">    函数功能代码...</span><br><span class="line">    ...</span><br></pre></td></tr></tbody></table></figure></div>

<p>形参:形式上的参数,声明函数时()中的参数是形参<br>实参:实际上的参数,调用函数时()中的参数是实参</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(width, height)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> width * height</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_welcome</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"Welcome"</span>, name)</span><br><span class="line"></span><br><span class="line">print_welcome(<span class="string">"Python"</span>)</span><br><span class="line">w = <span class="number">4</span></span><br><span class="line">h = <span class="number">5</span></span><br><span class="line">print(<span class="string">"width ="</span>, w, <span class="string">" height ="</span>, h, <span class="string">" area ="</span>, area(w, h))</span><br></pre></td></tr></tbody></table></figure></div>
<p>输出结果</p>
<blockquote>
<p>Welcome Python<br>width = 4  height = 5  area = 20</p>
</blockquote>
<p>注意:</p>
<ul>
<li>实参将值传递给形参的过程本质上就是简单的变量赋值仅此而已</li>
<li>参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样</li>
</ul>
<h2 id="带有默认值的参数"><a href="#带有默认值的参数" class="headerlink" title="带有默认值的参数"></a>带有默认值的参数</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span><span class="params">( name, age = <span class="number">35</span> )</span>:</span></span><br><span class="line">   <span class="string">"打印任何传入的字符串"</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"名字: "</span>, name);</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"年龄: "</span>, age);</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">printinfo( age=<span class="number">50</span>, name=<span class="string">"runoob"</span> );<span class="comment">#调用printinfo函数</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"=============="</span>)</span><br><span class="line">printinfo( name=<span class="string">"runoob"</span> );</span><br></pre></td></tr></tbody></table></figure></div>
<p>输出结果</p>
<blockquote>
<p>名字:  runoob<br>年龄:  50<br>==============<br>名字:  runoob<br>年龄:  35</p>
</blockquote>
<ul>
<li>注意：在此情况下使用实参值覆盖原有形参的默认值，本质上就是变量的重新赋值操作</li>
<li>调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数</li>
</ul>
<h2 id="收集参数"><a href="#收集参数" class="headerlink" title="收集参数"></a>收集参数</h2><h3 id="非关键字收集参数"><a href="#非关键字收集参数" class="headerlink" title="非关键字收集参数"></a>非关键字收集参数</h3><ul>
<li>非关键字收集参数，在形参前添加一个*即可</li>
<li>非关键字收集参数收集实参组成一个元组</li>
<li>非关键字收集参数，仅收集没有任何形参接受的非关键字实参</li>
<li>非关键字收集参数和普通的形参可以共存<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(*参数名)</span>:</span></span><br><span class="line">    函数功能代码...</span><br><span class="line">    函数功能代码...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">调用函数：函数名(实参，实参...)   没有数量限制</span><br></pre></td></tr></tbody></table></figure></div>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span><span class="params">( arg1, *vartuple )</span>:</span></span><br><span class="line">   <span class="string">'''打印任何传入的参数'''</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"输出: "</span>)</span><br><span class="line">   <span class="keyword">print</span> (arg1)</span><br><span class="line">   <span class="keyword">for</span> var <span class="keyword">in</span> vartuple:</span><br><span class="line">      <span class="keyword">print</span> (var)</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">printinfo( <span class="number">10</span> );</span><br><span class="line">printinfo( <span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span> );</span><br></pre></td></tr></tbody></table></figure></div>
输出结果<blockquote>
<p>输出:<br>10<br>输出:<br>70<br>60<br>50</p>
</blockquote>
</li>
</ul>
<h3 id="关键字收集参数"><a href="#关键字收集参数" class="headerlink" title="关键字收集参数"></a>关键字收集参数</h3><ul>
<li>关键字收集参数，在形参前添加两个**即可</li>
<li>关键字收集参数，收集的结果组成一个字典，关键字成为字典的键，实参成为值</li>
<li>关键字收集参数，仅收集没有任何形参接受的关键字参数</li>
<li>关键字参数可以和普通的形参共存<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(country,province,**kwargs)</span>:</span></span><br><span class="line">    print(country,province,kwargs)</span><br><span class="line"></span><br><span class="line"><span class="string">'''使用'''</span></span><br><span class="line">func(<span class="string">"China"</span>,<span class="string">"Sichuan"</span>,city = <span class="string">"Chengdu"</span>, section = <span class="string">"JingJiang"</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''结果'''</span></span><br><span class="line">China Sichuan {<span class="string">'city'</span>: <span class="string">'Chengdu'</span>, <span class="string">'section'</span>: <span class="string">'JingJiang'</span>}</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<h2 id="匿名函数（lambda）"><a href="#匿名函数（lambda）" class="headerlink" title="匿名函数（lambda）"></a>匿名函数（lambda）</h2><ul>
<li>所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。</li>
<li>lambda 只是一个表达式，函数体比 def 简单很多</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">'''可写函数说明'''</span></span><br><span class="line">sum = <span class="keyword">lambda</span> arg1, arg2: arg1 + arg2;</span><br><span class="line"></span><br><span class="line"><span class="string">'''调用sum函数'''</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"相加后的值为 : "</span>, sum( <span class="number">10</span>, <span class="number">20</span> ))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"相加后的值为 : "</span>, sum( <span class="number">20</span>, <span class="number">20</span> ))</span><br></pre></td></tr></tbody></table></figure></div>
<p>输出结果</p>
<blockquote>
<p>相加后的值为 :  30<br>相加后的值为 :  40</p>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据类型</title>
    <url>/2018/02/12/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>标准数据类型</p>
<ul>
<li>Python3 中有六个标准的数据类型：<ul>
<li>Number（数字）<ul>
<li>int</li>
<li>bool</li>
<li>float</li>
</ul>
</li>
<li>complex（复数）</li>
<li>String（字符串）</li>
<li>List（列表）</li>
<li>Tuple（元组）</li>
<li>Sets（集合）</li>
<li>Dictionary（字典）</li>
</ul>
</li>
</ul>
<h2 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h2><ul>
<li>Python3 支持 int、float、bool、complex（复数）。</li>
<li>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li>
<li>像大多数语言一样，数值类型的赋值和计算都是很直观的。</li>
<li>内置的 type() 函数可以用来查询变量所指的对象类型。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">>>> </span>a, b, c, d = <span class="number">20</span>, <span class="number">5.5</span>, <span class="literal">True</span>, <span class="number">4</span>+<span class="number">3j</span></span><br><span class="line"><span class="meta">>>> </span>print(type(a), type(b), type(c), type(d))</span><br><span class="line"><<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'> <<span class="title">class</span> '<span class="title">float</span>'> <<span class="title">class</span> '<span class="title">bool</span>'> <<span class="title">class</span> '<span class="title">complex</span>'></span></span><br></pre></td></tr></tbody></table></figure></div>

<p>此外还可以用 isinstance 来判断：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">>>>a = <span class="number">111</span></span><br><span class="line"><span class="meta">>>> </span>isinstance(a, int)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">>>></span><br></pre></td></tr></tbody></table></figure></div>

<p>isinstance 和 type 的区别在于:</p>
<ul>
<li>type()不会认为子类是一种父类类型。</li>
<li>isinstance()会认为子类是一种父类类型。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">isinstance(A(), A)  <span class="comment"># returns True</span></span><br><span class="line">type(A()) == A      <span class="comment"># returns True</span></span><br><span class="line">isinstance(B(), A)    <span class="comment"># returns True</span></span><br><span class="line">type(B()) == A        <span class="comment"># returns False</span></span><br></pre></td></tr></tbody></table></figure></div>

<blockquote>
<p>注意：在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。<br>到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。</p>
</blockquote>
<h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><ul>
<li><p>Python中的字符串用单引号(‘)或双引号(“)括起来，同时使用反斜杠()转义特殊字符。</p>
</li>
<li><p>字符串的截取的语法格式如下：</p>
<ul>
<li>变量[头下标:尾下标]</li>
</ul>
</li>
<li><p>索引值以 0 为开始值，-1 为从末尾的开始位置。</p>
</li>
<li><p>加号 (+) 是字符串的连接符， 星号 (*) 表示复制当前字符串，紧跟的数字为复制的次数。实例如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">str = <span class="string">'zhangsan'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (str)          <span class="comment"># 输出字符串</span></span><br><span class="line"><span class="keyword">print</span> (str[<span class="number">0</span>:<span class="number">-1</span>])    <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line"><span class="keyword">print</span> (str[<span class="number">0</span>])       <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line"><span class="keyword">print</span> (str[<span class="number">2</span>:<span class="number">5</span>])     <span class="comment"># 输出从第三个开始到第五个的字符</span></span><br><span class="line"><span class="keyword">print</span> (str[<span class="number">2</span>:])      <span class="comment"># 输出从第三个开始的后的所有字符</span></span><br><span class="line"><span class="keyword">print</span> (str * <span class="number">2</span>)      <span class="comment"># 输出字符串两次</span></span><br><span class="line"><span class="keyword">print</span> (str + <span class="string">"TEST"</span>) <span class="comment"># 连接字符串</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>输出结果:</p>
<blockquote>
<p>zhangsan<br>zhangsa<br>z<br>ang<br>angsan<br>zhangsanzhangsan<br>zhangsanTEST</p>
</blockquote>
</li>
<li><p>Python 使用反斜杠()转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个r，表示原始字符串：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">>>> </span>print(<span class="string">'Ru\noob'</span>)</span><br><span class="line">Ru</span><br><span class="line">oob</span><br><span class="line"><span class="meta">>>> </span>print(<span class="string">r'Ru\noob'</span>)</span><br><span class="line">Ru\noob</span><br><span class="line">>>></span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><ul>
<li><p>List（列表） 是 Python 中使用最频繁的数据类型。</p>
</li>
<li><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p>
</li>
<li><p>列表是写在方括号[]之间、用逗号分隔开的元素列表。</p>
</li>
<li><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p>
</li>
<li><p>列表截取的语法格式如下：</p>
<ul>
<li>变量[头下标:尾下标]</li>
</ul>
</li>
<li><p>索引值以 0 为开始值，-1 为从末尾的开始位置。</p>
</li>
<li><p>加号（+）是列表连接运算符，星号（*）是重复操作。如下实例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">list = [ <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'demo'</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">'demo'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (list)            <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="keyword">print</span> (list[<span class="number">0</span>])         <span class="comment"># 输出列表第一个元素</span></span><br><span class="line"><span class="keyword">print</span> (list[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 从第二个开始输出到第三个元素</span></span><br><span class="line"><span class="keyword">print</span> (list[<span class="number">2</span>:])        <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="keyword">print</span> (tinylist * <span class="number">2</span>)    <span class="comment"># 输出两次列表</span></span><br><span class="line"><span class="keyword">print</span> (list + tinylist) <span class="comment"># 连接列表</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>输出结果</p>
<blockquote>
<p>[‘abcd’, 786, 2.23, ‘demo’, 70.2]<br>abcd<br>[786, 2.23]<br>[2.23, ‘demo’, 70.2]<br>[123, ‘demo’, 123, ‘demo’]<br>[‘abcd’, 786, 2.23, ‘demo’, 70.2, 123, ‘demo’]</p>
</blockquote>
</li>
<li><p>与Python字符串不一样的是，列表中的元素是可以改变的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">>>>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">>>> </span>a[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line"><span class="meta">>>> </span>a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line"><span class="meta">>>> </span>a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">>>> </span>a[<span class="number">2</span>:<span class="number">5</span>] = []   <span class="comment"># 将对应的元素值设置为 []</span></span><br><span class="line"><span class="meta">>>> </span>a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<h2 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h2><ul>
<li>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号(())里，元素之间用逗号隔开。</li>
<li>元组中的元素类型也可以不相同：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">tuple = ( <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'demo'</span>, <span class="number">70.2</span>  )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">'demo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (tuple)             <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="keyword">print</span> (tuple[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="keyword">print</span> (tuple[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="keyword">print</span> (tuple[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="keyword">print</span> (tinytuple * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="keyword">print</span> (tuple + tinytuple) <span class="comment"># 连接元组</span></span><br></pre></td></tr></tbody></table></figure></div>

</li>
</ul>
<p>输出结果</p>
<blockquote>
<p>(‘abcd’, 786, 2.23, ‘demo’, 70.2)<br>abcd<br>(786, 2.23)<br>(2.23, ‘demo’, 70.2)<br>(123, ‘demo’, 123, ‘demo’)<br>(‘abcd’, 786, 2.23, ‘demo’, 70.2, 123, ‘demo’)</p>
</blockquote>
<ul>
<li>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。</li>
<li>也可以进行截取（看上面，这里不再赘述）。</li>
<li>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</li>
</ul>
<h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h2><ul>
<li>集合（set）是一个无序不重复元素的序列。</li>
<li>基本功能是进行成员关系测试和删除重复元素。</li>
<li>可以使用大括号 { } 或者set()函数创建集合，注意：创建一个空集合必须用set()而不是 { }，因为 { } 是用来创建一个空字典。</li>
<li>创建格式：</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">parame = {value1,value2}</span><br></pre></td></tr></tbody></table></figure></div>

<p>实例:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">student = {<span class="string">'Tom'</span>, <span class="string">'Jim'</span>, <span class="string">'Mary'</span>, <span class="string">'Tom'</span>, <span class="string">'Jack'</span>, <span class="string">'Rose'</span>}</span><br><span class="line"></span><br><span class="line">print(student)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">成员测试</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">'Rose'</span> <span class="keyword">in</span> student) :</span><br><span class="line">    print(<span class="string">'Rose 在集合中'</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    print(<span class="string">'Rose 不在集合中'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">set可以进行集合运算</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">b = set(<span class="string">'alacazam'</span>)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(a - b)     <span class="comment"># a和b的差集</span></span><br><span class="line"></span><br><span class="line">print(a | b)     <span class="comment"># a和b的并集</span></span><br><span class="line"></span><br><span class="line">print(a & b)     <span class="comment"># a和b的交集</span></span><br><span class="line"></span><br><span class="line">print(a ^ b)     <span class="comment"># a和b中不同时存在的元素</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>输出结果</p>
<blockquote>
<p>{‘Mary’, ‘Jim’, ‘Rose’, ‘Jack’, ‘Tom’}<br>Rose 在集合中<br>{‘b’, ‘a’, ‘c’, ‘r’, ‘d’}<br>{‘b’, ‘d’, ‘r’}<br>{‘l’, ‘r’, ‘a’, ‘c’, ‘z’, ‘m’, ‘b’, ‘d’}<br>{‘a’, ‘c’}<br>{‘l’, ‘r’, ‘z’, ‘m’, ‘b’, ‘d’}</p>
</blockquote>
<h2 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h2><ul>
<li>字典（dictionary）是Python中另一个非常有用的内置数据类型。</li>
<li>列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</li>
<li>字典是一种映射类型，字典用”{ }”标识，它是一个无序的键(key) : 值(value)对集合。</li>
<li>键(key)必须使用不可变类型。</li>
<li>在同一个字典中，键(key)必须是唯一的。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">dict = {}</span><br><span class="line">dict[<span class="string">'one'</span>] = <span class="string">"1 - Python教程"</span></span><br><span class="line">dict[<span class="number">2</span>]     = <span class="string">"2 - Python工具"</span></span><br><span class="line"></span><br><span class="line">tinydict = {<span class="string">'name'</span>: <span class="string">'demo'</span>,<span class="string">'code'</span>:<span class="number">1</span>, <span class="string">'site'</span>: <span class="string">'www.demo.com'</span>}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (dict[<span class="string">'one'</span>])       <span class="comment"># 输出键为 'one' 的值</span></span><br><span class="line"><span class="keyword">print</span> (dict[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="keyword">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="keyword">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="keyword">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br></pre></td></tr></tbody></table></figure></div>

<p>输出结果</p>
<blockquote>
<p>1 - Python教程<br>2 - Python工具<br>{‘name’: ‘demo’, ‘site’: ‘<a href="http://www.demo.com'" target="_blank" rel="noopener">www.demo.com'</a>, ‘code’: 1}<br>dict_keys([‘name’, ‘site’, ‘code’])<br>dict_values([‘demo’, ‘<a href="http://www.demo.com'" target="_blank" rel="noopener">www.demo.com'</a>, 1])</p>
</blockquote>
<h2 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h2><ul>
<li>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</li>
<li>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>int(x [,base])</td>
<td>将x转换为一个整数</td>
</tr>
<tr>
<td>float(x)</td>
<td>将x转换到一个浮点数</td>
</tr>
<tr>
<td>complex(real [,imag])</td>
<td>创建一个复数</td>
</tr>
<tr>
<td>str(x)</td>
<td>将对象 x 转换为字符串</td>
</tr>
<tr>
<td>repr(x)</td>
<td>将对象 x 转换为表达式字符串</td>
</tr>
<tr>
<td>eval(str)</td>
<td>用来计算在字符串中的有效Python表达式,并返回一个对象</td>
</tr>
<tr>
<td>tuple(s)</td>
<td>将序列 s 转换为一个元组</td>
</tr>
<tr>
<td>list(s)</td>
<td>将序列 s 转换为一个列表</td>
</tr>
<tr>
<td>set(s)</td>
<td>转换为可变集合</td>
</tr>
<tr>
<td>dict(d)</td>
<td>创建一个字典。d 必须是一个序列 (key,value)元组。</td>
</tr>
<tr>
<td>frozenset(s)</td>
<td>转换为不可变集合</td>
</tr>
<tr>
<td>chr(x)</td>
<td>将一个整数转换为一个字符</td>
</tr>
<tr>
<td>unichr(x)</td>
<td>将一个整数转换为Unicode字符</td>
</tr>
<tr>
<td>ord(x)</td>
<td>将一个字符转换为它的整数值</td>
</tr>
<tr>
<td>hex(x)</td>
<td>将一个整数转换为一个十六进制字符串</td>
</tr>
<tr>
<td>oct(x)</td>
<td>将一个整数转换为一个八进制字符串</td>
</tr>
</tbody></table>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python批量重命名</title>
    <url>/2018/05/20/python%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>看代码就很明了啦~</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rename</span><span class="params">(j)</span>:</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    path=<span class="string">"E:/finalData/"</span>+str(j)+<span class="string">"/phone"</span></span><br><span class="line">    filelist=os.listdir(path)<span class="comment">#该文件夹下所有的文件（包括文件夹）</span></span><br><span class="line">    <span class="keyword">for</span> files <span class="keyword">in</span> filelist:<span class="comment">#遍历所有文件</span></span><br><span class="line">        i=i+<span class="number">1</span></span><br><span class="line">        Olddir=os.path.join(path,files);<span class="comment">#原来的文件路径                </span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(Olddir):<span class="comment">#如果是文件夹则跳过</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        filename=os.path.splitext(files)[<span class="number">0</span>];<span class="comment">#文件名</span></span><br><span class="line">        filetype=os.path.splitext(files)[<span class="number">1</span>];<span class="comment">#文件扩展名</span></span><br><span class="line">        Newdir=os.path.join(path,str(i)+filetype);<span class="comment">#新的文件路径</span></span><br><span class="line">        os.rename(Olddir,Newdir)<span class="comment">#重命名</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    rename(j)</span><br></pre></td></tr></tbody></table></figure></div>
<p><a href="1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="1.png" class="lazyload"></a></p>
<p>解释下用到的os库中的函数</p>
<h4 id="os-listdir"><a href="#os-listdir" class="headerlink" title="os.listdir()"></a>os.listdir()</h4><p>os.listdir() 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。这个列表以字母顺序。 它不包括 ‘.’ 和’..’ 即使它在文件夹中。<br>只支持在 Unix, Windows 下使用。</p>
<h4 id="os-path-join"><a href="#os-path-join" class="headerlink" title="os.path.join()"></a>os.path.join()</h4><p>是在拼接路径的时候用的,可以根据系统自动选择正确的路径分隔符”/“或”\”<br>举个例子，<br>os.path.join(“home”, “me”, “mywork”)<br>在Linux系统上会返回<br>“home/me/mywork”<br>在Windows系统上会返回<br>“home\me\mywork”</p>
<h4 id="os-path-splitext"><a href="#os-path-splitext" class="headerlink" title="os.path.splitext()"></a>os.path.splitext()</h4><p>作用 ：分离文件名与扩展名；默认返回(fname,fextension)元组，可做分片操作 。如：</p>
<blockquote>
<p>os.path.splitext(‘d:\library\book.txt’)(‘d:\library\book’, ‘.txt’)</p>
</blockquote>
<blockquote>
<p>os.path.splitext(‘book.txt’)(‘book’, ‘.txt’)</p>
</blockquote>
<h4 id="os-rename"><a href="#os-rename" class="headerlink" title="os.rename()"></a>os.rename()</h4><p>用于命名文件或目录，从 src 到 dst,如果dst是一个存在的目录, 将抛出OSError。</p>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python文件操作</title>
    <url>/2018/02/14/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="open（）-打开或者创建一个文件-and-close-关闭文件"><a href="#open（）-打开或者创建一个文件-and-close-关闭文件" class="headerlink" title="open（） 打开或者创建一个文件 and close() 关闭文件"></a>open（） 打开或者创建一个文件 and close() 关闭文件</h3><p>open</p>
<blockquote>
<p>格式：open(‘文件路径’,’打开模式’)<br>    返回值：文件io对象<br>   打开模式一共N种：<br>       w模式 写模式write  文件不存在时会创建文件，如果文件已存在则会清空文件<br>        r模式  读模式read  文件不存在就报错，存在则准备读取文件<br>        a模式 追加模式 append 文件不存在则新建，文件存在则在文件末尾追加内容<br>        x模式 抑或模式 xor 文件存在则报错，文件 不存在则新建文件<br>        b模式 二进制模式 binary 辅助模式不能单独使用<br>        +模式 增强模式plus  也是辅助模式不能单独使用</p>
</blockquote>
<p>close</p>
<blockquote>
<p>格式：文件io对象.close()<br>返回值：None</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">f = open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="read-读取文件"><a href="#read-读取文件" class="headerlink" title="read() 读取文件"></a>read() 读取文件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">f = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line">content = f.read(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">print(content)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"-"</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">content = f.read()</span><br><span class="line"></span><br><span class="line">print(content)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="readline-读取一行文件"><a href="#readline-读取一行文件" class="headerlink" title="readline() 读取一行文件"></a>readline() 读取一行文件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">f = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line">content = f.readline()</span><br><span class="line">print(<span class="string">"1:%s"</span>%content)</span><br><span class="line"></span><br><span class="line">content = f.readline()</span><br><span class="line">print(<span class="string">"2:%s"</span>%content)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="write-写入文件"><a href="#write-写入文件" class="headerlink" title="write() 写入文件"></a>write() 写入文件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">fo = open(<span class="string">"foo.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">fo.write( <span class="string">"www.runoob.com!\nVery good site!\n"</span>)</span><br><span class="line"></span><br><span class="line">fo.close()</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h2><ul>
<li>OS – 操作系统的简称</li>
<li>os模块就是对操作系统进行操作<br>使用该模块必须先导入模块：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></tbody></table></figure></div>
os模块函数太多了，具体自己百度。</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>throttle设置api的访问速率</title>
    <url>/2019/04/15/throttle%E8%AE%BE%E7%BD%AEapi%E7%9A%84%E8%AE%BF%E9%97%AE%E9%80%9F%E7%8E%87/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="setting-py设置"><a href="#setting-py设置" class="headerlink" title="setting.py设置"></a>setting.py设置</h3><p>在setting.py中添加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = {</span><br><span class="line">  <span class="string">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class="line">      <span class="string">'rest_framework.throttling.AnonRateThrottle'</span>,  </span><br><span class="line">      <span class="string">'rest_framework.throttling.UserRateThrottle'</span>   </span><br><span class="line">  ),</span><br><span class="line">  <span class="string">'DEFAULT_THROTTLE_RATES'</span>: {</span><br><span class="line">        <span class="string">'anon'</span>: <span class="string">'20000/day'</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'30000/day'</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>DEFAULT_THROTTLE_CLASSES是判断类型</p>
<blockquote>
<p>AnonRateThrottle是未登录情况下，判断IP地址<br>UserRateThrottle是登录情况下，判断token</p>
</blockquote>
<p>DEFAULT_THROTTLE_RATES是限速策略。</p>
<h3 id="在视图函数中设置"><a href="#在视图函数中设置" class="headerlink" title="在视图函数中设置"></a>在视图函数中设置</h3><p>在需要限速的api中添加throttle_classes</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle, AnonRateThrottle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodlistViewSet</span><span class="params">(CacheResponseMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    <span class="comment"># mixins.RetrieveModelMixin 详情</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    list:</span></span><br><span class="line"><span class="string">        商品列表数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    throttle_classes = (UserRateThrottle, AnonRateThrottle, ) <span class="comment"># api限速</span></span><br><span class="line">    pagination_class = LargeResultsSetPagination</span><br><span class="line">    filter_backends = (DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter)</span><br><span class="line">    filter_class = GoodsFilter</span><br><span class="line">    search_fields = (<span class="string">'=goods_sn'</span>, <span class="string">'name'</span>, <span class="string">'=goods_num'</span>)</span><br><span class="line">    ordering_fields = (<span class="string">'sold_num'</span>, <span class="string">'add_time'</span>, <span class="string">'shop_price'</span>)</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
        <category>restframework</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>python运算符</title>
    <url>/2018/02/12/python%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><ul>
<li>Python语言支持以下类型的运算符:<br>算术运算符<br>比较（关系）运算符<br>赋值运算符<br>逻辑运算符<br>位运算符<br>成员运算符<br>身份运算符<br>运算符优先级</li>
</ul>
<h2 id="Python算术运算符"><a href="#Python算术运算符" class="headerlink" title="Python算术运算符"></a>Python算术运算符</h2><ul>
<li><p>以下假设变量a为10，变量b为21</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加 - 两个对象相加</td>
<td>a + b 输出结果 31</td>
</tr>
</tbody></table>
</li>
</ul>
<ul>
<li>|    减 - 得到负数或是一个数减去另一个数 |    a - b  输出结果 -11</li>
</ul>
<ul>
<li>|    乘 - 两个数相乘或是返回一个被重复若干次字串 |    a * b 输出结果 210<br>/ |    除 - x 除以 y | b / a 输出结果 2.1<br>% |    取模 - 返回除法的余数 | b % a 输出结果 1</li>
<li><ul>
<li>|    幂 - 返回x的y次幂 |    a**b 为10的21次方<br>// | 取整除 - 返回商的整数部分 | 9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</li>
</ul>
</li>
</ul>
<h2 id="Python比较运算符"><a href="#Python比较运算符" class="headerlink" title="Python比较运算符"></a>Python比较运算符</h2><ul>
<li>以下假设变量a为10，变量b为20</li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>等于 - 比较对象是否相等</td>
<td>(a == b)返回 False。</td>
</tr>
<tr>
<td>!=</td>
<td>不等于 - 比较两个对象是否不相等</td>
<td>(a != b)返回 True。</td>
</tr>
<tr>
<td>></td>
<td>大于 - 返回x是否大于y</td>
<td>(a > b)返回 False。</td>
</tr>
<tr>
<td><</td>
<td>小于 - 返回x是否小于y。返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td>
<td>(a < b) 返回 True。</td>
</tr>
<tr>
<td>>=</td>
<td>大于等于 - 返回x是否大于等于y。</td>
<td>(a >= b) 返回 False。</td>
</tr>
<tr>
<td><=</td>
<td>小于等于 - 返回x是否小于等于y。</td>
<td>(a <= b) 返回 True。</td>
</tr>
</tbody></table>
<h2 id="Python赋值运算符"><a href="#Python赋值运算符" class="headerlink" title="Python赋值运算符"></a>Python赋值运算符</h2><ul>
<li>以下假设变量a为10，变量b为20</li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>简单的赋值运算符</td>
<td>c = a + b 将 a + b 的运算结果赋值为 c</td>
</tr>
<tr>
<td>+=</td>
<td>加法赋值运算符</td>
<td>c += a 等效于 c = c + a</td>
</tr>
<tr>
<td>-=</td>
<td>减法赋值运算符</td>
<td>c -= a 等效于 c = c - a</td>
</tr>
<tr>
<td>*=</td>
<td>乘法赋值运算符</td>
<td>c *= a 等效于 c = c * a</td>
</tr>
<tr>
<td>/=</td>
<td>除法赋值运算符</td>
<td>c /= a 等效于 c = c / a</td>
</tr>
<tr>
<td>%=</td>
<td>取模赋值运算符</td>
<td>c %= a 等效于 c = c % a</td>
</tr>
<tr>
<td>**=</td>
<td>幂赋值运算符</td>
<td>c *<em>= a 等效于 c = c *</em> a</td>
</tr>
<tr>
<td>//=</td>
<td>取整除赋值运算符</td>
<td>c //= a 等效于 c = c // a</td>
</tr>
</tbody></table>
<h2 id="Python位运算符"><a href="#Python位运算符" class="headerlink" title="Python位运算符"></a>Python位运算符</h2><ul>
<li>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</li>
<li>下表中变量 a 为 60，b 为 13二进制格式如下：</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">>>> </span>a=<span class="number">18</span>        </span><br><span class="line"><span class="meta">>>> </span>bin(a)      <span class="comment"># 将变量a的数值转成二进制数值输出</span></span><br><span class="line"><span class="string">'0b10010'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">>>> </span>b = <span class="number">0b10010</span>  <span class="comment">#将二进制的数值赋给变量b</span></span><br><span class="line"><span class="meta">>>> </span>b</span><br><span class="line"><span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">下面是二进制运算</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">a = <span class="number">0011</span> <span class="number">1100</span></span><br><span class="line">b = <span class="number">0000</span> <span class="number">1101</span></span><br><span class="line">-----------------</span><br><span class="line">a&b = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">a|b = <span class="number">0011</span> <span class="number">1101</span></span><br><span class="line">a^b = <span class="number">0011</span> <span class="number">0001</span></span><br><span class="line">~a  = <span class="number">1100</span> <span class="number">0011</span></span><br></pre></td></tr></tbody></table></figure></div>


<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>&</td>
<td>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>
<td>(a & b) 输出结果 12 ，二进制解释： 0000 1100</td>
</tr>
<tr>
<td>l</td>
<td>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td>
<td>(a l b) 输出结果 61 ，二进制解释： 0011 1101</td>
</tr>
<tr>
<td>^</td>
<td>按位异或运算符：当两对应的二进位相异时，结果为1</td>
<td>(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td>
</tr>
<tr>
<td>~</td>
<td>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1</td>
<td>(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td>
</tr>
<tr>
<td><<</td>
<td>左移动运算符：运算数的各二进位全部左移若干位，由”<<”右边的数指定移动的位数，高位丢弃，低位补0。</td>
<td>a << 2 输出结果 240 ，二进制解释： 1111 0000</td>
</tr>
<tr>
<td>>></td>
<td>右移动运算符：把”>>”左边的运算数的各二进位全部右移若干位，”>>”右边的数指定移动的位数</td>
<td>a >> 2 输出结果 15 ，二进制解释： 0000 1111</td>
</tr>
</tbody></table>
<h2 id="Python逻辑运算符"><a href="#Python逻辑运算符" class="headerlink" title="Python逻辑运算符"></a>Python逻辑运算符</h2><ul>
<li>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20</li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>逻辑表达式</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>x and y</td>
<td>布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td>
<td>(a and b) 返回 20。</td>
</tr>
<tr>
<td>or</td>
<td>x or y</td>
<td>布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td>
<td>(a or b) 返回 10。</td>
</tr>
<tr>
<td>not</td>
<td>not x</td>
<td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>
<td>not(a and b) 返回 False</td>
</tr>
</tbody></table>
<h2 id="Python成员运算符"><a href="#Python成员运算符" class="headerlink" title="Python成员运算符"></a>Python成员运算符</h2><ul>
<li>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>in</td>
<td>如果在指定的序列中找到值返回 True，否则返回 False。</td>
<td>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td>
</tr>
<tr>
<td>not  in</td>
<td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td>
<td>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td>
</tr>
</tbody></table>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> list ):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"1 - 变量 a 在给定的列表中 list 中"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"1 - 变量 a 不在给定的列表中 list 中"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( b <span class="keyword">not</span> <span class="keyword">in</span> list ):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"2 - 变量 b 不在给定的列表中 list 中"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"2 - 变量 b 在给定的列表中 list 中"</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">修改变量 a 的值</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> list ):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"3 - 变量 a 在给定的列表中 list 中"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"3 - 变量 a 不在给定的列表中 list 中"</span>)</span><br></pre></td></tr></tbody></table></figure></div>
<p>以上实例输出结果：</p>
<blockquote>
<p>1 - 变量 a 不在给定的列表中 list 中<br>2 - 变量 b 不在给定的列表中 list 中<br>3 - 变量 a 在给定的列表中 list 中</p>
</blockquote>
<h2 id="Python身份运算符"><a href="#Python身份运算符" class="headerlink" title="Python身份运算符"></a>Python身份运算符</h2><ul>
<li>身份运算符用于比较两个对象的存储单元</li>
</ul>
<table>
<thead>
<tr>
<th>算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>is</td>
<td>is是判断两个标识符是不是引用自一个对象</td>
<td>x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</td>
</tr>
<tr>
<td>is not</td>
<td>is not 是判断两个标识符是不是引用自不同对象</td>
<td>x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>
</tr>
</tbody></table>
<ul>
<li>注： id() 函数用于获取对象内存地址</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">is</span> b ):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"1 - a 和 b 有相同的标识"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"1 - a 和 b 没有相同的标识"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( id(a) == id(b) ):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"2 - a 和 b 有相同的标识"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"2 - a 和 b 没有相同的标识"</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">修改变量 b 的值</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">b = <span class="number">30</span></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">is</span> b ):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"3 - a 和 b 有相同的标识"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"3 - a 和 b 没有相同的标识"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">is</span> <span class="keyword">not</span> b ):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"4 - a 和 b 没有相同的标识"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"4 - a 和 b 有相同的标识"</span>)</span><br><span class="line">~~~   </span><br><span class="line">以上实例输出结果：</span><br><span class="line">><span class="number">1</span> - a 和 b 有相同的标识</span><br><span class="line">><span class="number">2</span> - a 和 b 有相同的标识</span><br><span class="line">><span class="number">3</span> - a 和 b 没有相同的标识</span><br><span class="line">><span class="number">4</span> - a 和 b 没有相同的标识</span><br><span class="line"></span><br><span class="line"><span class="comment">### is 与 == 区别</span></span><br><span class="line">~~~Python</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">>>>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">>>> </span>b = a</span><br><span class="line"><span class="meta">>>> </span>b <span class="keyword">is</span> a</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">>>> </span>b == a</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">>>> </span>b = a[:]   <span class="comment"># 其中[:]表示复制传值</span></span><br><span class="line"><span class="meta">>>> </span>b <span class="keyword">is</span> a</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">>>> </span>b == a</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="Python运算符优先级"><a href="#Python运算符优先级" class="headerlink" title="Python运算符优先级"></a>Python运算符优先级</h2><p>以下表格列出了从最高到最低优先级的所有运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>**</td>
<td>指数 (最高优先级)</td>
</tr>
<tr>
<td>~ + -</td>
<td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>
</tr>
<tr>
<td>* / % //</td>
<td>乘，除，取模和取整除</td>
</tr>
<tr>
<td>+ -</td>
<td>加法减法</td>
</tr>
<tr>
<td>>> <<</td>
<td>右移，左移运算符</td>
</tr>
<tr>
<td>&</td>
<td>位 ‘AND’</td>
</tr>
<tr>
<td>^ l</td>
<td>位运算符</td>
</tr>
<tr>
<td><= < > >=</td>
<td>比较运算符</td>
</tr>
<tr>
<td><> == !=</td>
<td>等于运算符</td>
</tr>
<tr>
<td>= %= /= //= -= += = *=</td>
<td>赋值运算符</td>
</tr>
<tr>
<td>is is not</td>
<td>身份运算符</td>
</tr>
<tr>
<td>in not in</td>
<td>成员运算符</td>
</tr>
<tr>
<td>not or and</td>
<td>逻辑运算符</td>
</tr>
</tbody></table>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装mariadb</title>
    <url>/2020/05/12/ubuntu%E5%AE%89%E8%A3%85mariadb/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mariadb-server</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl status mariadb</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></tbody></table></figure></div>

<p>脚本将会提示你输入 root 密码：</p>
<blockquote>
<p>Enter current password for root (enter for none):</p>
</blockquote>
<p>你会被问到是否 MySQL root 用户设置密码：</p>
<blockquote>
<p>Set root password? [Y/n]</p>
</blockquote>
<p>你将会被要求移除匿名用户，限制 root 用户访问本地机器，移除测试数据库，并且重新加载权限表。</p>
<blockquote>
<p>Remove anonymous users? [Y/n] Y<br>Disallow root login remotely? [Y/n] Y<br>Remove test database and access to it? [Y/n] Y<br>Reload privilege tables now? [Y/n] Y</p>
</blockquote>
<h3 id="允许远程连接"><a href="#允许远程连接" class="headerlink" title="允许远程连接"></a>允许远程连接</h3><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'root'</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>将/etc/mysql/mariadb.conf.d/50-server.cnf中bind-address = 127.0.0.1加# 注释掉</p>
<h4 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl restart mariadb.service</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vue生命周期简答</title>
    <url>/2020/08/16/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%80%E7%AD%94/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><p>MVVM是Model-View-ViewModel缩写，也就是把MVC中的Controller演变成ViewModel。Model层代表数据模型，View代表UI组件，ViewModel是View和Model层的桥梁，数据会绑定到viewModel层并自动将数据渲染到页面中，视图变化的时候会通知viewModel层更新数据。</p>
<h4 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h4><p>Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p>
<h5 id="它的生命周期中有多个事件钩子，让我们在控制整个vue实例的过程中更容易形成好的逻辑。"><a href="#它的生命周期中有多个事件钩子，让我们在控制整个vue实例的过程中更容易形成好的逻辑。" class="headerlink" title="它的生命周期中有多个事件钩子，让我们在控制整个vue实例的过程中更容易形成好的逻辑。"></a>它的生命周期中有多个事件钩子，让我们在控制整个vue实例的过程中更容易形成好的逻辑。</h5><ol>
<li>beforeCreate—-创建前: 组件实例更被创建，组件属性计算之前，数据对象data都为undefined，未初始化。</li>
<li>created—-创建后：组件实例创建完成，属性已经绑定，数据对象data已存在，但dom未生成，$el未存在</li>
<li>beforeMount—挂载前：vue实例的$el和data都已初始化，挂载之前为虚拟的dom节点，data.message未替换</li>
<li>mounted—–挂载后：vue实例挂载完成，data.message成功渲染。</li>
<li>beforeUpdate—-更新前：当data变化时，会触发beforeUpdate方法</li>
<li>updated—-更新后：当data变化时，会触发updated方法</li>
<li>beforeDestory—销毁前：组件销毁之前调用</li>
<li>destoryed—销毁后：组件销毁之后调用，对data的改变不会再触发周期函数，vue实例已解除事件监听和dom绑定，但dom结构依然存在</li>
</ol>
<h5 id="简述生命周期"><a href="#简述生命周期" class="headerlink" title="简述生命周期"></a>简述生命周期</h5><ol>
<li>beforeCreate   实例准备开始创建</li>
<li>created 实例创建完成，数据初始化完成</li>
<li>beforeMount 实例挂在之前，无法访问DOM</li>
<li>mounted  实例挂载完成，可以访问真实DOM</li>
<li>beforeUpdate  数据发生更新，访问的是旧的DOM，和最新的数据</li>
<li>updated：DOM更i新完成，可以访问最新的DOM</li>
<li>activated：组件被激活</li>
<li>deactivated：组件被冻结  </li>
<li>beforeDestroy：组件实例即将销毁</li>
<li>destroyed：组件实例销毁完成</li>
<li>deactivated/beforeDestroy必须是keep-alive的组件才会有</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack配置</title>
    <url>/2020/07/24/webpack%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="建立-webpack-vue-loader-项目"><a href="#建立-webpack-vue-loader-项目" class="headerlink" title="建立 webpack+vue-loader 项目"></a>建立 webpack+vue-loader 项目</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>创建 jtodo 目录，并初始化项目</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ git init // 初始化 git 仓库</span><br><span class="line">$ npm init // 初始化 npm 项目，目录生成 `package.json` 文件</span><br></pre></td></tr></tbody></table></figure></div>

<p>安装 webpack 打包工具，vue 解释器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i webpack webpack-cli vue-template-compiler css-loader --save-dev</span><br><span class="line">$ npm i vue vue-loader --save-dev</span><br></pre></td></tr></tbody></table></figure></div>

<p>新建 src 目录，及该目录下的 app.vue 和 index.js 文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">// app.vue</span><br><span class="line"><span class="tag"><<span class="name">template</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>></span>{{text}}<span class="tag"><!--<span class="name"-->div</span>></span><br><span class="line"><span class="tag"><!--<span class="name"-->template</span>></span><br><span class="line"></span><br><span class="line"><span class="tag"><<span class="name">script</span>></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line">  data() {</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="actionscript">      text: <span class="string">'hello world!'</span></span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="tag"><!--<span class="name"-->script</span>></span><br><span class="line"></span><br><span class="line"><span class="tag"><<span class="name">style</span>></span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> {</span></span><br><span class="line">  color: red;</span><br><span class="line">}</span><br><span class="line"><span class="tag"><!--<span class="name"-->style</span>></span><br></pre></td></tr></tbody></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./app.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(root)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 app.vue 挂载到 root 元素上</span></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =></span> h(App)</span><br><span class="line">}).$ mount(root)</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="配置项目的打包入口和出口"><a href="#配置项目的打包入口和出口" class="headerlink" title="配置项目的打包入口和出口"></a>配置项目的打包入口和出口</h4><p>在根目录新建 webpack.config.js 文件，并配置项目的打包入口和出口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: path.join(__dirname,  <span class="comment">// 使用绝对路径'src/index.js'),</span></span><br><span class="line">  ouput: {</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="配置-build-脚本并测试"><a href="#配置-build-脚本并测试" class="headerlink" title="配置 build 脚本并测试"></a>配置 build 脚本并测试</h4><p>在 package.json 配置 build 脚本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">{</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"scripts"</span>: {</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack --config webpack.config.js"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>此时尝试 $ npm run build ，报错如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ERROR in ./src/app.vue 1:0</span><br><span class="line">Module parse failed: Unexpected token (1:0)</span><br><span class="line">You may need an appropriate loader to handle this file type.</span><br><span class="line">> <template><br><span class="line">|   <div>hello</div></span><br><span class="line">| </span></template></span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="webpack-配置项目加载静态文件和-CSS-预处理器"><a href="#webpack-配置项目加载静态文件和-CSS-预处理器" class="headerlink" title="webpack 配置项目加载静态文件和 CSS 预处理器"></a>webpack 配置项目加载静态文件和 CSS 预处理器</h3><h4 id="配置-vue-文件中的-CSS-解释器"><a href="#配置-vue-文件中的-CSS-解释器" class="headerlink" title="配置 vue 文件中的 CSS 解释器"></a>配置 vue 文件中的 CSS 解释器</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> { VueLoaderPlugin } = <span class="built_in">require</span>(<span class="string">'vue-loader'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/.vue$ /</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span></span><br><span class="line">      },</span><br><span class="line">      { <span class="comment">// vue-loader@15.*之后，还需 css-loader 去解析 vue 中的 style</span></span><br><span class="line">        test: <span class="regexp">/\.css$ /</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>运行 $ npm run build ，成功打包项目</p>
<h4 id="配置项目加载静态文件"><a href="#配置项目加载静态文件" class="headerlink" title="配置项目加载静态文件"></a>配置项目加载静态文件</h4><p>项目中的一些小静态文件，可以把小静态文件转换成代码，直接写到 JS 文件中，减少 HTTP 请求。</p>
<p>安装解释器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i file-loader, url-loader --save-dev</span><br></pre></td></tr></tbody></table></figure></div>

<p>配置项目加载静态文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      ...</span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.(gif|jpg|jpeg|png|svg)$ /</span>,</span><br><span class="line">        use: [</span><br><span class="line">          {</span><br><span class="line">            loader: <span class="string">'url-loader'</span>, <span class="comment">// 把小静态文件转换成代码，直接写到 JS 文件中，减少 HTTP 请求</span></span><br><span class="line">            options: {</span><br><span class="line">              limit: <span class="number">2048</span>, <span class="comment">// 单位是 B</span></span><br><span class="line">              name: <span class="string">'[name]-aaa.[ext]'</span> <span class="comment">// 重命名图片</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>接着在目录 src/assets/images/ 下新建 bg.svg 文件测试</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"><svg xmlns="http://www.w3.org/2000/svg" width="400" height="400" viewBox="0 0 800 800"><rect fill="#330033" width="800" height="800"/><g fill="none" stroke="#404" stroke-width="1"><path d="M769 229L1037 260.9M927 880L731 737 520 660 309 538 40 599 295 764 126.5 879.5 40 599-197 493 102 382-31 229 126.5 79.5-69-63"/><path d="M-31 229L237 261 390 382 603 493 308.5 537.5 101.5 381.5M370 905L295 764"/><path d="M520 660L578 842 731 737 840 599 603 493 520 660 295 764 309 538 390 382 539 269 769 229 577.5 41.5 370 105 295 -36 126.5 79.5 237 261 102 382 40 599 -69 737 127 880"/><path d="M520-140L578.5 42.5 731-63M603 493L539 269 237 261 370 105M902 382L539 269M390 382L102 382"/><path d="M-222 42L126.5 79.5 370 105 539 269 577.5 41.5 927 80 769 229 902 382 603 493 731 737M295-36L577.5 41.5M578 842L295 764M40-201L127 80M102 382L-261 269"/></g><g fill="#505"><circle cx="769" cy="229" r="5"/><circle cx="539" cy="269" r="5"/><circle cx="603" cy="493" r="5"/><circle cx="731" cy="737" r="5"/><circle cx="520" cy="660" r="5"/><circle cx="309" cy="538" r="5"/><circle cx="295" cy="764" r="5"/><circle cx="40" cy="599" r="5"/><circle cx="102" cy="382" r="5"/><circle cx="127" cy="80" r="5"/><circle cx="370" cy="105" r="5"/><circle cx="578" cy="42" r="5"/><circle cx="237" cy="261" r="5"/><circle cx="390" cy="382" r="5"/></g></svg></span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="配置-SCSS-解释器"><a href="#配置-SCSS-解释器" class="headerlink" title="配置 SCSS 解释器"></a>配置 SCSS 解释器</h4><p>安装解释器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i sass-loader, node-sass, style-loader --save-dev</span><br></pre></td></tr></tbody></table></figure></div>

<p>配置 SCSS 解释器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      ...</span><br><span class="line">      {</span><br><span class="line">        test: <span class="regexp">/\.scss$ /</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,<span class="comment">// 将 JS 字符串生成为 style 节点</span></span><br><span class="line">          <span class="string">"css-loader"</span>, <span class="comment">// 将 CSS 转化成 CommonJS 模</span></span><br><span class="line">          <span class="string">"sass-loader"</span></span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
<p>接着在目录 src/assets/styles/ 下新建 global.scss 文件测试</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">// global.scss</span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> {</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../images/bg.svg'</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-position</span>: center center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4d4d4d</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h3><h4 id="配置-webpack-dev-server"><a href="#配置-webpack-dev-server" class="headerlink" title="配置 webpack-dev-server"></a>配置 webpack-dev-server</h4><p>webpack-dev-server 能帮助程序员在开发环境中预览项目</p>
<p>安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i webpack-dev-server cross-env --save-dev</span><br></pre></td></tr></tbody></table></figure></div>

<p>在 package.json 配置 dev 脚本，并设置环境变量标识环境，同时使得跨平台命令统一（cross-env）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">{</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"scripts"</span>: {</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack --config webpack.config.js"</span>,</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"cross-env NODE_ENV=development webpack-dev-server --config webpack.config.js"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<p>在根目录新建 webpack.config.js 文件，并配置项目的开发环境</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> { VueLoaderPlugin } = <span class="built_in">require</span>(<span class="string">'vue-loader'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>) <span class="comment">// 引入 webpack</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 build 或 dev 脚本时，会把环境变量存在 process.env 中</span></span><br><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV === <span class="string">'development'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = {</span><br><span class="line">  target: <span class="string">'web'</span>, <span class="comment">// 编译目标 web 平台</span></span><br><span class="line">  entry: path.join(__dirname, <span class="string">'src/index.js'</span>),  <span class="comment">// 使用绝对路径</span></span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  },</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin({</span><br><span class="line">      <span class="string">'process.env'</span>: {</span><br><span class="line">        NODE_ENV: isDev ? <span class="string">'"development"'</span> : <span class="string">'"production"'</span>,</span><br><span class="line">      },</span><br><span class="line">    }),</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">  ]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDev) {</span><br><span class="line">  config.devServer = {</span><br><span class="line">    port: <span class="number">8000</span>,</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>, <span class="comment">// 设 IP 为 0.0.0.0 可用同时用 localhost 和内网 IP 访问</span></span><br><span class="line">    overlay: { <span class="comment">// 在网页上报错</span></span><br><span class="line">      errors: <span class="literal">true</span>,</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="配置html入口"><a href="#配置html入口" class="headerlink" title="配置html入口"></a>配置html入口</h4><p>安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ npm i html-webpack-plugin --save-dev</span><br></pre></td></tr></tbody></table></figure></div>
<p>预览项目需要有一个 html 文件去包含 index.js ，在 webpack.config.js 添加如下信息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> HTMLPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = {</span><br><span class="line">  ...</span><br><span class="line">  plugins: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">new</span> HTMLPlugin()</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="配置热重载和-devtool"><a href="#配置热重载和-devtool" class="headerlink" title="配置热重载和 devtool"></a>配置热重载和 devtool</h4><p>前面修改组件代码后，会自动更新整个页面，现在配置修改组件时，仅重新渲染该组件。另外，添加了 devtool 来帮助我们在浏览器调试代码。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (isDev) {</span><br><span class="line">  ...</span><br><span class="line">  config.devtool = <span class="string">'#cheap-module-eval-source-map'</span> <span class="comment">// 用 devtool 检查代码</span></span><br><span class="line">  config.plugins.push(</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(), <span class="comment">// 模块热重载</span></span><br><span class="line">    <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin(), <span class="comment">// 减少不需要信息的展示</span></span><br><span class="line">  )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Cookiecutter快速搭建Django应用</title>
    <url>/2018/03/16/%E4%BD%BF%E7%94%A8Cookiecutter%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BADjango%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h2 id="安装Cookiecutter"><a href="#安装Cookiecutter" class="headerlink" title="安装Cookiecutter"></a>安装Cookiecutter</h2><p>在Python3环境中使用pip3安装：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ yum install git  # 先在系统上安装git</span><br><span class="line">$ pip3 install cookiecutter</span><br><span class="line">$ ln -s /usr/local/python3/bin/cookiecutter /usr/bin/cookiecutter  # 创建软链接，/usr/local/python3/是Python3的安装路径</span><br></pre></td></tr></tbody></table></figure></div>
<p>然后到你想要创建项目的目录，执行如下命令：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ cookiecutter https://github.com/pydanny/cookiecutter-django.git</span><br></pre></td></tr></tbody></table></figure></div>

<p>配置过程如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">project_name [My Awesome Project]: myproject  # 项目名称</span><br><span class="line">project_slug [myproject]: app01  # slug</span><br><span class="line">description [Behold My Awesome Project!]: This is the first application!  # 项目描述</span><br><span class="line">author_name [Daniel Roy Greenfeld]: __oreki__  # 作者</span><br><span class="line">domain_name [example.com]:   # 部署的域名</span><br><span class="line">email [__oreki__@example.com]:   # 邮箱</span><br><span class="line">version [0.1.0]:  # 版本号，默认为0.1.0</span><br><span class="line">Select open_source_license:  # 选择项目License</span><br><span class="line">1 - MIT</span><br><span class="line">2 - BSD</span><br><span class="line">3 - GPLv3</span><br><span class="line">4 - Apache Software License 2.0</span><br><span class="line">5 - Not open source</span><br><span class="line">Choose from 1, 2, 3, 4, 5 (1, 2, 3, 4, 5) [1]: 5</span><br><span class="line">timezone [UTC]: Asia/Shanghai  # Django settings中的TIME_ZONE</span><br><span class="line">windows [n]: n # 是否是Windows环境</span><br><span class="line">use_pycharm [n]: y  # 是否使用Pycharm开发</span><br><span class="line">use_docker [n]: y  # 是否使用Docker容器</span><br><span class="line">Select postgresql_version:  # 选择Postgres数据库版本，cookiecutter-django默认只支持Postgres</span><br><span class="line">1 - 10.5</span><br><span class="line">2 - 10.4</span><br><span class="line">3 - 10.3</span><br><span class="line">4 - 10.2</span><br><span class="line">5 - 10.1</span><br><span class="line">6 - 9.6</span><br><span class="line">7 - 9.5</span><br><span class="line">8 - 9.4</span><br><span class="line">9 - 9.3</span><br><span class="line">Choose from 1, 2, 3, 4, 5, 6, 7, 8, 9 (1, 2, 3, 4, 5, 6, 7, 8, 9) [1]: 1</span><br><span class="line">Select js_task_runner:  # js运行方式</span><br><span class="line">1 - None</span><br><span class="line">2 - Gulp</span><br><span class="line">Choose from 1, 2 (1, 2) [1]: 1</span><br><span class="line">custom_bootstrap_compilation [n]: n  # 是否自定义bootstrap压缩</span><br><span class="line">use_compressor [n]: n  # 是否使用压缩</span><br><span class="line">use_celery [n]: n  # 是否使用celery，一个异步任务队列</span><br><span class="line">use_mailhog [n]: n  # 是否使用mailhog，Django项目中发送邮件的，也可以使用Mailgun代替</span><br><span class="line">use_sentry [n]: n  # 是否使用错误日志日志监控，sentry也是不错的开源python项目</span><br><span class="line">use_whitenoise [n]: y  # 是否使用whitenoise</span><br><span class="line">use_heroku [n]: n  # 是否使用heroku，heroku是国外著名的云服务厂商之一，提供PaaS</span><br><span class="line">use_travisci [n]: n  # 是否使用travisci，类似于jekins，用于DevOps中的持续集成与发布</span><br><span class="line">keep_local_envs_in_vcs [y]: y  # 对于本地环境变量使用版本控制</span><br><span class="line">debug [n]: y  # 是否开启debug模式，settings中配置</span><br><span class="line"> [SUCCESS]: Project initialized, keep up the good work!</span><br><span class="line">[root@shiyanlou ~]#</span><br></pre></td></tr></tbody></table></figure></div>

<p>安装完成后，完整项目结构如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[root@shiyanlou ~]# cd app01/</span><br><span class="line">[root@shiyanlou app01]# tree  # 如果没有，先yum install tree</span><br><span class="line">.</span><br><span class="line">├── app01</span><br><span class="line">│   ├── conftest.py</span><br><span class="line">│   ├── contrib</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── sites</span><br><span class="line">│   │       ├── __init__.py</span><br><span class="line">│   │       └── migrations</span><br><span class="line">│   │           ├── 0001_initial.py</span><br><span class="line">│   │           ├── 0002_alter_domain_unique.py</span><br><span class="line">│   │           ├── 0003_set_site_domain_and_name.py</span><br><span class="line">│   │           └── __init__.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── static  # 静态文件</span><br><span class="line">│   │   ├── css</span><br><span class="line">│   │   │   └── project.css</span><br><span class="line">│   │   ├── fonts</span><br><span class="line">│   │   ├── images</span><br><span class="line">│   │   │   └── favicons</span><br><span class="line">│   │   │       └── favicon.ico</span><br><span class="line">│   │   ├── js</span><br><span class="line">│   │   │   └── project.js</span><br><span class="line">│   │   └── sass</span><br><span class="line">│   │       ├── custom_bootstrap_vars.scss</span><br><span class="line">│   │       └── project.scss</span><br><span class="line">│   ├── templates  # 模板</span><br><span class="line">│   │   ├── 403_csrf.html</span><br><span class="line">│   │   ├── 404.html</span><br><span class="line">│   │   ├── 500.html</span><br><span class="line">│   │   ├── account</span><br><span class="line">│   │   │   ├── account_inactive.html</span><br><span class="line">│   │   │   ├── base.html</span><br><span class="line">│   │   │   ├── email_confirm.html</span><br><span class="line">│   │   │   ├── email.html</span><br><span class="line">│   │   │   ├── login.html</span><br><span class="line">│   │   │   ├── logout.html</span><br><span class="line">│   │   │   ├── password_change.html</span><br><span class="line">│   │   │   ├── password_reset_done.html</span><br><span class="line">│   │   │   ├── password_reset_from_key_done.html</span><br><span class="line">│   │   │   ├── password_reset_from_key.html</span><br><span class="line">│   │   │   ├── password_reset.html</span><br><span class="line">│   │   │   ├── password_set.html</span><br><span class="line">│   │   │   ├── signup_closed.html</span><br><span class="line">│   │   │   ├── signup.html</span><br><span class="line">│   │   │   ├── verification_sent.html</span><br><span class="line">│   │   │   └── verified_email_required.html</span><br><span class="line">│   │   ├── base.html</span><br><span class="line">│   │   ├── pages</span><br><span class="line">│   │   │   ├── about.html</span><br><span class="line">│   │   │   └── home.html</span><br><span class="line">│   │   └── users</span><br><span class="line">│   │       ├── user_detail.html</span><br><span class="line">│   │       ├── user_form.html</span><br><span class="line">│   │       └── user_list.html</span><br><span class="line">│   └── users  # 用户模块</span><br><span class="line">│       ├── adapters.py</span><br><span class="line">│       ├── admin.py</span><br><span class="line">│       ├── apps.py</span><br><span class="line">│       ├── forms.py</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       ├── migrations</span><br><span class="line">│       │   ├── 0001_initial.py</span><br><span class="line">│       │   └── __init__.py</span><br><span class="line">│       ├── models.py</span><br><span class="line">│       ├── tests</span><br><span class="line">│       │   ├── factories.py</span><br><span class="line">│       │   ├── __init__.py</span><br><span class="line">│       │   ├── test_forms.py</span><br><span class="line">│       │   ├── test_models.py</span><br><span class="line">│       │   ├── test_urls.py</span><br><span class="line">│       │   └── test_views.py</span><br><span class="line">│       ├── urls.py</span><br><span class="line">│       └── views.py</span><br><span class="line">├── compose  # docker compose</span><br><span class="line">│   ├── local  # 开发环境</span><br><span class="line">│   │   └── django</span><br><span class="line">│   │       ├── Dockerfile</span><br><span class="line">│   │       └── start</span><br><span class="line">│   └── production  # 生产环境</span><br><span class="line">│       ├── caddy  # caddy用于https部署</span><br><span class="line">│       │   ├── Caddyfile</span><br><span class="line">│       │   └── Dockerfile</span><br><span class="line">│       ├── django  # django应用容器</span><br><span class="line">│       │   ├── Dockerfile</span><br><span class="line">│       │   ├── entrypoint</span><br><span class="line">│       │   └── start</span><br><span class="line">│       └── postgres  # 数据库容器</span><br><span class="line">│           ├── Dockerfile</span><br><span class="line">│           └── maintenance</span><br><span class="line">│               ├── backup</span><br><span class="line">│               ├── backups</span><br><span class="line">│               ├── restore</span><br><span class="line">│               └── _sourced</span><br><span class="line">│                   ├── constants.sh</span><br><span class="line">│                   ├── countdown.sh</span><br><span class="line">│                   ├── messages.sh</span><br><span class="line">│                   └── yes_no.sh</span><br><span class="line">├── config  # Django的配置</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings</span><br><span class="line">│   │   ├── base.py</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── local.py  # 开发环境</span><br><span class="line">│   │   ├── production.py  # 生产环境</span><br><span class="line">│   │   └── test.py  # 测试环境</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── docs # 项目文档</span><br><span class="line">│   ├── conf.py</span><br><span class="line">│   ├── deploy.rst</span><br><span class="line">│   ├── docker_ec2.rst</span><br><span class="line">│   ├── index.rst</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── install.rst</span><br><span class="line">│   ├── make.bat</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   └── pycharm</span><br><span class="line">│       ├── configuration.rst</span><br><span class="line">│       └── images</span><br><span class="line">│           ├── 1.png</span><br><span class="line">│           ├── 2.png</span><br><span class="line">│           ├── 3.png</span><br><span class="line">│           ├── 4.png</span><br><span class="line">│           ├── 7.png</span><br><span class="line">│           ├── 8.png</span><br><span class="line">│           ├── f1.png</span><br><span class="line">│           ├── f2.png</span><br><span class="line">│           ├── f3.png</span><br><span class="line">│           ├── f4.png</span><br><span class="line">│           ├── issue1.png</span><br><span class="line">│           └── issue2.png</span><br><span class="line">├── locale</span><br><span class="line">│   └── README.rst</span><br><span class="line">├── local.yml</span><br><span class="line">├── manage.py</span><br><span class="line">├── merge_production_dotenvs_in_dotenv.py</span><br><span class="line">├── production.yml</span><br><span class="line">├── pytest.ini</span><br><span class="line">├── README.rst</span><br><span class="line">├── requirements  # 包和模块</span><br><span class="line">│   ├── base.txt  # 必备的</span><br><span class="line">│   ├── local.txt  # 开发环境，可能包含一些测试用的包</span><br><span class="line">│   └── production.txt  # 生产环境</span><br><span class="line">└── setup.cfg</span><br><span class="line"></span><br><span class="line">34 directories, 109 files</span><br><span class="line">[root@shiyanlou app01]#</span><br></pre></td></tr></tbody></table></figure></div>

<h2 id="包环境管理"><a href="#包环境管理" class="headerlink" title="包环境管理"></a>包环境管理</h2><h3 id="pipenv创建环境"><a href="#pipenv创建环境" class="headerlink" title="pipenv创建环境"></a>pipenv创建环境</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[root@shiyanlou ~]# cd app01/</span><br><span class="line">[root@shiyanlou app01]# pipenv --python 3.7</span><br><span class="line">Creating a virtualenv for this project…</span><br><span class="line">Pipfile: /root/app01/Pipfile</span><br><span class="line">Using /usr/bin/python3 (3.7.2) to create virtualenv…</span><br><span class="line">⠙ Creating virtual environment...Using base prefix '/usr/local/python3'</span><br><span class="line">New python executable in /root/.local/share/virtualenvs/app01-DYWCxUWF/bin/python3</span><br><span class="line">Also creating executable in /root/.local/share/virtualenvs/app01-DYWCxUWF/bin/python</span><br><span class="line">Installing setuptools, pip, wheel...</span><br><span class="line">done.</span><br><span class="line">Running virtualenv with interpreter /usr/bin/python3</span><br><span class="line">✔ Successfully created virtual environment!</span><br><span class="line">Virtualenv location: /root/.local/share/virtualenvs/app01-DYWCxUWF</span><br><span class="line">Creating a Pipfile for this project…</span><br><span class="line">[root@shiyanlou app01]#</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="安装包并lock"><a href="#安装包并lock" class="headerlink" title="安装包并lock"></a>安装包并lock</h3><p>安装前先将requirements/local.txt中的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">psycopg2==2.7.4 --no-binary psycopg2  # https://github.com/psycopg/psycopg2</span><br></pre></td></tr></tbody></table></figure></div>
<p>改成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">psycopg2 --no-binary psycopg2  # https://github.com/psycopg/psycopg2</span><br></pre></td></tr></tbody></table></figure></div>
<p>否则会安装失败。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[root@shiyanlou app01]# pipenv install -r requirements/local.txt --skip-lock</span><br><span class="line">Requirements file provided! Importing into Pipfile…</span><br><span class="line">Installing dependencies from Pipfile…</span><br><span class="line">  ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 28/28 — 00:00:13</span><br><span class="line">To activate this project's virtualenv, run pipenv shell.</span><br><span class="line">Alternatively, run a command inside the virtualenv with pipenv run.</span><br><span class="line">[root@shiyanlou app01]#</span><br></pre></td></tr></tbody></table></figure></div>
<p>如何有提示An error occurred while installing xxx，重新运行一遍就行了，因为pipenv不稳定。</p>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式消息队列celery</title>
    <url>/2020/04/21/%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97celery/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="celery基本原理"><a href="#celery基本原理" class="headerlink" title="celery基本原理"></a>celery基本原理</h3><p>1、客户端也就是python（django/flask等）发布任务</p>
<p>2、发布的任务存到任务队列里面，可以以redis、rabbitMQ、MessageQueue、MySQL存储，一般在django/flask程序里redis居多</p>
<p>3、任务处理者会不断从任务队列里面获取任务执行</p>
<h3 id="Celery设计"><a href="#Celery设计" class="headerlink" title="Celery设计"></a>Celery设计</h3><p>celery由五大模块实现。</p>
<ol>
<li><p>Task<br>就是任务，有异步任务和定时任务。</p>
</li>
<li><p>Broker<br>中间人，接收生产者发来的消息即Task，将任务存入队列。任务的消费者是Worker。Celery本身不提供队列服务，推荐用Redis或RabbitMQ实现队列服务。</p>
</li>
<li><p>Worker<br>执行任务的单元，它实时监控消息队列，如果有任务就获取任务并执行它。</p>
</li>
<li><p>Beat<br>定时任务调度器，根据配置定时将任务发送给Broler。</p>
</li>
<li><p>Backend<br>用于存储任务的执行结果。</p>
</li>
</ol>
<p><a href="%E7%BB%84%E6%88%90%E5%85%B3%E7%B3%BB.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E7%BB%84%E6%88%90%E5%85%B3%E7%B3%BB.png" class="lazyload"></a></p>
<h3 id="Celery安装配置"><a href="#Celery安装配置" class="headerlink" title="Celery安装配置"></a>Celery安装配置</h3><p>Celery 4.0+及以后版本不支持在windows系统上运行。如果你希望在windows系统上使用celery, 有两种方法。<br>1.安装3.1.25版本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install celery==3.1.25</span><br></pre></td></tr></tbody></table></figure></div>
<p>2.安装gevent</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install gevent</span><br><span class="line"># 启动worker</span><br><span class="line">celery -A <module> worker -l info -P gevent</module></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h3><p>首先编写一个文件 命名为task1.py</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line">app = Celery(<span class="string">'tasks'</span>,broker=<span class="string">'redis://192.168.1.102:6379/0'</span>)</span><br><span class="line"><span class="comment"># redis://192.168.1.102:6379/0 是redis数据库地址，无需账号密码验证，也是ssrf在获取内网系统权限的方式之一</span></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    print(<span class="string">'传递 {} + {} = {}'</span>.format(x,y,x+y))</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br></pre></td></tr></tbody></table></figure></div>
<p>然后启动redis数据库<br>接下来再task1文件夹执行命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">celery -A task1 worker --loglevel=info</span><br></pre></td></tr></tbody></table></figure></div>
<p>就会看到消息队列都启动<br><a href="1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="1.png" class="lazyload"></a><br>到现在所有的队列都启动，可以向这个队列添加任务等待处理</p>
<p>方法是再task1目录下打开cmd窗口，进入python交互界面</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> task1 <span class="keyword">import</span> add</span><br><span class="line">add.delay(<span class="number">6</span>,<span class="number">12</span>)</span><br><span class="line">add.delay(<span class="number">6</span>,<span class="number">6</span>)</span><br></pre></td></tr></tbody></table></figure></div>

<p><a href="2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="2.png" class="lazyload"></a></p>
<h4 id="保存结果"><a href="#保存结果" class="headerlink" title="保存结果"></a>保存结果</h4><p>上面只是一个发送任务的调用，结果是拿不到的。上面也没有接收返回值，这次把返回值保存到起来<br>修改task1内容</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">app = Celery(<span class="string">'tasks'</span>,broker=<span class="string">'redis://192.168.1.102:6379/0'</span>,backend=<span class="string">'redis://192.168.1.102:6379/0'</span>)</span><br></pre></td></tr></tbody></table></figure></div>
<p>然后要重启Worker，IDLE也要重启<br>然后这样就能获取结果了</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">t = add.delay(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">t.get()</span><br><span class="line"><span class="comment"># 还可以设置超时时间 t.get(timeout=5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果出错，获取错误结果，不触发异常</span></span><br><span class="line"><span class="comment"># 使用命令t.get(propagate=False)    </span></span><br><span class="line"><span class="comment"># t.traceback  （打印异常详细结果）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以获取任务状态</span></span><br><span class="line"><span class="comment"># t.ready() 返回True 或者False</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="在项目中使用celery"><a href="#在项目中使用celery" class="headerlink" title="在项目中使用celery"></a>在项目中使用celery</h3><p>可以把celery配置成一个应用，假设应用名字是CeleryPro，目录格式如下：<br>CeleryPro<br>├─__init.py<br>├─celery.py<br>├─tasks.py</p>
<p>这里的连接文件命名必须为celery.py，其他名字随意</p>
<h4 id="celery文件"><a href="#celery文件" class="headerlink" title="celery文件"></a>celery文件</h4><p>这个文件名必须是celery.py：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">'CeleryPro'</span>,</span><br><span class="line">             broker=<span class="string">'redis://192.168.1.102:6379'</span>,</span><br><span class="line">             backend=<span class="string">'redis://192.168.1.102:6379'</span>,</span><br><span class="line">             include=[<span class="string">'CeleryPro.tasks'</span>])</span><br><span class="line">app.conf.update(</span><br><span class="line">    result_expires=<span class="number">3600</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.start()</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="tasks文件"><a href="#tasks文件" class="headerlink" title="tasks文件"></a>tasks文件</h4><p>这个文件开始两行就多了一个点，这里要导入上面的celery.py文件。后面只要写各种任务加上装饰器就可以了：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">"计算2个值的和: %s %s"</span> % (x, y))</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upper</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(i)</span><br><span class="line">    <span class="keyword">return</span> v.upper()</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="启动worker"><a href="#启动worker" class="headerlink" title="启动worker"></a>启动worker</h4><p>这里注意用的都是CeleryPro：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">celery -A CeleryPro worker -loglevel=info  # 前台启动不推荐</span><br><span class="line">celery -A CeleryPro worker -l info  # 前台启动简写</span><br><span class="line">celery multi start w1 -A  CeleryPro -l info  # 推荐用后台启动</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><p>主要修改 celery.py文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">'CeleryPro'</span>,</span><br><span class="line">             broker=<span class="string">'redis://192.168.1.102'</span>,</span><br><span class="line">             backend=<span class="string">'redis://192.168.1.102'</span>,</span><br><span class="line">             include=[<span class="string">'CeleryPro.tasks'</span>])</span><br><span class="line"></span><br><span class="line">app.conf.CELERYBEAT_SCHEDULE = {</span><br><span class="line">    <span class="string">'add every 10 seconds'</span>: {</span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'CeleryPro.tasks.add'</span>,</span><br><span class="line">        <span class="string">'schedule'</span>: timedelta(seconds=<span class="number">10</span>),  </span><br><span class="line">        <span class="comment"># 可以用timedelta对象</span></span><br><span class="line">        <span class="comment"># 'schedule': 10,  # 也支持直接用数字表示秒数</span></span><br><span class="line">        <span class="string">'args'</span>: (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    },</span><br><span class="line">    <span class="string">'upper every 2 minutes'</span>: {</span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'CeleryPro.tasks.upper'</span>,</span><br><span class="line">        <span class="string">'schedule'</span>: crontab(minute=<span class="string">'*/2'</span>),</span><br><span class="line">        <span class="string">'args'</span>: (<span class="string">'abc'</span>, ),</span><br><span class="line">    },</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># app.conf.CELERY_TIMEZONE = 'UTC'</span></span><br><span class="line">app.conf.CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional configuration, see the application user guide.</span></span><br><span class="line">app.conf.update(</span><br><span class="line">    CELERY_TASK_RESULT_EXPIRES=<span class="number">3600</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.start()</span><br></pre></td></tr></tbody></table></figure></div>

<p>启动使用命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">celery -A CeleryPro beat -l info</span><br><span class="line">celery -A CeleryPro worker -l info</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="新例子"><a href="#新例子" class="headerlink" title="新例子"></a>新例子</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># tasks.py</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery,platforms</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">'tasks'</span>)</span><br><span class="line">app.config_from_object(<span class="string">'config'</span>)</span><br><span class="line">platforms.C_FORCE_ROOT = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></tbody></table></figure></div>
<p>和另一个文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># config.py</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line">BROKER_URL = <span class="string">'redis://127.0.0.1:6379/0'</span></span><br><span class="line"></span><br><span class="line">CELERYBEAT_SCHEDULE = {</span><br><span class="line">    <span class="string">'add-every-2-seconds'</span>: {</span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'tasks.add'</span>,</span><br><span class="line">        <span class="string">'schedule'</span>: timedelta(seconds=<span class="number">2</span>),</span><br><span class="line">        <span class="string">'args'</span>: (<span class="number">16</span>, <span class="number">10</span>),</span><br><span class="line">    },</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></tbody></table></figure></div>
<p>然后打开三个cmd窗口，依次输入：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">celery -A tasks beat -l info</span><br><span class="line">celery -A tasks worker -l info</span><br><span class="line">celery -A tasks flower</span><br></pre></td></tr></tbody></table></figure></div>
<p>然后访问本地5555端口即可~</p>
<h4 id="查看异步任务情况"><a href="#查看异步任务情况" class="headerlink" title="查看异步任务情况"></a>查看异步任务情况</h4><p>Celery提供了一个工具flower，将各个任务的执行情况、各个worker的健康状态进行监控并以可视化的方式展现</p>
<p>安装flower:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install flower</span><br></pre></td></tr></tbody></table></figure></div>
<p>启动flower（默认会启动一个webserver，端口为5555）</p>
<p>在另一个Terminal中：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">celery -A task1 flower</span><br></pre></td></tr></tbody></table></figure></div>

<p>这里的task1是上面创建的py文件</p>
<p>进入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http://localhost:5555</span><br></pre></td></tr></tbody></table></figure></div>
<p>查看</p>
</body></html>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机的几种IO口</title>
    <url>/2020/08/11/%E5%8D%95%E7%89%87%E6%9C%BA%E7%9A%84%E5%87%A0%E7%A7%8DIO%E5%8F%A3/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>学习单片机开发也有一段时间了，对一些底层的东西不太了解或不够深入，希望能弥补上这些知识空缺。</p>
<h3 id="GPIO的几种状态"><a href="#GPIO的几种状态" class="headerlink" title="GPIO的几种状态"></a>GPIO的几种状态</h3><blockquote>
<p>输入状态</p>
<blockquote>
<p>浮空输入<br>上/下拉输入<br>模拟输入</p>
</blockquote>
</blockquote>
<blockquote>
<p>输出状态</p>
<blockquote>
<p>推挽输出<br>开漏输出</p>
</blockquote>
</blockquote>
<h4 id="输入状态"><a href="#输入状态" class="headerlink" title="输入状态"></a>输入状态</h4><h5 id="浮空输入"><a href="#浮空输入" class="headerlink" title="浮空输入"></a>浮空输入</h5><p>辅控输入即IO口在芯片内部既不接上拉电阻也不接下拉电阻，输入电阻相当于非常大。IO口的电平状态不确定，完全由外部决定，悬空时用示波器直接测量可能是高电平也可能是低电平。由于浮空状态容易受到干扰甚至是静电导致芯片损坏，因此未使用的脚一般要避免浮空。<br>  浮空输入的常见运用是检测按键状态。</p>
<h5 id="上拉-下拉输入"><a href="#上拉-下拉输入" class="headerlink" title="上拉/下拉输入"></a>上拉/下拉输入</h5><p>IO上拉输入指的是通过配置，在芯片内部将该IO串联电阻后接Vcc；IO下拉输入指的是通过配置，在芯片内部将该IO串联电阻后接Gnd。</p>
<h5 id="模拟输入"><a href="#模拟输入" class="headerlink" title="模拟输入"></a>模拟输入</h5><p>普通的数字IO口可以通过输入数据寄存器的0或1读取到外部电平的高低状态，而模拟IO无法通过输入寄存器的值反应电平的高低，一般需要借助ADC或电压比较器去获取外部电平的值。<br>常用于AD检测或电压比较器。</p>
<h4 id="输出状态"><a href="#输出状态" class="headerlink" title="输出状态"></a>输出状态</h4><h5 id="推挽输出"><a href="#推挽输出" class="headerlink" title="推挽输出"></a>推挽输出</h5><p>推挽输出可以输出高低电平，可以直接驱动功耗不大的数字器件。内部结构相当于两个三极管或MOSFET互补工作，不管输出高还是低，总有一个开关管导通。如果两个推完输出相互直连，其中一个芯片若输出高，此时上面的MOS导通下面MOS闭合，而一个芯片若输出低，即下面的MOS导通上面的MOS闭合，电流会从上MOS导通的VCC直接流向下MOS导通的GND，整个通路电阻很小，将会发生短路并损坏端口。因此推挽输出不能实现”线与“。</p>
<h5 id="开漏输出"><a href="#开漏输出" class="headerlink" title="开漏输出"></a>开漏输出</h5><p>开漏输出只能输出低电平，如果要输出高电平必须通过外部上拉电阻才能实现。内部输出1时MOS管截止，输出与地断开，这时候IO其实没有驱动能力，需要外部连接上拉电阻才能输出高电平；内部输出0时MOS管导通接地，所以开漏达到输出低电平效果。开漏输出的吸电流能力较强，适合做电流型的驱动。<br>关于开漏输出接上拉电阻的一大运用是IIC线路。当上拉电阻阻值较小时，上升沿的延迟就小，但功耗较大，反之，当上拉电阻阻值较大时，上升沿延迟就大，但功耗较小。但电阻影响上升沿不影响下降沿。根据上升沿时延和功耗的需要，综合考虑选择合适的上拉电阻。</p>
<h5 id="高阻输出"><a href="#高阻输出" class="headerlink" title="高阻输出"></a>高阻输出</h5><p>IO的高阻态实际上是输出IO，与浮空输入有些类似，输入电阻都非常大。不同在于浮空输入是输入型IO，而高阻态IO实际是开漏输出在输出高电平时的状态，且外部不接上拉电阻。</p>
<h4 id="芯片复位后的IO状态"><a href="#芯片复位后的IO状态" class="headerlink" title="芯片复位后的IO状态"></a>芯片复位后的IO状态</h4><p>通常芯片复位后IO初始状态是高阻输入，为了防止芯片被异常复位时的IO电平变化对外部器件产生异常动作。但为了避免高阻输入产生漏电流，在芯片启动后需要对端口进行配置，改为其他状态，如内部拉高输入或输出。</p>
<h4 id="IO的驱动能力"><a href="#IO的驱动能力" class="headerlink" title="IO的驱动能力"></a>IO的驱动能力</h4><p>大部分的单片机IO口都可以选择驱动能力的强弱，一般来说驱动能力越强则功耗损耗也越大。IO对外部的驱动能力既要看电压驱动能力，还要看电流驱动能力。有个简易的判断驱动能力是否足够的方法，将电路开路后则是电压是否符合负载电压，如果负责则表示电压驱动能力足够，否则电压驱动能力不够。如果接上负载后电压降低了，这就表明电流驱动能力不足。</p>
</body></html>]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>如何绘制矩形并通过在PyQt5中拖放来调整其形状</title>
    <url>/2020/06/27/%E5%A6%82%E4%BD%95%E7%BB%98%E5%88%B6%E7%9F%A9%E5%BD%A2%E5%B9%B6%E9%80%9A%E8%BF%87%E5%9C%A8PyQt5%E4%B8%AD%E6%8B%96%E6%94%BE%E6%9D%A5%E8%B0%83%E6%95%B4%E5%85%B6%E5%BD%A2%E7%8A%B6/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>由PyQt5创建的GUI上绘制一个矩形.<br>拖动时,通过鼠标移动来调整矩形形状.<br>释放鼠标左键时,确定矩形形状.</p>
<h3 id="调用mouseMoveEvent函数"><a href="#调用mouseMoveEvent函数" class="headerlink" title="调用mouseMoveEvent函数"></a>调用mouseMoveEvent函数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets, QtCore</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QtWidgets.QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setGeometry(<span class="number">30</span>,<span class="number">30</span>,<span class="number">600</span>,<span class="number">400</span>)</span><br><span class="line">        self.begin = QtCore.QPoint()</span><br><span class="line">        self.end = QtCore.QPoint()</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qp = QtGui.QPainter(self)</span><br><span class="line">        br = QtGui.QBrush(QtGui.QColor(<span class="number">100</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">40</span>))  </span><br><span class="line">        qp.setBrush(br)   </span><br><span class="line">        qp.drawRect(QtCore.QRect(self.begin, self.end))       </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mousePressEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        self.begin = event.pos()</span><br><span class="line">        self.end = event.pos()</span><br><span class="line">        self.update()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseMoveEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        self.end = event.pos()</span><br><span class="line">        self.update()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseReleaseEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        self.begin = event.pos()</span><br><span class="line">        self.end = event.pos()</span><br><span class="line">        self.update()</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Pyqt5</category>
      </categories>
      <tags>
        <tag>Pyqt5</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库操作</title>
    <url>/2017/09/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h4 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students;</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">where</span> score >= <span class="number">80</span> <span class="keyword">AND</span> gender=<span class="string">'M'</span>;</span><br></pre></td></tr></tbody></table></figure></div>
<p>score和gender是查询条件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">NOT</span> class_id = <span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure></div>
<p>按NOT条件查询students，查找条件不为id=2的数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">SELECT * FROM students WHERE score < 80 OR score > 90 AND gender = 'M';</span><br></pre></td></tr></tbody></table></figure></div>
<p>如果不加括号，条件运算按照NOT、AND、OR的优先级进行，即NOT优先级最高，其次是AND，最后是OR。加上括号可以改变优先级。</p>
<h4 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, score points, <span class="keyword">name</span> <span class="keyword">FROM</span> students;</span><br></pre></td></tr></tbody></table></figure></div>
<p>SELECT语句将列名score重命名为points，而id和name列名保持不变</p>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score;</span><br></pre></td></tr></tbody></table></figure></div>
<p>默认按score从低到高</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure></div>
<p>按照成绩从高到底排序，我们可以加上DESC表示“倒序”</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>, gender;</span><br></pre></td></tr></tbody></table></figure></div>
<p>如果score列有相同的数据，要进一步排序，可以继续添加列名。例如，使用ORDER BY score DESC, gender表示先按score列倒序，如果有相同分数的，再按gender列排序</p>
<h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">3</span> <span class="keyword">OFFSET</span> <span class="number">0</span>;</span><br></pre></td></tr></tbody></table></figure></div>
<p>我们把结果集分页，每页3条记录。要获取第1页的记录，可以使用LIMIT 3 OFFSET 0<br>LIMIT3 表示每页最多3条记录，0是结果集从0号记录开始。如果想查看第二页的记录，将offset设为3.</p>
<h4 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h4><blockquote>
<p>对于统计总数、平均数这类计算，SQL提供了专门的聚合函数，使用聚合函数进行查询，就是聚合查询，它可以快速获得结果</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">num</span> <span class="keyword">FROM</span> students;</span><br></pre></td></tr></tbody></table></figure></div>
<p>COUNT(*)表示查询所有列的行数，要注意聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是COUNT(*)。</p>
<p>通常，使用聚合查询时，我们应该给列名设置一个别名（num），便于处理结果</p>
<blockquote>
<p>除了COUNT()函数外，SQL还提供了如下聚合函</p>
</blockquote>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>SUM</td>
<td>计算某一列的合计值，该列必须为数值类型</td>
</tr>
<tr>
<td>AVG</td>
<td>计算某一列的平均值，该列必须为数值类型</td>
</tr>
<tr>
<td>MAX</td>
<td>计算某一列的最大值</td>
</tr>
<tr>
<td>MIN</td>
<td>计算某一列的最小值</td>
</tr>
</tbody></table>
<p>注意，MAX()和MIN()函数并不限于数值类型。如果是字符类型，MAX()和MIN()会返回排序最后和排序最前的字符</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(score) average <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> gender = <span class="string">'M'</span>;</span><br></pre></td></tr></tbody></table></figure></div>
<p>使用聚合查询计算男生平均成绩</p>
<p>####分组查询</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">num</span> <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br></pre></td></tr></tbody></table></figure></div>
<p>按class_id分组</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> class_id, <span class="keyword">COUNT</span>(*) <span class="keyword">num</span> <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br></pre></td></tr></tbody></table></figure></div>
<p>但是这3行结果分别是哪三个班级的，不好看出来，所以我们可以把class_id列也放入结果集中</p>
<h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students, classes;</span><br></pre></td></tr></tbody></table></figure></div>

<blockquote>
<p>利用投影查询的“设置列的别名”来给两个表各自的id和name列起别名</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    students.id <span class="keyword">sid</span>,</span><br><span class="line">    students.name,</span><br><span class="line">    students.gender,</span><br><span class="line">    students.score,</span><br><span class="line">    classes.id cid,</span><br><span class="line">    classes.name cname</span><br><span class="line"><span class="keyword">FROM</span> students, classes;</span><br></pre></td></tr></tbody></table></figure></div>

<blockquote>
<p>给表面取别名</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s.id <span class="keyword">sid</span>,</span><br><span class="line">    s.name,</span><br><span class="line">    s.gender,</span><br><span class="line">    s.score,</span><br><span class="line">    c.id cid,</span><br><span class="line">    c.name cname</span><br><span class="line"><span class="keyword">FROM</span> students s, classes c;</span><br></pre></td></tr></tbody></table></figure></div>

<h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><blockquote>
<p>连接查询是另一种类型的多表查询。连接查询对多个表进行JOIN运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。</p>
</blockquote>
<h5 id="内连接-INNER-JOIN"><a href="#内连接-INNER-JOIN" class="headerlink" title="内连接 INNER JOIN"></a>内连接 INNER JOIN</h5><p>1.先确定主表，仍然使用FROM <表1>的语法；<br>2.再确定需要连接的表，使用INNER JOIN <表2>的语法；<br>3.然后确定连接条件，使用ON <条件…>，这里的条件是s.class_id = c.id，表示students表的class_id列与classes表的id列相同的行需要连接；<br>4.可选：加上WHERE子句、ORDER BY等子句。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id = c.id;</span><br></pre></td></tr></tbody></table></figure></div>
<p>选出所有学生，同时返回班级名称</p>
<h5 id="外连接-OUTER-JOIN"><a href="#外连接-OUTER-JOIN" class="headerlink" title="外连接 OUTER JOIN"></a>外连接 OUTER JOIN</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id = c.id;</span><br></pre></td></tr></tbody></table></figure></div>

<h5 id="查询范式"><a href="#查询范式" class="headerlink" title="查询范式"></a>查询范式</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> tableA ??? <span class="keyword">JOIN</span> tableB <span class="keyword">ON</span> tableA.column1 = tableB.column2;</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>数据库</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫面试题整理</title>
    <url>/2020/01/25/%E7%88%AC%E8%99%AB%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="简述一下爬虫的步骤。"><a href="#简述一下爬虫的步骤。" class="headerlink" title="简述一下爬虫的步骤。"></a>简述一下爬虫的步骤。</h3><ol>
<li>确定需求；</li>
<li>确定资源；</li>
<li>通过url获取网站的返回数据；</li>
<li>定位数据；</li>
<li>存储数据。</li>
</ol>
<h3 id="常见的HTTP方法有哪些？"><a href="#常见的HTTP方法有哪些？" class="headerlink" title="常见的HTTP方法有哪些？"></a>常见的HTTP方法有哪些？</h3><p>GET：请求指定的页面信息，返回实体主体；<br>HEAD:类似于get请求，只不过返回的响应中没有具体的内容，用于捕获报头；<br>POST：向指定资源提交数据进行处理请求(比如表单提交或者上传文件)，。数据被包含在请求体中。<br>PUT:从客户端向服务端传送数据取代指定的文档的内容；<br>DELETE：请求删除指定的页面；<br>CONNNECT：HTTP1.1协议中预留给能够将连接方式改为管道方式的代理服务器；<br>OPTIONS:允许客户端查看服务器的性能；<br>TRACE：回显服务器的请求，主要用于测试或者诊断。</p>
<h3 id="遇到的反爬虫策略以及解决方法。"><a href="#遇到的反爬虫策略以及解决方法。" class="headerlink" title="遇到的反爬虫策略以及解决方法。"></a>遇到的反爬虫策略以及解决方法。</h3><ol>
<li>通过headers反爬虫：自定义headers，添加网页中的headers数据。</li>
<li>基于用户行为的反爬虫(封IP)：可以使用多个代理IP爬取或者将爬取的频率降低。</li>
<li>动态网页反爬虫(JS或者Ajax请求数据)：动态网页可以使用 selenium + phantomjs 抓取。</li>
<li>字体加密反爬虫：浏览器调试模式找到woff字体文件。</li>
</ol>
<h3 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h3><h4 id="框架流程"><a href="#框架流程" class="headerlink" title="框架流程"></a>框架流程</h4><p><a href="scrapy.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="scrapy.png" class="lazyload"></a><br>Scrapy的整个数据处理流程有Scrapy引擎进行控制，其主要的运行方式为：</p>
<ol start="0">
<li>引擎打开一个域名时，爬行器(spider)处理这个域名。并且让爬行器获取第一个需要爬取的url，也就是初始请求。</li>
<li>Engine获得从爬行器(spider)中爬行的初始请求。</li>
<li>Engine在调度程序中调度请求，并请求下一次抓取请求。</li>
<li>调度程序将下一个请求返回到引擎。</li>
<li>引擎将请求发送到下载器，通过下载器中间件</li>
<li>页面下载完成后，下载器生成一个响应(带有该页面)并将其发送给引擎，通过下载器中间件</li>
<li>引擎从下载加载程序接收响应，并将其发送给Spider进行处理，并通过Spider中间件</li>
<li>Spider处理响应，并向引擎返回报废的项和新请求(要跟踪的)，通过Spider中间件</li>
<li>引擎将已处理的项目发送到项目管道，然后将已处理的请求发送到调度程序，并请求可能的下一个请求进行抓取。</li>
<li>这个过程重复(从第1步)，直到调度程序不再发出请求。</li>
</ol>
<h4 id="Scrapy是以广度优先还是深度优先进行爬取的呢？"><a href="#Scrapy是以广度优先还是深度优先进行爬取的呢？" class="headerlink" title="Scrapy是以广度优先还是深度优先进行爬取的呢？"></a>Scrapy是以广度优先还是深度优先进行爬取的呢？</h4><p>默认 深度优先顺序 。</p>
<p>如果您想以 广度优先顺序 进行爬取，你可以设置以下的设定:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">DEPTH_PRIORITY = <span class="number">1</span></span><br><span class="line">SCHEDULER_DISK_QUEUE = <span class="string">'scrapy.squeue.PickleFifoDiskQueue'</span></span><br><span class="line">SCHEDULER_MEMORY_QUEUE = <span class="string">'scrapy.squeue.FifoMemoryQueue'</span></span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2019/11/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><blockquote>
<p>在程序中，经常将一组数据元素作为整体管理和使用，需要创建这种元素组，用变量记录他们，传进传出函数<br>一组数据中包含的元素个数可能发生变化。</p>
</blockquote>
<p>对于这种需求，最简单的解决办法就是将这样一组元素看成一个序列，用元素在序列里的位置和顺序，表示实际应用中的某种有意义的信息。<br>这样的一组序列元素的组织形式，抽象为线性表。</p>
<p>根据线性表的实际存储方式，分为两种实现模型：</p>
<ol>
<li>顺序表，将元素顺序地存放在一块连续的存储区里，元素间的顺序关系由他们的存储顺序自然表示。</li>
<li>链表， 将元素存在通过链接构造起来的一系列存储块中。</li>
</ol>
<h4 id="顺序表-python中的list、tuple"><a href="#顺序表-python中的list、tuple" class="headerlink" title="顺序表(python中的list、tuple)"></a>顺序表(python中的list、tuple)</h4><p><a href="%E9%A1%BA%E5%BA%8F%E8%A1%A8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E9%A1%BA%E5%BA%8F%E8%A1%A8.png" class="lazyload"></a><br>图a表示的是顺序表的基本形式，数据元素本身连续存储，每个元素所占的存储单元大小固定相同。<br>如果元素的大小不统一，则须采用图b的元素外置的形式，将实际数据元素另行存储，而顺序表中各单元位置保存对应元素的地址信息（即链接）。</p>
<h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是不像顺序表一样连续存储数据，而是在每一个节点（数据存储单元）里存放下一个节点的位置信息（即地址）。</p>
<h5 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h5><p>单向链表也叫单链表，是链表中最简单的一种形式，它的每个节点包含两个域，一个信息域（元素域）和一个链接域。这个链接指向链表中的下一个节点，而最后一个节点的链接域则指向一个空值。</p>
<h5 id="单向循环链表"><a href="#单向循环链表" class="headerlink" title="单向循环链表"></a>单向循环链表</h5><p>单链表的一个变形是单向循环链表，链表中最后一个节点的next域不再为None，而是指向链表的头节点。</p>
<h5 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h5><p>每个节点有两个链接：一个指向前一个节点，当此节点为第一个节点时，指向空值；而另一个指向下一个节点，当此节点为最后一个节点时，指向空值。</p>
<h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>有些地方称为堆栈，是一种容器，可存入数据元素、访问元素、删除元素，它的特点在于只能允许在容器的一端进行加入数据和输出数据的运算。没有了位置概念，保证任何时候可以访问、删除的元素都是此前最后存入的那个元素，确定了一种默认的访问顺序。</p>
<h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。<br>队列是一种先进先出的（First In First Out）的线性表，简称FIFO。允许插入的一端为队尾，允许删除的一端为队头。队列不允许在中间部位进行操作！</p>
<h5 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h5><p>双端队列，是一种具有队列和栈的性质的数据结构。<br>双端队列中的元素可以从两端弹出，其限定插入和删除操作在表的两端进行。双端队列可以在队列任意一端入队和出队。</p>
<h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><p>树是一种抽象数据类型，用来模拟树状结构性质的数据集合。它是由n（n>=1）个有限节点组成一个具有层次关系的集合。<br>特点：</p>
<ol>
<li>每个节点有零个或多个子节点；</li>
<li>没有父节点的节点称为根节点；</li>
<li>每一个非根节点有且只有一个父节点；</li>
<li>除了根节点外，每个子节点可以分为多个不相交的子树；</li>
</ol>
<h4 id="树的种类"><a href="#树的种类" class="headerlink" title="树的种类"></a>树的种类</h4><h5 id="无序树"><a href="#无序树" class="headerlink" title="无序树"></a>无序树</h5><p>树中任意节点的 子结点之间没有顺序关系，这种树称为无序树,也称为自由树<br>3个节点的无序树有9种</p>
<h5 id="有序树"><a href="#有序树" class="headerlink" title="有序树"></a>有序树</h5><p>树中任意节点的子节点之间有顺序关系，这种树称为有序树</p>
<ol>
<li>二叉树<ol>
<li>完全二叉树</li>
<li>平衡二叉树</li>
<li>排序二叉树</li>
</ol>
</li>
<li>霍夫曼树 带权路径最短的二叉树称为哈夫曼树或最优二叉树</li>
<li>B树 一种对读写操作进行优化的自平衡的二叉查找树，能够保持数据有序，拥有多余两个子树</li>
</ol>
<h5 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h5><p>二叉树是每个节点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）</p>
<ol>
<li>完全二叉树：比如有n层，第一层到第n-1层都挂满了节点</li>
<li>满二叉树：除了叶节点以外每一层都挂满了节点，且叶节点在最底层</li>
</ol>
<h5 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h5><p>树的两种重要的遍历模式是深度优先遍历和广度优先遍历,深度优先一般用递归，广度优先一般用队列。</p>
<h6 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h6><p>深度优先搜索(Depth First Search)是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。<br>深度优先遍历有三种遍历方法，它们之间的不同在于访问每个节点的次序不同</p>
<ol>
<li>先序遍历–> 我们先访问根节点，然后递归使用先序遍历访问左子树，再递归使用先序遍历访问右子树–> 根节点->左子树->右子树</li>
<li>中序遍历–> 我们递归使用中序遍历访问左子树，然后访问根节点，最后再递归使用中序遍历访问右子树–> 左子树->根节点->右子树</li>
<li>后序遍历–> 们先递归使用后序遍历访问左子树和右子树，最后访问根节点–> 左子树->右子树->根节点</li>
</ol>
<p><a href="%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86.png" class="lazyload"></a><br>结果：<br>先序:a b c d e f g h<br>中序:b d c e a f h g<br>后序:d e c b h g f a</p>
<h6 id="广度优先遍历-层次遍历"><a href="#广度优先遍历-层次遍历" class="headerlink" title="广度优先遍历(层次遍历)"></a>广度优先遍历(层次遍历)</h6><p>从树的root开始，从上到下从从左到右遍历整个树的节点</p>
<h4 id="常见的一些树的应用场景"><a href="#常见的一些树的应用场景" class="headerlink" title="常见的一些树的应用场景"></a>常见的一些树的应用场景</h4><ol>
<li>解析xml,html的时候</li>
<li>mysql数据库索引</li>
<li>文件系统的目录结构</li>
<li>机器学习里面的决策树也是树结构</li>
</ol>
</body></html>]]></content>
  </entry>
  <entry>
    <title>数据库文档生成</title>
    <url>/2018/07/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="django迁移数据库加字段注释"><a href="#django迁移数据库加字段注释" class="headerlink" title="django迁移数据库加字段注释"></a>django迁移数据库加字段注释</h3><p>源码修改：django/db/backends/base/schema.py的column_sql方法最后添加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Return the sql</span></span><br><span class="line"><span class="comment"># 增加针对mysql注释的处理</span></span><br><span class="line"><span class="keyword">if</span> self.connection.client.executable_name == <span class="string">'mysql'</span> <span class="keyword">and</span> field.verbose_name:</span><br><span class="line">    sql += <span class="string">" COMMENT '%s'"</span> % field.verbose_name</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="生成word版"><a href="#生成word版" class="headerlink" title="生成word版"></a>生成word版</h3><blockquote>
<p>pip install Mysql2docx</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Mysql2docx <span class="keyword">import</span> Mysql2docx</span><br><span class="line">m = Mysql2docx()</span><br><span class="line">m.do(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>, <span class="string">'root'</span>,<span class="string">'kcnet_prod'</span>,<span class="number">3306</span>)</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="HTML、Markdown、PDF版"><a href="#HTML、Markdown、PDF版" class="headerlink" title="HTML、Markdown、PDF版"></a>HTML、Markdown、PDF版</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mysql.connector <span class="keyword">as</span> mysql</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">usage</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'help:'</span>)</span><br><span class="line">    print(<span class="string">'--host db server,default localhost'</span>)</span><br><span class="line">    print(<span class="string">'--port db port,default 3306'</span>)</span><br><span class="line">    print(<span class="string">'--user db username,default root'</span>)</span><br><span class="line">    print(<span class="string">'--password db password,default blank'</span>)</span><br><span class="line">    print(<span class="string">'--database db name'</span>)</span><br><span class="line">    print(<span class="string">'--output markdown output file,default current path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opts,args = getopt.getopt(sys.argv[<span class="number">1</span>:],<span class="string">"h"</span>,[<span class="string">"help"</span>,<span class="string">"host="</span>,<span class="string">"port="</span>,<span class="string">"database="</span>,<span class="string">"user="</span>,<span class="string">"password="</span>,<span class="string">"output="</span>])</span><br><span class="line">    <span class="keyword">except</span> getopt.GetoptError:</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'help'</span> <span class="keyword">in</span> args:</span><br><span class="line">        usage()</span><br><span class="line">        sys.exit()</span><br><span class="line">        print(opts)</span><br><span class="line">    host = <span class="string">'localhost'</span></span><br><span class="line">    user = <span class="string">'root'</span></span><br><span class="line">    password = <span class="string">'123456'</span></span><br><span class="line">    database = <span class="string">'gulimall_admin'</span></span><br><span class="line">    port = <span class="number">3307</span></span><br><span class="line">    <span class="comment">#生成的md路径(windows的改成你自己的盘)</span></span><br><span class="line">    output = <span class="string">'/project/ExportTable/markdown.out'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> op,value <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">'--host'</span>:</span><br><span class="line">            host = value</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">'--port'</span>:</span><br><span class="line">            port = value</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">'--database'</span>:</span><br><span class="line">            database = value</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">'--user'</span>:</span><br><span class="line">            user = value</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">'--password'</span>:</span><br><span class="line">            password = value</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">'--output'</span>:</span><br><span class="line">            output = value</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">'-h'</span>:</span><br><span class="line">            usage()</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">if</span> database == <span class="string">''</span>:</span><br><span class="line">            usage()</span><br><span class="line">        <span class="comment">#    sys.exit()</span></span><br><span class="line">    conn = mysql.connect(host=host,port=port,user=user,password=password,database=<span class="string">'information_schema'</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">"select table_name,table_comment from information_schema.tables where table_schema='%s' and table_type='base table'"</span> % database)</span><br><span class="line">    tables = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">    markdown_table_header = <span class="string">"""### %s (%s)</span></span><br><span class="line"><span class="string">字段名 | 字段类型 | 默认值 | 注解</span></span><br><span class="line"><span class="string">---- | ---- | ---- | ---- """</span></span><br><span class="line">    markdown_table_row = <span class="string">"""</span></span><br><span class="line"><span class="string">%s | %s | %s | %s """</span></span><br><span class="line">    f = open(output,<span class="string">'w'</span>)</span><br><span class="line">    <span class="keyword">for</span> table <span class="keyword">in</span> tables:</span><br><span class="line">        cursor.execute(<span class="string">"select COLUMN_NAME,COLUMN_TYPE,COLUMN_DEFAULT,COLUMN_COMMENT from information_schema.COLUMNS where table_schema='%s' and table_name='%s'"</span>% (database,table[<span class="number">0</span>]))</span><br><span class="line">        tmp_table = cursor.fetchall()</span><br><span class="line">        p = markdown_table_header % table;</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> tmp_table:</span><br><span class="line">            p += markdown_table_row % col</span><br><span class="line">        f.writelines(p)</span><br><span class="line">        f.writelines(<span class="string">'\r\n'</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    print(<span class="string">'generate markdown success！'</span>)</span><br></pre></td></tr></tbody></table></figure></div>
<p>找到生成文件，复制文件中的代码，打开<a href="https://maxiang.io/" target="_blank" rel="noopener">马克飞象</a>，新建文件并粘贴。然后选择自己喜欢的格式导出。</p>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>经典排序算法</title>
    <url>/2020/02/15/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>排序算法可以分为内部排序和外部排序。<br>内部排序是数据记录在内存中进行排序。<br>而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。<br>常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。</p>
<p><a href="%E5%A4%8D%E6%9D%82%E5%BA%A6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E5%A4%8D%E6%9D%82%E5%BA%A6.png" class="lazyload"></a></p>
<h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><ol>
<li><p>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</p>
</li>
<li><p>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</p>
</li>
</ol>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h5 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h5><p>从第一个和第二个开始比较，如果第一个比第二个大，则交换位置，然后比较第二个和第三个，逐渐往后，经过第一轮后最大的元素已经排在最后，</p>
<p>所以重复上述操作的话第二大的则会排在倒数第二的位置。，那重复上述操作n-1次即可完成排序，因为最后一次只有一个元素所以不需要比较。</p>
<p><a href="%E5%86%92%E6%B3%A1.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E5%86%92%E6%B3%A1.gif" class="lazyload"></a></p>
<h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">     <span class="comment">#冒泡排序</span></span><br><span class="line">     <span class="comment"># 第一层for表示循环的遍数</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr) - <span class="number">1</span>):</span><br><span class="line">         <span class="comment"># 第二层for表示具体比较哪两个元素</span></span><br><span class="line">         <span class="keyword">for</span> j <span class="keyword">in</span> range(len(arr) - <span class="number">1</span> - i):</span><br><span class="line">             <span class="keyword">if</span> arr[j] > arr[j + <span class="number">1</span>]:</span><br><span class="line">                 <span class="comment"># 如果前面的大于后面的，则交换这两个元素的位置</span></span><br><span class="line">                 arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line">     <span class="keyword">return</span> arr</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h5 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h5><p>设第一个元素为比较元素，依次和后面的元素比较，比较完所有元素找到最小的元素，将它和第一个元素互换，重复上述操作，我们找出第二小的元素和第二个位置的元素互换，以此类推找出剩余最小元素将它换到前面，即完成排序。</p>
<p><a href="%E9%80%89%E6%8B%A9.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E9%80%89%E6%8B%A9.gif" class="lazyload"></a></p>
<h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">     <span class="comment">#选择排序</span></span><br><span class="line">     <span class="comment"># 第一层for表示循环选择的遍数</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr) - <span class="number">1</span>):</span><br><span class="line">         <span class="comment"># 将起始元素设为最小元素</span></span><br><span class="line">         min_index = i</span><br><span class="line">         <span class="comment"># 第二层for表示最小元素和后面的元素逐个比较</span></span><br><span class="line">         <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(arr)):</span><br><span class="line">             <span class="keyword">if</span> arr[j] < arr[min_index]:</span><br><span class="line">                 <span class="comment"># 如果当前元素比最小元素小，则把当前元素角标记为最小元素角标</span></span><br><span class="line">                 min_index = j</span><br><span class="line">         <span class="comment"># 查找一遍后将最小元素与起始元素互换</span></span><br><span class="line">         arr[min_index], arr[i] = arr[i], arr[min_index]</span><br><span class="line">     <span class="keyword">return</span> arr</span><br></pre></td></tr></tbody></table></figure></div>


<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h5 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h5><p>从第二个元素开始和前面的元素进行比较，如果前面的元素比当前元素大，则将前面元素 后移，当前元素依次往前，直到找到比它小或等于它的元素插入在其后面，</p>
<p>然后选择第三个元素，重复上述操作，进行插入，依次选择到最后一个元素，插入后即完成所有排序。</p>
<p><a href="%E6%8F%92%E5%85%A5.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E6%8F%92%E5%85%A5.gif" class="lazyload"></a></p>
<h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">     <span class="comment">#插入排序</span></span><br><span class="line">     <span class="comment"># 第一层for表示循环插入的遍数</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</span><br><span class="line">         <span class="comment"># 设置当前需要插入的元素</span></span><br><span class="line">         current = arr[i]</span><br><span class="line">         <span class="comment"># 与当前元素比较的比较元素</span></span><br><span class="line">         pre_index = i - <span class="number">1</span></span><br><span class="line">         <span class="keyword">while</span> pre_index >= <span class="number">0</span> <span class="keyword">and</span> arr[pre_index] > current:</span><br><span class="line">             <span class="comment"># 当比较元素大于当前元素则把比较元素后移</span></span><br><span class="line">             arr[pre_index + <span class="number">1</span>] = arr[pre_index]</span><br><span class="line">             <span class="comment"># 往前选择下一个比较元素</span></span><br><span class="line">             pre_index -= <span class="number">1</span></span><br><span class="line">         <span class="comment"># 当比较元素小于当前元素，则将当前元素插入在 其后面</span></span><br><span class="line">         arr[pre_index + <span class="number">1</span>] = current</span><br><span class="line">     <span class="keyword">return</span> arr</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><h5 id="算法思想-3"><a href="#算法思想-3" class="headerlink" title="算法思想"></a>算法思想</h5><p>希尔排序的整体思想是将固定间隔的几个元素之间排序，然后再缩小这个间隔。这样到最后数列就成为了基本有序数列。</p>
<p>具体步骤：</p>
<ol>
<li><p>计算一个增量（间隔）值</p>
</li>
<li><p>对元素进行增量元素进行比较，比如增量值为7，那么就对0,7,14,21…个元素进行插入排序</p>
</li>
<li><p>然后对1,8,15…进行排序，依次递增进行排序</p>
</li>
<li><p>所有元素排序完后，缩小增量比如为3，然后又重复上述第2，3步</p>
</li>
<li><p>最后缩小增量至1时，数列已经基本有序，最后一遍普通插入即可</p>
</li>
</ol>
<p><a href="%E5%B8%8C%E5%B0%94.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E5%B8%8C%E5%B0%94.gif" class="lazyload"></a></p>
<h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">     <span class="comment">#希尔排序</span></span><br><span class="line">     <span class="comment"># 取整计算增量（间隔）值</span></span><br><span class="line">     gap = len(arr) // <span class="number">2</span></span><br><span class="line">     <span class="keyword">while</span> gap > <span class="number">0</span>:</span><br><span class="line">         <span class="comment"># 从增量值开始遍历比较</span></span><br><span class="line">         <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, len(arr)):</span><br><span class="line">             j = i</span><br><span class="line">             current = arr[i]</span><br><span class="line">             <span class="comment"># 元素与他同列的前面的每个元素比较，如果比前面的小则互换</span></span><br><span class="line">             <span class="keyword">while</span> j - gap >= <span class="number">0</span> <span class="keyword">and</span> current < arr[j - gap]:</span><br><span class="line">                 arr[j] = arr[j - gap]</span><br><span class="line">                 j -= gap</span><br><span class="line">             arr[j] = current</span><br><span class="line">         <span class="comment"># 缩小增量（间隔）值</span></span><br><span class="line">         gap //= <span class="number">2</span></span><br><span class="line">     <span class="keyword">return</span> arr</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h5 id="算法思想-4"><a href="#算法思想-4" class="headerlink" title="算法思想"></a>算法思想</h5><p>归并排序是分治法的典型应用。分治法（Divide-and-Conquer）：将原问题划分成 n 个规模较小而结构与原问题相似的子问题；递归地解决这些问题，然后再合并其结果，就得到原问题的解，分解后的数列很像一个二叉树。</p>
<p>具体实现步骤：</p>
<ol>
<li><p>使用递归将源数列使用二分法分成多个子列</p>
</li>
<li><p>申请空间将两个子列排序合并然后返回</p>
</li>
<li><p>将所有子列一步一步合并最后完成排序</p>
</li>
<li><p>注：先分解再归并</p>
</li>
</ol>
<p><a href="%E5%BD%92%E5%B9%B6.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E5%BD%92%E5%B9%B6.gif" class="lazyload"></a></p>
<h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">     <span class="comment">#归并排序</span></span><br><span class="line">     <span class="keyword">if</span> len(arr) == <span class="number">1</span>:</span><br><span class="line">         <span class="keyword">return</span> arr</span><br><span class="line">     <span class="comment"># 使用二分法将数列分两个</span></span><br><span class="line">     mid = len(arr) // <span class="number">2</span></span><br><span class="line">     left = arr[:mid]</span><br><span class="line">     right = arr[mid:]</span><br><span class="line">     <span class="comment"># 使用递归运算</span></span><br><span class="line">     <span class="keyword">return</span> marge(merge_sort(left), merge_sort(right))</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">marge</span><span class="params">(left, right)</span>:</span></span><br><span class="line">     <span class="comment">#排序合并两个数列</span></span><br><span class="line">     result = []</span><br><span class="line">     <span class="comment"># 两个数列都有值</span></span><br><span class="line">     <span class="keyword">while</span> len(left) > <span class="number">0</span> <span class="keyword">and</span> len(right) > <span class="number">0</span>:</span><br><span class="line">         <span class="comment"># 左右两个数列第一个最小放前面</span></span><br><span class="line">         <span class="keyword">if</span> left[<span class="number">0</span>] <= right[<span class="number">0</span>]:</span><br><span class="line">             result.append(left.pop(<span class="number">0</span>))</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             result.append(right.pop(<span class="number">0</span>))</span><br><span class="line">     <span class="comment"># 只有一个数列中还有值，直接添加</span></span><br><span class="line">     result += left</span><br><span class="line">     result += right</span><br><span class="line">     <span class="keyword">return</span> result</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h5 id="算法思想-5"><a href="#算法思想-5" class="headerlink" title="算法思想"></a>算法思想</h5><p>找出基线条件，这种条件必须尽可能简单，不断将问题分解（或者说缩小规模），直到符合基线条件。、</p>
<p><a href="%E5%BF%AB%E9%80%9F.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E5%BF%AB%E9%80%9F.gif" class="lazyload"></a></p>
<h5 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">   <span class="keyword">if</span> len(arr) < <span class="number">2</span>:</span><br><span class="line">     <span class="comment"># 基线条件：为空或只包含一个元素的数组是“有序”的</span></span><br><span class="line">     <span class="keyword">return</span> arr</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">     <span class="comment"># 递归条件</span></span><br><span class="line">     pivot = arr[<span class="number">0</span>]</span><br><span class="line">     <span class="comment"># 由所有小于基准值的元素组成的子数组</span></span><br><span class="line">     less = [i <span class="keyword">for</span> i <span class="keyword">in</span> arr[<span class="number">1</span>:] <span class="keyword">if</span> i <= pivot]</span><br><span class="line">     <span class="comment"># 由所有大于基准值的元素组成的子数组</span></span><br><span class="line">     greater = [i <span class="keyword">for</span> i <span class="keyword">in</span> array[<span class="number">1</span>:] <span class="keyword">if</span> i > pivot]</span><br><span class="line">     <span class="keyword">return</span> quicksort(less) + [pivot] + quicksort(greater)</span><br><span class="line"></span><br><span class="line"> print(quick_sort([<span class="number">10</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h5 id="算法思想-6"><a href="#算法思想-6" class="headerlink" title="算法思想"></a>算法思想</h5><p>堆分为最大堆和最小堆，是完全二叉树。堆排序就是把堆顶的最大数取出，将剩余的堆继续调整为最大堆,具体过程在第二块有介绍，以递归实现 ，</p>
<p>剩余部分调整为最大堆后,再次将堆顶的最大数取出，再将剩余部分调整为最大堆,这个过程持续到剩余数只有一个时结束。</p>
<p><a href="%E5%A0%86.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E5%A0%86.gif" class="lazyload"></a></p>
<h5 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time,random</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">sift_down</span><span class="params">(arr, node, end)</span>:</span></span><br><span class="line">     root = node</span><br><span class="line">     <span class="comment">#print(root,2*root+1,end)</span></span><br><span class="line">     <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">         <span class="comment"># 从root开始对最大堆调整</span></span><br><span class="line">         child = <span class="number">2</span> * root +<span class="number">1</span>  <span class="comment">#left child</span></span><br><span class="line">         <span class="keyword">if</span> child  > end:</span><br><span class="line">             <span class="comment">#print('break',)</span></span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line">         print(<span class="string">"v:"</span>,root,arr[root],child,arr[child])</span><br><span class="line">         print(arr)</span><br><span class="line">         <span class="comment"># 找出两个child中交大的一个</span></span><br><span class="line">         <span class="keyword">if</span> child + <span class="number">1</span> <= end <span class="keyword">and</span> arr[child] < arr[child + <span class="number">1</span>]: <span class="comment">#如果左边小于右边</span></span><br><span class="line">             child += <span class="number">1</span> <span class="comment">#设置右边为大</span></span><br><span class="line">         <span class="keyword">if</span> arr[root] < arr[child]:</span><br><span class="line">             <span class="comment"># 最大堆小于较大的child, 交换顺序</span></span><br><span class="line">             tmp = arr[root]</span><br><span class="line">             arr[root] = arr[child]</span><br><span class="line">             arr[child]= tmp</span><br><span class="line">             <span class="comment"># 正在调整的节点设置为root</span></span><br><span class="line">             <span class="comment">#print("less1:", arr[root],arr[child],root,child)</span></span><br><span class="line">             root = child <span class="comment">#</span></span><br><span class="line">             <span class="comment">#[3, 4, 7, 8, 9, 11, 13, 15, 16, 21, 22, 29]</span></span><br><span class="line">             <span class="comment">#print("less2:", arr[root],arr[child],root,child)</span></span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             <span class="comment"># 无需调整的时候, 退出</span></span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line">     <span class="comment">#print(arr)</span></span><br><span class="line">     print(<span class="string">'-------------'</span>)</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">     <span class="comment"># 从最后一个有子节点的孩子还是调整最大堆</span></span><br><span class="line">     first = len(arr) // <span class="number">2</span> <span class="number">-1</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(first, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">         sift_down(arr, i, len(arr) - <span class="number">1</span>)</span><br><span class="line">     <span class="comment">#[29, 22, 16, 9, 15, 21, 3, 13, 8, 7, 4, 11]</span></span><br><span class="line">     print(<span class="string">'--------end---'</span>,arr)</span><br><span class="line">     <span class="comment"># 将最大的放到堆的最后一个, 堆-1, 继续调整排序</span></span><br><span class="line">     <span class="keyword">for</span> end <span class="keyword">in</span> range(len(arr) <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">         arr[<span class="number">0</span>], arr[end] = arr[end], arr[<span class="number">0</span>]</span><br><span class="line">         sift_down(arr, <span class="number">0</span>, end - <span class="number">1</span>)</span><br><span class="line">         <span class="comment">#print(arr)</span></span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><h5 id="算法思想-7"><a href="#算法思想-7" class="headerlink" title="算法思想"></a>算法思想</h5><p>对每一个输入元素x，确定小于x的元素个数。利用这一信息，就可以直接把x 放在它在输出数组上的位置上了，运行时间为O(n)，但其需要的空间不一定，空间浪费大。</p>
<p><a href="%E8%AE%A1%E6%95%B0.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E8%AE%A1%E6%95%B0.gif" class="lazyload"></a></p>
<h5 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> randint</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">Conuting_Sort</span><span class="params">(A)</span>:</span></span><br><span class="line">     k = max(A)          <span class="comment"># A的最大值，用于确定C的长度</span></span><br><span class="line">     C = [<span class="number">0</span>]*(k+<span class="number">1</span>)       <span class="comment"># 通过下表索引，临时存放A的数据</span></span><br><span class="line">     B = (len(A))*[<span class="number">0</span>]    <span class="comment"># 存放A排序完成后的数组</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(A)):</span><br><span class="line">         C[A[i]] += <span class="number">1</span>    <span class="comment"># 记录A有哪些数字，值为A[i]的共有几个</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k+<span class="number">1</span>):</span><br><span class="line">         C[i] += C[i<span class="number">-1</span>]  <span class="comment"># A中小于i的数字个数为C[i]</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">         B[C[A[i]]<span class="number">-1</span>] = A[i] <span class="comment"># C[A[i]]的值即为A[i]的值在A中的次序</span></span><br><span class="line">         C[A[i]] -= <span class="number">1</span>    <span class="comment"># 每插入一个A[i]，则C[A[i]]减一</span></span><br><span class="line">     <span class="keyword">return</span> B</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><h5 id="算法思想-8"><a href="#算法思想-8" class="headerlink" title="算法思想"></a>算法思想</h5><p>为了节省空间和时间，我们需要指定要排序的数据中最小以及最大的数字的值，来方便桶排序算法的运算。</p>
<p><a href="%E6%A1%B6.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E6%A1%B6.gif" class="lazyload"></a></p>
<h5 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#桶排序</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">bucket_sort</span><span class="params">(the_list)</span>:</span></span><br><span class="line">     <span class="comment">#设置全为0的数组</span></span><br><span class="line">     all_list = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line">     last_list = []</span><br><span class="line">     <span class="keyword">for</span> v <span class="keyword">in</span> the_list:</span><br><span class="line">         all_list[v] = <span class="number">1</span> <span class="keyword">if</span> all_list[v]==<span class="number">0</span> <span class="keyword">else</span> all_list[v]+<span class="number">1</span></span><br><span class="line">     <span class="keyword">for</span> i,t_v <span class="keyword">in</span> enumerate(all_list):</span><br><span class="line">         <span class="keyword">if</span> t_v != <span class="number">0</span>:</span><br><span class="line">             <span class="keyword">for</span> j <span class="keyword">in</span> range(t_v):</span><br><span class="line">                 last_list.append(i)</span><br><span class="line">     <span class="keyword">return</span> last_list</span><br></pre></td></tr></tbody></table></figure></div>

<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><h5 id="算法思想-9"><a href="#算法思想-9" class="headerlink" title="算法思想"></a>算法思想</h5><p>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。</p>
<p><a href="%E5%9F%BA%E6%95%B0.gif" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="%E5%9F%BA%E6%95%B0.gif" class="lazyload"></a></p>
<h5 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h5><p>由桶排序改造，从最低位到最高位依次桶排序，最后输出最后排好的列表。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RadixSort</span><span class="params">(list,d)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(d):<span class="comment">#d轮排序</span></span><br><span class="line">        <span class="comment"># 每一轮生成10个列表</span></span><br><span class="line">        s=[[] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]<span class="comment">#因为每一位数字都是0~9，故建立10个桶</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">            <span class="comment"># 按第k位放入到桶中</span></span><br><span class="line">            s[i//(<span class="number">10</span>**k)%<span class="number">10</span>].append(i)</span><br><span class="line">        <span class="comment"># 按当前桶的顺序重排列表</span></span><br><span class="line">        list=[j <span class="keyword">for</span> i <span class="keyword">in</span> s <span class="keyword">for</span> j <span class="keyword">in</span> i]</span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>算法</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>鸭子类型</title>
    <url>/2018/04/01/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="什么是鸭子类型"><a href="#什么是鸭子类型" class="headerlink" title="什么是鸭子类型"></a>什么是鸭子类型</h3><blockquote>
<p>当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就是鸭子。</p>
</blockquote>
<p>关注点在对象包含哪些方法，而不是类型(duck typing)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quack</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"gua gua"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quack</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"我是人类，我也会gua gua"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_the_forest</span><span class="params">(duck)</span>:</span></span><br><span class="line">    duck.quack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game</span><span class="params">()</span>:</span></span><br><span class="line">    Trump = Person()</span><br><span class="line">    Donald = Duck()</span><br><span class="line">    in_the_forest(Trump)</span><br><span class="line">    in_the_forest(Donald)</span><br><span class="line"></span><br><span class="line">game()</span><br></pre></td></tr></tbody></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">我是人类，我也会gua gua</span><br><span class="line">gua gua</span><br></pre></td></tr></tbody></table></figure></div>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>408计算机网络-计算机网络体系</title>
    <url>/2021/03/28/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><p>是一个将分散的、具有独立功能的计算机系统，通过通信设备和线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。</p>
<p>计算机网络是互连得、自治的计算机集合</p>
<ol>
<li>互连-通过通信链路互联互通</li>
<li>自治-无主从关系</li>
</ol>
<p>计算机网络的功能</p>
<ol>
<li>数据通信</li>
<li>资源共享</li>
<li>分布式处理</li>
<li>提高可靠性</li>
<li>负载均衡</li>
</ol>
<h3 id="计算机网络的发展"><a href="#计算机网络的发展" class="headerlink" title="计算机网络的发展"></a>计算机网络的发展</h3><h4 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h4><p>ARPAnet 阿帕网 –> internet(interconnected netword)互联网 –> Internet因特网</p>
<ol>
<li>网络把许多的计算机连接在一起</li>
<li>互联网把许多的网络连接在一起</li>
<li>因特网是世界上最大的互联网</li>
</ol>
<h4 id="第二阶段-三级结构"><a href="#第二阶段-三级结构" class="headerlink" title="第二阶段-三级结构"></a>第二阶段-三级结构</h4><h4 id="第三阶段-多层次ISP结构"><a href="#第三阶段-多层次ISP结构" class="headerlink" title="第三阶段-多层次ISP结构"></a>第三阶段-多层次ISP结构</h4><h3 id="计算机网络的组成"><a href="#计算机网络的组成" class="headerlink" title="计算机网络的组成"></a>计算机网络的组成</h3><p>组成部分：硬件、软件、协议（一系列规则和约定的集合）</p>
<p>工作方式</p>
<ol>
<li>边缘部分</li>
<li>核心部分</li>
</ol>
<p>功能组成<br>数据通信和资源共享</p>
<ol>
<li>通信子网：实现数据通信</li>
<li>资源子网：实现资源共享/数据处理</li>
</ol>
<h3 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h3><p>按范围分布</p>
<ol>
<li>广域网WAN–> 交换技术</li>
<li>城域网MAN</li>
<li>局域网LAN–> 广播技术</li>
<li>个人区域网PAN</li>
</ol>
<p>按使用者分</p>
<ol>
<li>公用网</li>
<li>专用网</li>
</ol>
<p>按交换技术分</p>
<ol>
<li>电路交换</li>
<li>报文交换</li>
<li>分组交换</li>
</ol>
<p>按拓扑结构分</p>
<ol>
<li>总线型</li>
<li>星型</li>
<li>环型</li>
<li>网状型 – 常用于广域网</li>
</ol>
<p>按传输技术分</p>
<ol>
<li>广播式网络–共享公共通信信道</li>
<li>点对点网络–使用分组存储转发和路由选择机制</li>
</ol>
<h3 id="计算机网络的标准化工作"><a href="#计算机网络的标准化工作" class="headerlink" title="计算机网络的标准化工作"></a>计算机网络的标准化工作</h3><p>标准的分类</p>
<ol>
<li>法定标准：osi</li>
<li>事实标准: tcp/ip</li>
</ol>
<h3 id="标准化工作的相关组织"><a href="#标准化工作的相关组织" class="headerlink" title="标准化工作的相关组织"></a>标准化工作的相关组织</h3><p>国际标准化组织ISO–制定了OSI参考模型、HDLC协议<br>国际电信联盟ITU–制定通信规则<br>国际电气电子工程师协会IEEE–学术机构、IEEE802系列标准、5G<br>internet工程任务组IETF–负责因特网相关标准的制定</p>
<h3 id="计算机网络性能指标"><a href="#计算机网络性能指标" class="headerlink" title="计算机网络性能指标"></a>计算机网络性能指标</h3><h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><p>即数据率或者称数据传输率或比特率</p>
<h4 id="比特"><a href="#比特" class="headerlink" title="比特"></a>比特</h4><p>表现形式:1/0 单位:位</p>
<p>连接在计算机网络上的主机在数字信道上传送数据位数的速率单位是b/s, kb/s, Mb/s, Gb/s, Tb/s</p>
<h4 id="存储容量"><a href="#存储容量" class="headerlink" title="存储容量"></a>存储容量</h4><p>1Byte(字节)=8bit(比特)</p>
<h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><p>计算机网络中，带宽用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的“最高数据率”。单位是b/s, kb/s, Mb/s, Gb/s, Tb/s</p>
<h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>表示在单位时间内通过某个网络(或信道、接口)的数据量。单位是b/s, kb/s, Mb/s等<br>吞吐量受网络的带宽限制</p>
<h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><p>指数据从网络的一端传送到另一端所需的时间。也叫延迟，单位是s</p>
<ol>
<li>发送时延：从发送分组的第一个比特算起，到该分组的最后一个比特发送完毕所需的时间。发送时延=数据长度/信道带宽</li>
<li>传播时延：取决于电磁波传播速度和链路长度。传播时延=信道长度/电磁波在信道上的传播速率</li>
<li>排队时延</li>
<li>处理时延</li>
</ol>
<p>时延带宽积<br>时延带宽积=传播时延*带宽<br>以比特位单位的链路长度，即“某段链路现在有多少比特”</p>
<h4 id="往返使用RTT"><a href="#往返使用RTT" class="headerlink" title="往返使用RTT"></a>往返使用RTT</h4><p>从发送方发送数据开始，到发送方收到接收方的确认，总共经历的时延。<br>RTT越大，在收到确认之前，可以发送的数据越多。<br><br>RTT包括</p>
<ol>
<li>往返传播时延=传播时延*2</li>
<li>末端处理时间</li>
</ol>
<p>利用率</p>
<ol>
<li>信道利用率：有数据通过的时间/（有+无）数据通过时间</li>
<li>网络利用率：信道利用率加权平均值</li>
</ol>
<h3 id="综合概念"><a href="#综合概念" class="headerlink" title="综合概念"></a>综合概念</h3><ol>
<li>网络体系结构是从功能上描述计算机网络结构<br></li>
<li>计算机网络体系结构简称网络体系结构是分层结构<br></li>
<li>每层遵循某个网络以完成本层功能<br></li>
<li>计算机网络体系结构是计算机网络的各层及其协议的集合<br></li>
<li>第N层在向N+1层提供服务时，此服务不仅包含第N层本身的功能，还包含由下层服务提供的功能<br></li>
<li>仅仅在相邻层有接口，且所提供的服务的具体实现细节对上一层完全屏蔽<br></li>
<li>体系结构是抽象的，而实现是指能运行的一些软件和硬件<br></li>
</ol>
<p>协议与服务有何区别？</p>
<ol>
<li>协议是水平的，即协议是控制两个对等实体之间通信的规则。服务是垂直的。即服务室由下层通过层间接口向上层提供。</li>
<li></li>
</ol>
</body></html>]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>408计算机网络-物理层</title>
    <url>/2021/03/28/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%89%A9%E7%90%86%E5%B1%82/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h2 id="通信基础"><a href="#通信基础" class="headerlink" title="通信基础"></a>通信基础</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>物理层解决如何<font color="Red"><strong>在各种计算机的传输媒体上传输数据比特流</strong></font>，而不是指<font color="Red"><strong>具体的传输媒体</strong></font>。</p>
<p>物理层主要任务：确定与传输媒体接口有关的一些特性——>定义标准</p>
<ol>
<li>机械特性。定义物理连接的特性，规定物理连接时采用的规格，接口形状，引线数目，引脚数量和排列情况。</li>
<li>电气特性。规定传输二进制位时，线路上信号的电压范围、阻抗匹配、传输速率和距离限制等。</li>
<li>功能特性。指明某条线上出现的某一电平表示何种意义，接口部件的信号线用途。</li>
<li>规程特性。定义各条物理线路的工作规程和时序关系。</li>
</ol>
<h4 id="数据通信相关术语"><a href="#数据通信相关术语" class="headerlink" title="数据通信相关术语"></a>数据通信相关术语</h4><ol>
<li>数据data：传送信息的实体，通常是有意义的符号序列。数据通信指在不同计算机之间传输表示信息的二进制数0、1序列的过程。</li>
<li>信号：数据的电气/电磁的表现，是数据在传输过程中的存在形式。<ol>
<li>数字信号/离散信号：代表消息的参数的取值是离散的。</li>
<li>模拟信号/连续信号：代表消息的参数的取值是连续的。</li>
</ol>
</li>
<li>信源：产生和发送数据的源头。</li>
<li>信宿：接受数据的终点。</li>
<li>信道：信号的传输媒介。<ol>
<li>按传输信号分：模拟信道(传送模拟信号) 数字信号(传送数字信号)</li>
<li>按传输介质分：无线信道 有线信道</li>
</ol>
</li>
</ol>
<h4 id="三种通信方式"><a href="#三种通信方式" class="headerlink" title="三种通信方式"></a>三种通信方式</h4><ol>
<li>单工</li>
<li>半双工</li>
<li>全双工</li>
</ol>
<h4 id="数据传输方式"><a href="#数据传输方式" class="headerlink" title="数据传输方式"></a>数据传输方式</h4><ol>
<li>串行传输–将表示一个字符的8位二进制数按由低位到高位的顺序依次发送</li>
<li>并行传输–将一个字符的8位二进制数同时通过8条信道发送</li>
</ol>
<h4 id="同步传输-amp-异步传输"><a href="#同步传输-amp-异步传输" class="headerlink" title="同步传输&异步传输"></a>同步传输&异步传输</h4><ol>
<li>同步传输–> 在同步传输的模式下，数据的传送是以一个数据区块为单位，因此同步传输又称为区块传输。在传输数据时，需先送出一个或者多个同步字符，再送出整批的数据。</li>
<li>异步传输</li>
</ol>
<h4 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h4><p>是指用一个固定时长的信号波形（数字脉冲）。是数字信号中数字信号的计量单位。当码元的离散状态由M个时，此时码元为M进制码元。1码元可以携带多个比特的信息量。<br>K进制码元—4进制码元——>码元的离散状态由4个——>4种高低不同的信号波形 00、01、10、11</p>
<h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><p>也叫数据率，指数据的传输速率。可以用码元传输速率和信息传输速率表示。</p>
<ol>
<li>码元传输速率：表示单位时间内数字通信系统所传输的码元个数</li>
</ol>
<h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><ol>
<li>在模拟信号系统中，高频与低频之间的差值就是系统的通频带宽，单位是HZ</li>
<li>在数字设备中，表示单位时间内从网络的某一点到另一点所能通过的最高数据率 / 单位时间内通过链路的数量，单位是比特每秒 </li>
</ol>
<h3 id="两个公式（只有在这两个公式这带宽才用HZ）"><a href="#两个公式（只有在这两个公式这带宽才用HZ）" class="headerlink" title="两个公式（只有在这两个公式这带宽才用HZ）"></a>两个公式（只有在这两个公式这带宽才用HZ）</h3><h4 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h4><p>影响失真程度的因素：</p>
<ol>
<li>码元传输速率</li>
<li>信号传输距离</li>
<li>噪声干扰</li>
<li>传输媒体质量</li>
</ol>
<p>失真的一种现象–码间串扰<br><br>接收端接收到的信号波形失去了码元之间清晰界限的现象</p>
<h4 id="奈氏准则（奈奎斯特定理）"><a href="#奈氏准则（奈奎斯特定理）" class="headerlink" title="奈氏准则（奈奎斯特定理）"></a>奈氏准则（奈奎斯特定理）</h4><p>在理想低通（无噪声，带宽受限）条件下，为了避免码间串扰。极限码元传输速率为2WBaud，W是信道带宽，单位是HZ。<br><br>奈氏准则求极限数据率，理想低通信道下的极限数据传速率=2Wlog2V</p>
<p>根据奈氏准则得出结论：</p>
<ol>
<li>在任何信道中，码元传输的速率是有上限的。若传输速率超过此上限。就会出现严重的码间串扰问题，是接收端对码元的完全正确识别成为不可能。</li>
<li>信道的频带越宽，就可以用更高的速率进行码元的有效传输</li>
<li>奈氏准则给出了码元传输速率的限制，但并没有对信息传输速率给出限制</li>
<li>由于码元的传输速率受奈氏准则的制约，所以要提高数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量。这就需要采用多元制的调制方法。</li>
</ol>
<h4 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h4><p>在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。<br><br>如果题目中给出的信噪比带有单位dB，则需要先求S/N：<br><br>信噪比(dB) = 10log10(S/N) <br><br>信道的极限数据传输速率=Wlog2(1+S/N)<br></p>
<p>根据香农定理得出结论:</p>
<ol>
<li>信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高</li>
<li>对一定的传输带宽和一定的信噪比，信息传输速率的上限就确定了</li>
<li>只要信息的传输速率低于信道的极限传输速率，就一定能找到某种方法来实现无差错的传输</li>
<li>香农定理得出的为极限信息传输速率，实际信道能达到的传输速率要比它低不少</li>
</ol>
<h3 id="数据交换方式"><a href="#数据交换方式" class="headerlink" title="数据交换方式"></a>数据交换方式</h3><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><p>电路交换原理：在数据传输期间，源节点与目的节点之间有一条由中间节点构成的专用物理连接线路，在数据传输结束之前，这条线路一直保持<br><br>电路交换的阶段：建立连接(呼叫/电路建立) –> 通信(数据传输) –> 释放连接(拆除电路)<br><br>特点: 独占资源。适用于远程批处理信息传输或系统间实时性要求高的大量数据传输的情况。<br></p>
<h4 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h4><p>报文: 是网络中交换与传输的数据单元，即站点一次性要送的数据块。<br><br>报文交换的原理: 无需在两个站点之间建立一条专用通路，其数据传输的单位是报文，传送过程采用存储转发的方式。<br></p>
<h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><p>分组: 大多数计算机网络都不能连续地传送任意长的数据，所以实际上网络系统把数据分割成小块，然后逐块地发送，这种小块称作分组(packet)<br><br>分组交换原理: 分组交换与报文交换工作方式相同，都采用存储转发。形式上差别，分组交换网中要限制所传输的数据单位的长度，一般选128B。<br></p>
<ol>
<li>数据报方式<ol>
<li>数据报方式为网络层提供无连接服务。发送方可随时发送分组，网络中的节点可随时接收分组。(无连接服务: 不事先为分组的传输确定传输路径，每个分组独立确定传输路径)</li>
<li>同一报文的不同分组达到目的结点时可能发生乱序、重复与丢失。</li>
<li>每个分组在传输过程中都必须携带源地址和目的地址，以及分组号</li>
<li>分组在交换结点存储转发时，需要排队等候处理，这会带来一定的时延。当通过交换结点的通信量较大或网络发送拥塞时，这种时延会大大增加，交换结点还可能根绝情况丢弃部分分组。</li>
<li>网络具有冗余路径，当某一交换结点或一段链路出现故障时，可相应地更新转发表，寻找另一条路径转发分组，对故障的适应能力强，适用于突发性通信，不适于长报文，会话式通信。</li>
</ol>
</li>
<li>虚电路方式<br>虚电路将数据报方式和电路交换方式结合。<br>一条源主机到目的主机类似于电路的路径(逻辑连接)，路径上所有结点都要维持这条虚电路的建立，都维持一张虚电路表。<ol>
<li>虚电路方式为网络层提供连接服务。源节点和目的结点之间建立一条逻辑连接，而非实际物理连接。(连接服务: 首先为分组的传输确定传输路径，然后沿该路径传输系列分组，传输结束后拆除连接)</li>
<li>一次通信的所有分组都通过虚电路顺序传送，分组不需要携带源地址<br>目的地址等信息，同一报文的不同分组到达目的结点时不会乱序、重复和丢失。</li>
<li>分组通过虚电路上的每个节点时，节点只进行差错检测，不需要路由选择。</li>
<li>每个节点可能与多个节点之间建立虚电路，每条虚电路支持特定两个端系统间的数据传输，可以对两个数据端点的流量进行控制。两个端系统之间也可以有多条虚电路为不同的进程服务。</li>
<li>致命弱点: 当网络中的某个节点或者某条链路出故障而彻底失效时，则所有经过该节点或者该链路的虚电路将遭到破坏</li>
</ol>
</li>
</ol>
<h2 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h2><ol>
<li>基带信号–> 将数字信号1和0直接用两种不同的电压表示，再送到数字信道上去传输(基带传输)</li>
<li>宽带信号–> 将基带信号进行调制后形成的频分复用模拟信号，再传送到模拟信道上去传输(宽带传输)</li>
</ol>
<p>再传输距离较近时，计算机网络采用基带传输方式。在距离较远时，计算机网络采用宽带传输方式。</p>
<p>数字数据–（数字发送器）-> 数字信号 编码<br><br>数字数据–（调制器）-> 模拟信号 调制<br></p>
<p>模拟数据–（PCM编码器）-> 数字信号 编码<br><br>模拟数据–（放大器调制器）-> 模拟信号 调制<br></p>
<p>数字数据编码为数字信号</p>
<ol>
<li>非归零编码(NRZ)</li>
<li>曼彻斯特编码–> 一个码元中信号变化2次</li>
<li>差分曼彻斯特编码</li>
<li>归零编码(RZ)</li>
<li>反向不归零编码(NRZI)</li>
<li>4B/5B编码</li>
</ol>
<p>数字数据调制为模拟信号</p>
<p>模拟数据编码为数字信号</p>
<h2 id="传输介质-amp-设备"><a href="#传输介质-amp-设备" class="headerlink" title="传输介质&设备"></a>传输介质&设备</h2><h3 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h3><h4 id="导向传输介质"><a href="#导向传输介质" class="headerlink" title="导向传输介质"></a>导向传输介质</h4><p>电磁被导向沿着固体媒介(铜线/光纤)传播。<br></p>
<ol>
<li><p>双绞线。最古老，最常用的传输介质，由两根采用一定规则并排绞合的、相互绝缘的铜导线组成。</p>
<ol>
<li>屏蔽双绞线(STP)</li>
<li>非屏蔽双绞线(UTP)</li>
</ol>
</li>
<li><p>同轴电缆</p>
<ol>
<li>基带同轴电缆，传送基带数字信号</li>
<li>宽带同轴电缆，传送宽带信号</li>
</ol>
</li>
<li><p>光纤</p>
<ol>
<li><p>多模光纤<br> 定义：有多种传输光信号模式的光纤<br> 光源：发光二极管<br> 易失真，适合近距离传输</p>
</li>
<li><p>单模光纤<br> 定义：一种在横向模式直接传输光信号的光纤<br> 光源: 定向性很好的激光二极管<br> 特点: 衰耗小，适合远距离传输</p>
<p>光纤的特点：<br></p>
</li>
<li><p>传输损耗小</p>
</li>
<li><p>抗雷电和电磁干扰性能好</p>
</li>
<li><p>保密性好，不易被窃听和截取数据</p>
</li>
<li><p>体积小、重量轻</p>
</li>
</ol>
</li>
</ol>
<h4 id="非导向传输介质"><a href="#非导向传输介质" class="headerlink" title="非导向传输介质"></a>非导向传输介质</h4><p>自由空间，介质可以是空气、真空、海水等。</p>
<ol>
<li><p>无线电波: 信号向所有方向传播。较强穿透能力，可传远距离，广泛用于通信领域。</p>
</li>
<li><p>微波: 信号固定方向传播。微波通信频率较高、频段范围宽，因此数据率很高。</p>
<ol>
<li>地面微波接力通信</li>
<li>卫星通信</li>
</ol>
</li>
<li><p>红外线、激光: 信号固定方向传播。把要传输的信号分别转换为各自的信号格式，即红外光信号和激光信号，再在空气中传播。</p>
</li>
</ol>
<h3 id="物理层设备"><a href="#物理层设备" class="headerlink" title="物理层设备"></a>物理层设备</h3><h4 id="中继器"><a href="#中继器" class="headerlink" title="中继器"></a>中继器</h4><p>诞生原因: 由于存在损耗，在线路上传输的信号功率会逐渐衰减，衰减到一定程度失真，因此会导致接收错误。<br><br>中继器的功能：对信号进行再生和还原，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度。<br><br>中继器的两端：</p>
<ol>
<li>两端的网络部分是网段，而不是子网，适用于完全相同的两类网络互连。</li>
<li>两端可连接相同媒体，也可以连接不同媒体。</li>
<li>中继器两端的网段一定要是同一个协议，中继器不会存储转发。</li>
</ol>
<h4 id="集线器-多口中继器"><a href="#集线器-多口中继器" class="headerlink" title="集线器(多口中继器)"></a>集线器(多口中继器)</h4><p>集线器的功能：对信号进行再生放大转发，对衰减信号放大，接着转发到其他所有处于工作状态的端口上，以增加信号传输的距离，延长网络的长度。不具备信号的定向传送能力，是一个共享式设备。</p>
<ol>
<li>集线器不能分割冲突域</li>
<li>连在集线器上的工作主机平分带宽</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>进程线程协程</title>
    <url>/2020/10/24/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>操作系统提供的抽象概念，是系统进行资源分配和调度的基本单位。也可以说是实体，程序的实体。程序本身是没有生命周期的，它只是存在磁盘上的一些指令,程序一旦运行就是进程。</p>
<ol>
<li>每一个进程都有自己的地址空间，一般情况下，包括文本区域、数据区域和堆栈。文本区域存储代码、数据区域分配内存、堆栈区域存储调用的指令和本地变量。</li>
<li>进程是一个“执行中的程序”。</li>
</ol>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>轻量级进程，是程序执行流的最小单元。是程序的实际执行者。</p>
<ol>
<li>线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。</li>
<li>一个进程里面有多个线程</li>
<li>每一个程序都至少有一个线程，若程序只有一个线程，那就是程序本身。</li>
<li>线程拥有自己的栈空间。</li>
</ol>
<p>线程也有就绪、阻塞和运行三种基本状态。</p>
<ol>
<li>就绪状态是指线程具备运行的所有条件，逻辑上可以运行，在等待处理机；</li>
<li>运行状态是指线程占有处理机正在运行；</li>
<li>阻塞状态是指线程在等待一个事件（如某个信号量），逻辑上不可执行。</li>
</ol>
<h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>需要讲回线程<br>线程有两种类型</p>
<ol>
<li>一种是由内核来管理和调度。</li>
<li>另外一种线程，他的调度是由程序员自己写程序来管理的，对内核来说不可见。这种线程叫做『用户空间线程』。</li>
</ol>
<p>协程可以理解就是一种用户空间线程。</p>
<ol>
<li>协同，因为是由程序员自己写的调度策略，其通过协作而不是抢占来进行切换</li>
<li>在用户态完成创建，切换和销毁</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>django从请求到响应的过程</title>
    <url>/2020/01/23/django%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E5%93%8D%E5%BA%94%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h4 id="Django请求生命周期的概念"><a href="#Django请求生命周期的概念" class="headerlink" title="Django请求生命周期的概念"></a>Django请求生命周期的概念</h4><p>从用户输入URL到用户看到网页的整个过程</p>
<h5 id="请求过程描述"><a href="#请求过程描述" class="headerlink" title="请求过程描述"></a>请求过程描述</h5><ol>
<li>用户输入网址，浏览器发起请求。</li>
<li>WSGI（服务器网关接口）创建socket服务端，接受请求。</li>
<li>中间件处理请求。</li>
<li>url路由，根据当前请求的url找到相应的视图函数。</li>
<li>进入view，进行业务处理，执行类或者函数，返回字符串。</li>
<li>再次通过中间件处理响应。</li>
<li>WSGI返回响应。</li>
<li>浏览器渲染。</li>
</ol>
<h4 id="django启动"><a href="#django启动" class="headerlink" title="django启动"></a>django启动</h4><p>我们在启动一个django项目的时候，无论你是在命令行执行还是在pycharm直接点击运行，其实都是执行’runserver’的操作，而ruserver是使用django自带的的web server，主要用于开发和调试中，而在正式的环境中，一般会使用nginx+uwsgi模式。<br>无论是哪种方式，当启动一个项目，都会做2件事：</p>
<ol>
<li>创建一个WSGIServer类的实例，接受用户的请求。</li>
<li>当一个用户的http请求到达的时，为用户指定一个WSGIHandler，用于处理用户请求与响应，这个Handler是处理整个request的核心。</li>
</ol>
<h4 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h4><p>WSGI：全称是Web Server Gateway interface, WSGI不是服务器，也不用于与程序交互的API，更不是代码，而只是定义了一个接口，用于描述web server如何与web application通信的规范。</p>
<p>客户端发送一次请求后，最先处理请求的实际上是 web 服务器就是我们经常说的 nginx、Apache 这类的 web 服务器，然后web服务器再把请求交给web应用程序(如django)处理，这中间的中介就是WSGI，它把 web 服务器和 web 框架 (Django) 连接起来。</p>
<p>Django自带的wsgi服务是单线程的，适用于开发阶段。部署到生产环境时一般使用nginx代理服务器实现异步多线程(Apache是同步的，不适用于高并发处理),能处理理论高达五万并发请求。在Django2.0开始提出异步，在ORM做了初步使用，但不完全异步，3.0以后实现异步处理函数，基于Python的协程实现（不是greenlet这些第三方库，是asyncio库以及ansync/await关键字实现的）,使用的是Django特有的asgi服务器，这个服务器可以处理同步和异步请求。</p>
<p>Django异步多线程场配合celery框架来实现，celery是一个用python开发的分布式任务队列框架，支持线程/进程处理调度。</p>
<h4 id="中间件基本概念"><a href="#中间件基本概念" class="headerlink" title="中间件基本概念"></a>中间件基本概念</h4><p>顾名思义，中间件是位于Web服务器端和Web应用之间的，它可以添加额外的功能。当我们创建一个django项目(通过pycharm)，它会自动帮我们设置一些必要的中间件。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">MIDDLEWARE_CLASSES = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.SessionAuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></div>
<p>中间件要么对来自用户的数据进行预处理，然后发送给应用；要么在应用将响应负载返回给用户之前，对结果数据进行一些最终的调整。</p>
<p>通俗一点，在django中，中间能够帮我们准备好request这个对象，然后应用可以直接使用request对象获取到各类数据，也帮我们将response添加头部，状态码等。<br>例如：</p>
<ol>
<li><p>Django项目中默认启用了csrf保护,每次请求时通过CSRF中间件检查请求中是否有正确#token值</p>
</li>
<li><p>当用户在页面上发送请求时，通过自定义的认证中间件，判断用户是否已经登陆，未登陆就去登陆。</p>
</li>
<li><p>当有用户请求过来时，判断用户是否在白名单或者在黑名单里</p>
</li>
</ol>
<p>其内置的五个方法:</p>
<ol>
<li><p>process_request : 请求进来时,权限认证</p>
</li>
<li><p>process_view : 路由匹配之后,能够得到视图函数</p>
</li>
<li><p>process_exception : 异常时执行</p>
</li>
<li><p>process_template_responseprocess : 模板渲染时执行</p>
</li>
<li><p>process_response : 请求有响应时执行、</p>
</li>
</ol>
<h4 id="ORM-对象关系映射"><a href="#ORM-对象关系映射" class="headerlink" title="ORM 对象关系映射"></a>ORM 对象关系映射</h4><p>一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。<br>几乎所有的程序里面，都存在对象和关系数据库。在业务逻辑层和用户界面层中，我们是面向对象的。当对象信息发生变化的时候，我们需要把对象的信息保存在关系数据库中。<br>ORM解决的主要问题是对象关系的映射。</p>
<p>ORM的技术特点：</p>
<ol>
<li>提高了开发效率。</li>
<li>不会存在sql语句编写不规范的问题。</li>
</ol>
<h3 id="Django常见的线上部署方式"><a href="#Django常见的线上部署方式" class="headerlink" title="Django常见的线上部署方式"></a>Django常见的线上部署方式</h3><p>Nginx+uwsgi</p>
<p>nginx作为服务器最前端，负责接收client的所有请求，统一管理。静态请求由Nginx自己处理。<br>非静态请求通过uwsgi传递给Django，由Django来进行处理，从而完成一次WEB请求</p>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>408计算机组成原理-计算机系统概述</title>
    <url>/2021/03/30/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><h2 id="什么是计算机系统"><a href="#什么是计算机系统" class="headerlink" title="什么是计算机系统"></a>什么是计算机系统</h2><p>计算机系统=硬件+软件</p>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ol>
<li>系统软件：用来管理整个计算机系统<ol>
<li>操作系统</li>
<li>数据库管理系统</li>
<li>标准程序库</li>
<li>网络软件</li>
<li>语言处理程序</li>
<li>服务程序</li>
</ol>
</li>
<li>应用软件：按任务需要编制的各种程序</li>
</ol>
<h2 id="1-1-计算机发展历程"><a href="#1-1-计算机发展历程" class="headerlink" title="1.1 计算机发展历程"></a>1.1 计算机发展历程</h2><h3 id="计算机的四代变化"><a href="#计算机的四代变化" class="headerlink" title="计算机的四代变化"></a>计算机的四代变化</h3><ol>
<li>1946-1957 电子管时代（语言：机器语言，内存：磁鼓、汞延迟线，外存：穿孔卡片、纸带）</li>
<li>1958-1964 晶体管时代（语言：面向过程的FORTRAN，内存：磁芯存储器，外存：磁带，有了操作系统的雏形）</li>
<li>1965-1971 中小规模集成电路时代（高级语言迅速发展，有了分时操作系统，内存：半导体存储器，外存：磁带、磁盘）</li>
<li>1972至今 超大规模集成电路时代（出现了微处理器(cpu)，微型计算机）</li>
</ol>
<h3 id="计算机元件的更新换代"><a href="#计算机元件的更新换代" class="headerlink" title="计算机元件的更新换代"></a>计算机元件的更新换代</h3><ol>
<li>摩尔定律。当价格不变时，集成电路上的晶体管数目约隔18个月便会增加一倍，性能也提升一倍。18个月后同样的钱买到的CPU，后者性能是前者的两倍。</li>
<li>半导体存储器发展。1970年第一个半导体存储器由仙童半导体公司生产。半导体存储器到现在经历了11代发展。</li>
<li>微处理器。处理器中的32位，64位是指计算机进行一次整数运算所能处理的二进制数据的位数。</li>
</ol>
<h3 id="计算机的分类和发展方向"><a href="#计算机的分类和发展方向" class="headerlink" title="计算机的分类和发展方向"></a>计算机的分类和发展方向</h3><p>两极分化：<br>一极是微信计算机向更微型化、网络化、高性能、多用途方向发展。<br><br>另一极是巨型化向更巨型化、超高速、并行处理、智能化方向发展。</p>
<h3 id="冯诺依曼计算机的特点"><a href="#冯诺依曼计算机的特点" class="headerlink" title="冯诺依曼计算机的特点"></a>冯诺依曼计算机的特点</h3><ol>
<li>计算机由五大部件组成：运算器、储存器、控制器、输入设备、输出设备</li>
<li>指令和数据以同等地位存于存储器，并可按地址寻访</li>
<li>指令和数据用二进制表示</li>
<li>指令有操作码和地址码组成<br>5 .指令在存储器内按顺序存放（<strong>存储程序</strong>）.exe文件执行时先按顺序存放到存储器中，然后存储器一条条执行</li>
<li>机器以运算器为中心，输入输出设备与存储器间的数据传送通过运算器完成</li>
</ol>
<p>现代计算机：<font color="red"><strong>以存储器为核心</strong></font>。CPU=运算器+控制器。</p>
<p>在计算机系统中，<strong>软件和硬件在逻辑上是<font color="red">等效</font>的</strong>。</p>
<h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><p>计算机的存储部件，用来存放数据和程序</p>
<p>存储器分为主存储器(内存)和辅存储器(外存)。CPU能够直接访问主存，辅存的信息比如调入主存，cpu才能访问。</p>
<p>主存储器构成：</p>
<ol>
<li>存储体：用来存放数据，由一系列存储元件构成，用来存放二进制0或1，数据在存储体内按地址存储。<ol>
<li>存储单元：每个存储单元存放一串二进制代码</li>
<li>存储字(word)：存储单元中二进制代码的组合</li>
<li>存储字长：存储单元中二进制代码的位数</li>
<li>即存储二进制的电子元件，每个存储元件可存1bt</li>
</ol>
</li>
<li>地址寄存器(MAR) 存放访存地址，用于寻址，其位数对应存储单元的个数，如MAR有10位，则有2^10=1024个单元，为1k</li>
<li>数据寄存器(MDR) 用于暂存从存储体中读或写的信息，其位数代表存储字长。</li>
</ol>
<p>MAR与MDR虽然是存储器的一部分，但在现代CPU中是存在于CPU中，高速缓存(Cache)也存在CPU中</p>
<h3 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h3><p>用于实现算术运算(加减乘除)、逻辑运算(与或非)。</p>
<p>基本组成</p>
<ol>
<li>ACC: 累加器，用来存放操作数，或运算结果</li>
<li>MQ：乘商寄存器，在乘、除运算时，用来存放操作数和运算结果</li>
<li>X：通用的操作数寄存器，用来存放操作数。</li>
<li>ALU：算术逻辑单元，通过内部复杂的电路实现算术运算、逻辑运算。</li>
</ol>
<h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><p>基本组成</p>
<ol>
<li>CU：控制单元，分析指令，给出控制信号</li>
<li>IR：指令寄存器，存放当前执行指令</li>
<li>PC：程序计数器，存放下一条指令地址，有自动加1功能</li>
</ol>
<p>完成一条指令：取指令(PC–>IR)—>分析指令(CU)—->执行(CU)</p>
<p><strong>CPU区分指令和数据的依据: <font color="red">指令周期的不同阶段</font></strong></p>
<h3 id="计算机系统的层次结构"><a href="#计算机系统的层次结构" class="headerlink" title="计算机系统的层次结构"></a>计算机系统的层次结构</h3><p>虚拟机器M4(高级机器语言:用编译程序翻译成汇编语言程序)—>虚拟机器M3(汇编语言机器:用汇编程序翻译成机器语言程序)–>虚拟机器M2(操作系统机器:向上提供”广义指令”(系统调用))—>传统机器M1(用机器语言的机器:执行二进制机器指令)—>微程序机器M0(微指令系统：由硬件直接执行微指令)</p>
<p>M4,M3,M2属于软件层次，M1,M0属于硬件层次</p>
<p>计算机系统层次，<strong><font color="red">下层是上层的基础，上层是下层的扩展</font></strong></p>
<p>编译程序: 将高级语言编写的源程序<strong>全部语句一次全部翻译成机器语言程序</strong>，而后再执行机器语言程序(只需要翻译一次)<br>解释程序: 将源程序的一条语句翻译成对于机器语言的语句，并立即执行。紧接着再翻译下一句。(每次执行都要翻译)</p>
<h3 id="计算机工作的过程"><a href="#计算机工作的过程" class="headerlink" title="计算机工作的过程"></a>计算机工作的过程</h3><ol>
<li>把程序和数据装入主存储器</li>
<li>将源程序换为可执行文件</li>
<li>从可执行文件的首地址开始逐条执行指令</li>
</ol>
<h3 id="什么是存储程序原理"><a href="#什么是存储程序原理" class="headerlink" title="什么是存储程序原理"></a>什么是存储程序原理</h3><p>存储程序是指将指令以代码的形式事先输入计算机主存储器，然后按其在存储器中的首地址执行程序的第一条指令，以后就按该程序的规定顺序执行其他指令，直至程序执行结束。</p>
<h2 id="1-3-计算机的主要性能指标"><a href="#1-3-计算机的主要性能指标" class="headerlink" title="1.3 计算机的主要性能指标"></a>1.3 计算机的主要性能指标</h2><h3 id="存储器的性能指标"><a href="#存储器的性能指标" class="headerlink" title="存储器的性能指标"></a>存储器的性能指标</h3><p>MAR位数反应存储单元的个数，MDR位数=存储字长=每个存储单元的大小。<br>总容量=存储单元个数 x 存储字长 bit =存储单元个 = 数存储字长 x 存储字长/8 Byte</p>
<h3 id="CPU的性能指标"><a href="#CPU的性能指标" class="headerlink" title="CPU的性能指标"></a>CPU的性能指标</h3><ol>
<li>CPU主频: CPU内数字脉冲信号震荡的频率。每秒内CPU数字脉冲信号震荡的次数(单位：HZ)。CPU主频= 1 / CPU时钟周期。</li>
<li>CPU时钟周期: 每个CPU脉冲的时间(单位: 微妙、纳秒)。</li>
<li>CPI：执行一条指令所需要的时钟周期数。</li>
<li>IPS: 每秒执行多少条指令。IPS= 主频 / 平均CPI<ol>
<li>MIPS，即每秒执行百万条指令。</li>
</ol>
</li>
<li>FLOPS：每秒执行多少次浮点运算。<ol>
<li>MFLOPS</li>
<li>GFLOPS</li>
<li>TFLOPS<br><font color="red"><strong>执行一条指令的耗时=CPI * CPU时钟周期</strong></font><br>CPU执行时间 = CPU时钟周期数/主频 = (指令条数*CPI)/主频</li>
</ol>
</li>
</ol>
<h3 id="系统整体性能的指标"><a href="#系统整体性能的指标" class="headerlink" title="系统整体性能的指标"></a>系统整体性能的指标</h3><h4 id="数据通路带宽"><a href="#数据通路带宽" class="headerlink" title="数据通路带宽"></a>数据通路带宽</h4><p>数据总线一次所能并行传送信息的位数（各硬件部件通过数据总线传输数据）</p>
<h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>指系统在单位时间内处理请求的数量。</p>
<h4 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h4><p>指从用户向计算机发送一个请求，该系统对该请求作出响应并获得所需结果的等待时间。</p>
<h4 id="基准程序-跑分软件"><a href="#基准程序-跑分软件" class="headerlink" title="基准程序(跑分软件)"></a>基准程序(跑分软件)</h4><p>是用来测量计算机处理速度的一种实用程序，以便于被测量的计算机性能可以与运行相同程序的其它计算机性能进行比较。</p>
<h3 id="机器字长"><a href="#机器字长" class="headerlink" title="机器字长"></a>机器字长</h3><p>指计算机进行一次整数运算所能处理的二进制数据的位数。机器字长一般等于内部寄存器的大小。</p>
<h2 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h2><h3 id="主频高的CPU一定比主频低的CPU快吗？"><a href="#主频高的CPU一定比主频低的CPU快吗？" class="headerlink" title="主频高的CPU一定比主频低的CPU快吗？"></a>主频高的CPU一定比主频低的CPU快吗？</h3><p>不一定。还要看CPI和指令系统。</p>
</body></html>]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>计算机组成</tag>
        <tag>考研</tag>
      </tags>
  </entry>
</search>
