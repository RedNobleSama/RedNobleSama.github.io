{
    "version": "https://jsonfeed.org/version/1",
    "title": "世上无难事,只要肯放弃",
    "subtitle": "",
    "icon": "http://oreki.world/images/favicon.ico",
    "description": "",
    "home_page_url": "http://oreki.world",
    "items": [
        {
            "id": "http://oreki.world/computer-science/golang/%E5%9F%BA%E4%BA%8EGolang%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%A2%E6%88%B7%E5%85%B3%E7%B3%BB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "url": "http://oreki.world/computer-science/golang/%E5%9F%BA%E4%BA%8EGolang%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%A2%E6%88%B7%E5%85%B3%E7%B3%BB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "title": "基于Golang实现简单的客户关系管理系统",
            "date_published": "2021-05-28T16:14:09.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"目录结构\"><a class=\"anchor\" href=\"#目录结构\">#</a> 目录结构</h3><p><img data-src=\"https://orekisama.gitee.io/blog-image-bed/blogimg/assets/%E5%9F%BA%E4%BA%8EGolang%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%A2%E6%88%B7%E5%85%B3%E7%B3%BB%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1.png\" alt=\"目录结构\"></p><h3 id=\"rungo\"><a class=\"anchor\" href=\"#rungo\">#</a> run.go</h3><figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"Golang_FamilyAccount/customerManager/utils\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 显示主菜单</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcustomerView <span class=\"token operator\">:=</span> utils<span class=\"token punctuation\">.</span>CustomerView<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tKey<span class=\"token punctuation\">:</span>  <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tLoop<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 对 customerView 结构体的 customerService 字段的初始化</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcustomerView<span class=\"token punctuation\">.</span>CustomerService <span class=\"token operator\">=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">NewCustomerService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 显示主菜单</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcustomerView<span class=\"token punctuation\">.</span><span class=\"token function\">MainMenu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"customergo\"><a class=\"anchor\" href=\"#customergo\">#</a> customer.go</h3><figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> utils</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Customer 声明一个 Customer 结构体，表示一个客户信息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">type</span> Customer <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tId <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tName <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tGender <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// NewCustomer 编写一个工厂模式，返回一个 Customer 的实例</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">NewCustomer</span><span class=\"token punctuation\">(</span>id <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> gender <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Customer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> Customer<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tId<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tName<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tGender<span class=\"token punctuation\">:</span> gender<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">NewCustomer2</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> gender <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Customer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> Customer<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tName<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tGender<span class=\"token punctuation\">:</span> gender<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// GetInfo 返回用户的信息</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>customer Customer<span class=\"token punctuation\">)</span> <span class=\"token function\">GetInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tinfo <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v\\t%v\\t%v\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tcustomer<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> customer<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> customer<span class=\"token punctuation\">.</span>Gender<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> info</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"customerservicego\"><a class=\"anchor\" href=\"#customerservicego\">#</a> customerService.go</h3><figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> utils</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// CustomerService 该 CustomerService, 完成对 Customer 的操作，包括增删改查</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">type</span> CustomerService <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcustomers <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Customer <span class=\"token comment\">// 客户切片</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcustomerNum <span class=\"token builtin\">int</span> <span class=\"token comment\">// 声明一个字段，表示当前切片含有多少个客户</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// NewCustomerService 初始化 CustomerService</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">NewCustomerService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>CustomerService <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcustomerService <span class=\"token operator\">:=</span> CustomerService<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcustomerService<span class=\"token punctuation\">.</span>customerNum <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcustomer <span class=\"token operator\">:=</span> <span class=\"token function\">NewCustomer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cyt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcustomerService<span class=\"token punctuation\">.</span>customers <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>customerService<span class=\"token punctuation\">.</span>customers<span class=\"token punctuation\">,</span> customer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>customerService</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// List 显示客户列表，返回客户切片</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>CustomerService<span class=\"token punctuation\">)</span> <span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Customer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span>customers</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// Add 添加客户</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>CustomerService<span class=\"token punctuation\">)</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>customer Customer<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tc<span class=\"token punctuation\">.</span>customerNum<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tcustomer<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>customerNum</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tc<span class=\"token punctuation\">.</span>customers <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>customers<span class=\"token punctuation\">,</span> customer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// FindById 根据 id 查找客户在切片中对应下标，如果没有该客户，返回 - 1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>CustomerService<span class=\"token punctuation\">)</span> <span class=\"token function\">FindById</span><span class=\"token punctuation\">(</span>id <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tindex <span class=\"token operator\">:=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>customers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> id <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\tindex <span class=\"token operator\">=</span> i</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">return</span> index</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// DelById 根据 id 删除客户</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>CustomerService<span class=\"token punctuation\">)</span> <span class=\"token function\">DelById</span><span class=\"token punctuation\">(</span>id <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tindex <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">FindById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 如果 index == -1, 说明没有这个客户</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">if</span> index <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 从切片中删除一个元素</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tc<span class=\"token punctuation\">.</span>customers <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>customers<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>index<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// Update 修改客户</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>CustomerService<span class=\"token punctuation\">)</span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span>id <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> customer Customer<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 如果 index == -1, 说明没有这个客户</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tindex <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">FindById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">if</span> index <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">// 修改切片内容</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tc<span class=\"token punctuation\">.</span>customers <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>customers<span class=\"token punctuation\">,</span> customer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"customerviewgo\"><a class=\"anchor\" href=\"#customerviewgo\">#</a> customerView.go</h3><figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> utils</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> CustomerView <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 定义必要字段</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tKey             <span class=\"token builtin\">string</span> <span class=\"token comment\">// 输入字符</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tLoop            <span class=\"token builtin\">bool</span>   <span class=\"token comment\">// 表示是否循环显示菜单</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tCustomerService <span class=\"token operator\">*</span>CustomerService</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">NewCustomerView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>CustomerView  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>CustomerView<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tKey<span class=\"token punctuation\">:</span>  <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tLoop<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// List 显示所有的客户信息</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>cv <span class=\"token operator\">*</span>CustomerView<span class=\"token punctuation\">)</span> <span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcustomers <span class=\"token operator\">:=</span> cv<span class=\"token punctuation\">.</span>CustomerService<span class=\"token punctuation\">.</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 显示</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------------客户列表---------------------------\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"编号\\t姓名\\t性别\\t年龄\\t电话\\t邮箱\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>customers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>customers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n-------------------------客户列表完成-------------------------\\n\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// GetUserInput 填入信息</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>cv <span class=\"token operator\">*</span>CustomerView<span class=\"token punctuation\">)</span> <span class=\"token function\">GetUserInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> Customer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tname <span class=\"token operator\">:=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"性别：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tgender <span class=\"token operator\">:=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>gender<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tcustomer <span class=\"token operator\">:=</span> <span class=\"token function\">NewCustomer2</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> customer</pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// Add 添加用户</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>cv <span class=\"token operator\">*</span>CustomerView<span class=\"token punctuation\">)</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tcustomer <span class=\"token operator\">:=</span> cv<span class=\"token punctuation\">.</span><span class=\"token function\">GetUserInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">//id 是唯一的，需要系统分配</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 调用</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">if</span> cv<span class=\"token punctuation\">.</span>CustomerService<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------添加完成---------------------\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------添加失败---------------------\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">// Update 修改客户信息</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>cv <span class=\"token operator\">*</span>CustomerView<span class=\"token punctuation\">)</span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入待修改的客户编号(-1)退出:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tid <span class=\"token operator\">:=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">if</span> id <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token comment\">// 放弃删除操作</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tcustomer <span class=\"token operator\">:=</span> cv<span class=\"token punctuation\">.</span><span class=\"token function\">GetUserInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tcv<span class=\"token punctuation\">.</span>CustomerService<span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> customer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\">// Delete 删除用户</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>cv <span class=\"token operator\">*</span>CustomerView<span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------删除客户---------------------\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请选择待删除客户编号(-1退出)：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tid <span class=\"token operator\">:=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">if</span> id <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token comment\">// 放弃删除操作</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"确认是否删除(Y/N)：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\">// 这里可以加入一个循环判断，直到用户输入 y 或者 n, 才退出..</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tchoice <span class=\"token operator\">:=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>choice<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token keyword\">if</span> choice <span class=\"token operator\">==</span> <span class=\"token string\">\"y\"</span> <span class=\"token operator\">||</span> choice <span class=\"token operator\">==</span> <span class=\"token string\">\"Y\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token comment\">// 调用 customerService 的 Delete 方法</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> cv<span class=\"token punctuation\">.</span>CustomerService<span class=\"token punctuation\">.</span><span class=\"token function\">DelById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------删除完成---------------------\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------删除失败，输入的id号不存在----\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\">// Exit 退出系统</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>cv <span class=\"token operator\">*</span>CustomerView<span class=\"token punctuation\">)</span> <span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"确认是否退出(Y/N):\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cv<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> cv<span class=\"token punctuation\">.</span>Key <span class=\"token operator\">==</span> <span class=\"token string\">\"Y\"</span> <span class=\"token operator\">||</span> cv<span class=\"token punctuation\">.</span>Key <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span> <span class=\"token operator\">||</span> cv<span class=\"token punctuation\">.</span>Key <span class=\"token operator\">==</span> <span class=\"token string\">\"y\"</span> <span class=\"token operator\">||</span> cv<span class=\"token punctuation\">.</span>Key <span class=\"token operator\">==</span> <span class=\"token string\">\"n\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入有误, 确认是否退出(Y/N)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token keyword\">if</span> cv<span class=\"token punctuation\">.</span>Key <span class=\"token operator\">==</span> <span class=\"token string\">\"Y\"</span> <span class=\"token operator\">||</span> cv<span class=\"token punctuation\">.</span>Key <span class=\"token operator\">==</span> <span class=\"token string\">\"y\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\tcv<span class=\"token punctuation\">.</span>Loop <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\">// MainMenu 显示主菜单</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>cv <span class=\"token operator\">*</span>CustomerView<span class=\"token punctuation\">)</span> <span class=\"token function\">MainMenu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------------客户信息管理软件----------------------\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"                  1 添加客户\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"                  2 修改客户\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"                  3 删除客户\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"                  4 客户列表\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"                  5 退   出\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请选择(1-5)：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanln</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cv<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> cv<span class=\"token punctuation\">.</span>Key <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\tcv<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的输入有误,请重新输入\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>cv<span class=\"token punctuation\">.</span>Loop <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"退出客户关系管理系统\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Golang",
                "Golang"
            ]
        },
        {
            "id": "http://oreki.world/kaoyan/internet/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/",
            "url": "http://oreki.world/kaoyan/internet/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/",
            "title": "408计算机网络-数据链路层",
            "date_published": "2021-04-15T15:30:38.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"功能\"><a class=\"anchor\" href=\"#功能\">#</a> 功能</h2><h3 id=\"数据链路层基本概念\"><a class=\"anchor\" href=\"#数据链路层基本概念\">#</a> 数据链路层基本概念</h3><p>数据链路层负责通过一条链路从一个结点向另一个物理链路直接相连的相邻结点传送数据报。</p><p>结点：主机、路由器 &lt;br&gt;<br>链路：网络中两个结点之间的<strong>物理通道</strong>。链路的传输介质主要有双绞线、光纤和微波。分为有限链路和无线链路。&lt;br&gt;<br>数据链路：网络中两个结点之间的<strong>逻辑通道</strong>。把实现控制协议的硬件和软件加到链路上就构成数据链路。&lt;br&gt;<br>帧：链路层的协议数据单元。&lt;br&gt;</p><p>数据链路层在物理层提供服务的基础上<span class=\"red\">向网络层提供服务</span>。其最基本的服务是将源自网络层来的数据可靠的传输到相邻节点的目标机网络层。其主要作用是 &lt;font color=&quot;red&quot;&gt;[加强物理层传输原始比特流的功能]&lt;/font&gt;，将物理层提供的可能出错的物理连接改造成 &lt; font color=&quot;red&quot;&gt;[逻辑上无差错的数据链路]&lt;/font&gt;，使之对网络层表现为一条无差错的链路。*</p><p>功能一：为网络层提供服务。无确认无连接服务。有确认无连接服务。有确认面向连接服务。&lt;br&gt;<br>功能二：链路管理，即连接的建立、维持、释放（用于面向连接的服务）。&lt;br&gt;<br>功能二：组帧。&lt;br&gt;<br>功能四：流量控制。&lt;br&gt;<br>功能五：差错控制。（帧错 / 位错）。</p><h3 id=\"封装成帧透明传输\"><a class=\"anchor\" href=\"#封装成帧透明传输\">#</a> 封装成帧 &amp; 透明传输</h3><h4 id=\"封装成帧\"><a class=\"anchor\" href=\"#封装成帧\">#</a> 封装成帧</h4><p>封装成帧就是在一段数据的首部和尾部添加一段数据，这段数据被称为帧定界符。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。</p><h4 id=\"透明传输\"><a class=\"anchor\" href=\"#透明传输\">#</a> 透明传输</h4><p>透明传输是指不管所传数据是什么样的比特组合，都应当能在链路上传送。</p><h4 id=\"组帧的四种方法\"><a class=\"anchor\" href=\"#组帧的四种方法\">#</a> 组帧的四种方法</h4><ol><li>字符计数法：帧首部使用一个记数字段（第一个字节，八位）来标明帧内字符数。</li><li>字符填充法：即在数据中心添加转义字符，防止内容中二进制字符与帧首部和尾部字符冲突。<ol><li>当传送的帧是文本文件时（文本文件的字符都是键盘上输入的，都是 ASCII 码）。不管从键盘上输入什么字符都可以放进帧内传送过去。（透明传输）</li><li>当传送的帧是由非 ASCII 码得文本文件组成时（二进制代码的程序或者图像）就要采用字符填充方法实现透明传输。</li></ol></li><li>零比特填充法：在发送端，扫描整个信息字段，<strong>只要有连续 5 个 1，就立即填入 1 个 0</strong>. 在接收端收到一个帧时，先找到标志字段确定边界，再用硬件对比特流进行扫描。<strong>发现连续 5 个 1 时，就把后面的 0 删除</strong>。</li><li>违规编码法：参考曼彻斯特编码，与它不同的是，违规编码法用高 - 高，低 - 低来定界帧的起始和结束。</li></ol><p>由于字节计数法中 Count 字段的脆弱性及字符填充法的复杂性和不兼容性。目前普遍使用的是<strong>零比特填充法</strong>和<strong>违规编码法</strong>。</p><h3 id=\"差错控制\"><a class=\"anchor\" href=\"#差错控制\">#</a> 差错控制</h3><h4 id=\"差错从何而来\"><a class=\"anchor\" href=\"#差错从何而来\">#</a> 差错从何而来</h4><ol><li>（全局性）由于线路本身电气特性所产生的<strong>随机噪声</strong> (热噪声)，是信道固有的，随机存在的。解决方法：提高信噪比来减少和避免干扰。(对传感器下手)</li><li>（局部性）外界特定的短暂原因所造成的的<strong>冲击噪声</strong>，是产生差错的原因。解决办法：通常利用编码技术来解决。</li></ol><h4 id=\"差错\"><a class=\"anchor\" href=\"#差错\">#</a> 差错</h4><ol><li>位错 -- 比特位出错，1 变 0,0 变 1.</li><li>帧错<ol><li>丢失</li><li>重复</li><li>失序</li></ol></li></ol><h4 id=\"差错控制-2\"><a class=\"anchor\" href=\"#差错控制-2\">#</a> 差错控制</h4><ol><li>检错编码<ol><li>奇偶校验码<ol><li>奇校验码：在 n-1 位的信息元之前加上一位的校验元，使 1 的个数为奇数</li></ol></li><li>循环冗余码 CRC：冗余码的生成以及接收端 CRC 检验都是硬件实现，处理很迅速，因此不会延误数据的传输。</li></ol></li><li>纠错编码<ol><li>海明码<ol><li>海明距离：两个合法编码的对应比特取值不同的比特数称为这两个码字的<strong>海明距离 (码距)</strong></li><li>一个有效编码集中，任意<strong>两个合法编码 (码字) 的海明距离的最小值</strong>称为该编码集的海明距离 (码距)</li><li>海明码纠错 d 位，需要码距为 2d+1 的编码方案；检错 d 位，只需要码距为 d+1。</li></ol></li></ol></li></ol><p>凡是接收端数据链路层接受的帧，我们都能以非常接近于 1 的概率认为这些帧在传输过程中没有产生差错。</p><p>可靠传输：数据链路层发送端发什么，接收端就收到什么<br>链路层使用 CRC 检验，能够实现无比特差错的传输，但这还不是可靠传输。</p><h3 id=\"数据链路层的流量控制\"><a class=\"anchor\" href=\"#数据链路层的流量控制\">#</a> 数据链路层的流量控制</h3><p><strong>较高的发送速度</strong>和<strong>较低的接受能力</strong>的不匹配，会造成传输出错，因此流量控制也是数据链路层的一项重要工作。</p><p>数据链路层的流量控制是<strong>点对点的</strong>，而传输层的流量控制是<strong>端到端的</strong>。</p><p>数据链路的流量控制手段：接收方收不下就不回复确认。</p><p>传输层流量控制手段：接收端给发送端一个窗口公告。</p><h3 id=\"流量控制方法\"><a class=\"anchor\" href=\"#流量控制方法\">#</a> 流量控制方法</h3><ol><li>停止等待协议 (特殊滑动窗口协议): 每发送完一个帧就停止发送，等待对方的确认，在收到确认后再发送下一个帧。</li><li>滑动窗口协议<ol><li>后退 N 帧协议 (GBN)</li><li>选择重传协议 (SR)</li></ol></li></ol><p>停止 - 等待协议 ---&gt; 发送窗口大小 = 1，接受窗口大小 = 1<br>后退 N 帧协议 (GBN)---&gt; 发送窗口大小 &gt; 1, 接受窗口大小 = 1<br>选择重传协议 (SR)---&gt; 发送窗口大小 &gt; 1, 接受窗口大小 &gt; 1</p><p>可靠传输：发送端发啥，接收端接啥<br>流量控制：控制发送速率，使接收方由足够的缓冲空间来接受每一个帧</p><p>滑动窗口解决</p><ol><li>流量控制 (收不下就不给确认，想发也不发不了)</li><li>可靠传输 (发送方自动重传)</li></ol><h3 id=\"停止-等待协议\"><a class=\"anchor\" href=\"#停止-等待协议\">#</a> 停止 - 等待协议</h3><p>特点:</p><ol><li>简单</li><li>信道利用率太低<ol><li>信道利用率：发送方在一个发送周期内，有效地发送数据所需要的时间占整个发送周期的比率。</li><li>信道利用率 =(L/C)/T。</li><li>T: 发送周期，从开始发送数据，到收到第一个确认帧为止</li><li>L：T 内发送 L 比特数据</li><li>C：发送方数据传速率</li></ol></li></ol><p>信道吞吐率 = 信道利用率 * 发送方发送速率</p><h3 id=\"后退n帧协议\"><a class=\"anchor\" href=\"#后退n帧协议\">#</a> 后退 N 帧协议</h3><p>发送窗口：发送方维持一组持续的允许发送的帧的序号<br>接受窗口：接收方维持一组连续的允许接受帧的序号</p><p>GBN 发送方必须响应的三件事</p><ol><li>上层的调用</li><li>收到一个 ack: GBN 协议中，对 n 号帧的确认采用 **&lt;font color=&quot;red&quot;&gt;[累计确认]**&lt;/font &gt; 的方式，标明接收方已经收到 N 号帧和他之前的全部帧</li><li>超时事件</li></ol><p>GBN 接收方需要做的事</p><ol><li>如果正确收到 N 号帧，并且按序，那么接收方为 n 帧发送一个 ACK，并且将该帧中的数据部分交付给上层</li><li>其余情况都丢弃帧，并为最近按序接受的帧重新发送 ack。接收方无需缓存任何失序帧，只需维护一个信息：expectedseqnum（下一个按序接收的帧序号）</li></ol><h4 id=\"滑动窗口长度\"><a class=\"anchor\" href=\"#滑动窗口长度\">#</a> 滑动窗口长度</h4><p>若采用 n 个比特对帧编号，那么发送窗口的尺寸 Wt 应满足 1 《 Wt 《 2^n-1。因为发送窗口尺寸过大，就会使得接收方无法区别新帧和旧帧。</p><h4 id=\"gbn协议重点\"><a class=\"anchor\" href=\"#gbn协议重点\">#</a> GBN 协议重点</h4><ol><li>累积确认 (偶尔捎带确认)</li><li>接收方只按顺序接受帧，不按序无情丢弃</li><li>确认序列号最大、按序到达的帧</li><li>发送窗口最大为 2^n-1， 接收窗口大小为 1</li></ol><h4 id=\"gbn协议性能分析\"><a class=\"anchor\" href=\"#gbn协议性能分析\">#</a> GBN 协议性能分析</h4><ol><li>因连续发送数据帧而提高了信道利用率</li><li>在重传时必须把原来已经正确传送的数据帧重传，使传送效率降低</li></ol><h3 id=\"选择重传协议\"><a class=\"anchor\" href=\"#选择重传协议\">#</a> 选择重传协议</h3><h4 id=\"sr协议重点\"><a class=\"anchor\" href=\"#sr协议重点\">#</a> SR 协议重点</h4><ol><li>对数据帧逐一确认，收一个确认一个</li><li>只重传出错帧</li><li>接收方有缓存</li><li>最大发送窗口和接收窗口为 2^(n-1)</li></ol><h3 id=\"信道划分介质访问控制\"><a class=\"anchor\" href=\"#信道划分介质访问控制\">#</a> 信道划分介质访问控制</h3><p>信道划分介质访问控制：将使用介质的每个设备与来自同一信道上的其他设备的<strong>通信隔离开</strong>，把 **&lt;font color=&quot;red&quot;&gt;[时域和频域资源]&lt;/font&gt;** 合理地分配给网络上的设备。</p><p>多路复用技术：把多个信号组合在一条物理信道上进行传输，使得多个计算机或者终端设备 **&lt;font color=&quot;red&quot;&gt;[共享信道资源]&lt;/font&gt;**，提高信道利用率。</p><p>共享信道：把一条广播信道，逻辑上分成几条用于两个节点之间通信的互不干扰的子信道，<strong>&lt;font color=&quot;red&quot;&gt;[实际上就是把广播信道转变为点对点信道]。&lt;/font&gt;</strong></p><p>传输数据使用的两种链路</p><ol><li>点对点链路：<ol><li>两个相邻节点通过一个链路相连，没有第三者。</li><li>应用：PPP 协议，常用于广域网</li></ol></li><li>广播室链路<ol><li>所有主机共享通信介质</li><li>应用：早起的总线以太网、无线局域网，常用于局域网</li><li>典型拓扑结构：总线型、星型 (逻辑总线型)</li></ol></li></ol><h4 id=\"介质访问控制\"><a class=\"anchor\" href=\"#介质访问控制\">#</a> 介质访问控制</h4><p>采用一定的措施，使得两对节点之间的通信不会发生互相干扰的情况。</p><ol><li>静态划分信道<ol><li>频分多路复用 FDM</li><li>时分多路复用 TDM</li><li>波分多路复用 WDM</li><li>码分多路复用 CDM</li></ol></li><li>动态分配信道<ol><li>轮询访问介质访问控制<ol><li>令牌传递协议</li></ol></li><li>随机访问介质访问控制<ol><li>ALOHA 协议</li><li>CSMA 协议</li><li>CSMA/CD 协议</li><li>CSMA/CA 协议</li></ol></li></ol></li></ol><p><strong>信道划分介质访问控制 (MAC) 协议</strong>：</p><ol><li>基于多路复用技术划分资源。</li><li>网络负载重：共享信道效率高，且公平。</li><li>网络负载轻：共享信道效率低。</li></ol><p><strong>随机访问 MAC 协议 (冲突)</strong>:</p><ol><li>用户根据意愿<strong>随机</strong>发送消息，发送消息时可独占信道带宽。</li><li>网络负载重：产生冲突开销。</li><li>网络负载轻：共享信道效率高，单个结点可利用信道全部带宽。</li></ol><p><strong>轮询访问 MAC 协议 / 轮流协议 / 轮转访问 MAC 协议</strong>：</p><ol><li>既要<strong>不产生冲突</strong>，又要发送时<strong>占全部带宽</strong>。</li></ol><h4 id=\"频分多路复用fdm\"><a class=\"anchor\" href=\"#频分多路复用fdm\">#</a> 频分多路复用 FDM</h4><ol><li>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。<strong>频分复用的所有用户在同样的时间占用不同的带宽 (频率带宽) 资源</strong>。</li><li>充分利用传输介质带宽，系统<strong>效率较高</strong>：由于技术比较成熟，实现也比较<strong>容易</strong>。</li></ol><h4 id=\"时分多路复用tdm\"><a class=\"anchor\" href=\"#时分多路复用tdm\">#</a> 时分多路复用 TDM</h4><ol><li>将时间划分为一段段等长的时分复用帧 (<strong>TDM 帧</strong>)。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙，所有用户轮流占用信道。</li><li><strong>&lt;font color=&quot;red&quot;&gt;[TDM 帧是在物理层传送的比特流所划分的帧，标志一个周期]&lt;/font&gt;</strong>。</li></ol><p>时分多路复用 -- 并发<br>频分多路复用 -- 并行</p><h4 id=\"改进的时分复用-统计时分复用stdm\"><a class=\"anchor\" href=\"#改进的时分复用-统计时分复用stdm\">#</a> 改进的时分复用 -- 统计时分复用 STDM</h4><h4 id=\"波分多路复用wdm\"><a class=\"anchor\" href=\"#波分多路复用wdm\">#</a> 波分多路复用 WDM</h4><p>波分多路复用就是 **&lt;font color=&quot;red&quot;&gt;[光的频分多路复用]&lt;/font&gt;**</p><h4 id=\"码分多路复用cdm\"><a class=\"anchor\" href=\"#码分多路复用cdm\">#</a> 码分多路复用 CDM</h4><p>码分多址 (CDMA) 是码分复用的一种方式</p><h4 id=\"aloha协议-font-colorred不听就说font\"><a class=\"anchor\" href=\"#aloha协议-font-colorred不听就说font\">#</a> ALOHA 协议 ---<strong>&lt;font color=&quot;red&quot;&gt; 不听就说 &lt;/font&gt;</strong></h4><p>纯 ALOHA 协议：不监听信道、不按时间槽发送，随机重发。(想发就发)</p><p>时隙 ALOHA 协议：把时间分成若干个相同的时间片，所有用户在时间片开始时刻同步接入网络信道，若发生冲突，则必须等到下一个时间片开始时刻再发送。(控制想发就发的随意性)</p><ol><li>纯 ALOHA 协议比时隙 ALOHA 吞吐量更低，效率更低</li><li>纯 ALOHA 协议想发就发，时隙 ALOHA 只有在时间片段开始时才能发。</li></ol><h4 id=\"csma协议载波监听多路访问协议-font-colorred先听再说font\"><a class=\"anchor\" href=\"#csma协议载波监听多路访问协议-font-colorred先听再说font\">#</a> CSMA 协议 (载波监听多路访问协议)---<strong>&lt;font color=&quot;red&quot;&gt; 先听再说 &lt;/font&gt;</strong></h4><ol><li>CS: 载波监听 / 监听，每一个站在发送数据之前要检测一下总线上是否有其他计算机在发送数据。</li><li>MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线上。</li><li>协议思想：发送帧之前，<strong>监听</strong>信道。</li><li>如何监听：当几个站同时在总线上发数据时，总线上的信号<strong>电压摆动值</strong>会增大。当一个站检测到的信号电压摆动值超过一定门限时，就认为总线上至少有两个站同时在发送数据，表面产生了碰撞，即发生了冲突。</li><li>监听结果：<ol><li>信道空闲：发送完整帧</li><li>信道忙：推迟发送</li></ol></li></ol><h5 id=\"1-坚持csma\"><a class=\"anchor\" href=\"#1-坚持csma\">#</a> 1 - 坚持 CSMA</h5><p>坚持指的是对于监听信道忙之后的坚持。</p><p>1 - 坚持 CSMA 思想：如果一个主机要发送消息，那么它先监听信道。</p><ol><li>空闲则直接传输，不必等待</li><li>忙则一直监听，直到空闲马上传输</li><li>如果有冲突 (一段时间内未收到肯定回复)，则等待一个随机长的时间再监听，重复上述过程。<br>优点：只要媒体空闲，站点就马上发送，避免了媒体利用率的损失。&lt;br&gt;<br>缺点：如果有两个或者两个以上的站点有数据要发送，冲突就不可避免。</li></ol><h5 id=\"非坚持csma\"><a class=\"anchor\" href=\"#非坚持csma\">#</a> 非坚持 CSMA</h5><p>非坚持指的是对于监听信道忙之后就不继续监听。</p><p>非坚持 CSMA 思想：如果一个主机要发送消息，那么它先监听信道。</p><ol><li>空闲则直接传输，不必等待</li><li>忙则等待一个随机的时间之后再进行监听<br>优点：采用随机的重发延迟时间可以减少冲突发送的可能。&lt;br&gt;<br>缺点：可能存在大家都在延迟等待的过程中，使得媒体仍可能处于空闲状态，媒体使用率降低。</li></ol><h5 id=\"p-坚持csma\"><a class=\"anchor\" href=\"#p-坚持csma\">#</a> p - 坚持 CSMA</h5><p>p - 坚持指的是对于监听信道空闲的处理</p><p>p - 坚持 CSMA 思想：</p><ol><li>如果一个主机要发送消息，那么它先监听信道</li><li>空闲则以 p 概率直接传输，不必等待；概率 1-p 等待到下一个时间槽再传输。</li><li>忙则持续监听直到信道空闲在以 p 概率发送。</li><li>若冲突则等到下一个时间槽开始再监听并重复上述过程。<br>优点：既能像非坚持算法那样减少冲突，又能像 1 - 坚持算法那样减少媒体空闲时间的这种方案。&lt;br&gt;<br>缺点：发送冲突后还是要坚持把数据帧发送完，造成了浪费。</li></ol><h4 id=\"csmacd协议载波监听多点接入碰撞检测协议-font-colorred先听再说边听边说font\"><a class=\"anchor\" href=\"#csmacd协议载波监听多点接入碰撞检测协议-font-colorred先听再说边听边说font\">#</a> CSMA/CD 协议 (载波监听多点接入 / 碰撞检测协议)---<strong>&lt;font color=&quot;red&quot;&gt; 先听再说，边听边说 &lt;/font&gt;</strong></h4><ol><li>CS: 载波监听 / 监听，每一个站在<strong>发送数据之前</strong>及<strong>发送数据时</strong>要检测一下总线上是否有其他计算机在发送数据。</li><li>MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线上。</li><li>CD：碰撞检测 (冲突检测)，&quot;<strong>&lt;font color=&quot;red&quot;&gt;[边发送边监听]</strong>&lt;/font&gt;&quot;, 适配器边发送数据边检测信道上信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。</li></ol><h5 id=\"先听后发为什么还会冲突\"><a class=\"anchor\" href=\"#先听后发为什么还会冲突\">#</a> 先听后发为什么还会冲突？</h5><p>因为电磁波在总线上总是以有限的速率传播。</p><h5 id=\"如何确定碰撞后的重传时机\"><a class=\"anchor\" href=\"#如何确定碰撞后的重传时机\">#</a> 如何确定碰撞后的重传时机</h5><p><strong>截断二进制指数规避算法</strong></p><ol><li>确定基本推迟时间为争用期 2τ</li><li>定义参数 k，它等于重传次数，但 k 不超过 10，即 k=min [重传次数，10]。当重传次数不超过 10 次时，k 等于重传次数；当重传次数大于 10 时，k 就不在增大而一直等于 10。</li><li>从离散的整数集合 [0,1,,2^k-1] 中随机抽取一个数 r，重传所需退避时间就是 r 倍的基本退避时间，即 2rτ。</li><li>当重传达 &lt;font color=&quot;red&quot;&gt;<strong>[16 次]</strong>&lt;/font&gt; 仍不能成功时，说明网络太拥挤，认为此帧永远无法正确发出，抛弃此帧并向高层报告出错。</li></ol><p>若连续多次产生冲突，就标明可能有 &lt;font color=&quot;red&quot;&gt;<strong>[较多的站参与争用]</strong>&lt;/font&gt; 信道。使用此算法可使重传需要推迟的平均时间随重传次数的增大而增大，因而减小发送碰撞的概率，有利于整个系统的稳定。</p><h5 id=\"最小帧长\"><a class=\"anchor\" href=\"#最小帧长\">#</a> 最小帧长</h5><p>帧的传输时延至少要两倍于信号在总线中的传播时延</p><p>最小帧长 = 总线传播时延 * 数据传输速率 * 2 = 2τ * 数据传输速率</p><p><strong>以太网规定最短帧长为 64B，凡是长度小于 64B 的都是由于冲突而异常终止的无效帧。</strong></p><h4 id=\"csmaca协议载波监听多点接入碰撞避免协议-font-colorred先听再说font\"><a class=\"anchor\" href=\"#csmaca协议载波监听多点接入碰撞避免协议-font-colorred先听再说font\">#</a> CSMA/CA 协议 (载波监听多点接入 / 碰撞避免协议)---<strong>&lt;font color=&quot;red&quot;&gt; 先听再说 &lt;/font&gt;</strong></h4><ol><li>发送数据前，先检测信道是否空闲。</li><li>空闲则发出<strong> RTS</strong>，RTS 包括发射端的地址、接收端的地址、下一份数据将持续发送的时间等信息；信道忙则等待。</li><li>接收端收到 RTS 后，则响应<strong> CTS</strong></li><li>发送端收到 CTS 后，开始发送数据帧 (同时预约信道：发送方告知其他站点自己要传多久数据)</li><li>接收端收到数据帧后，将用 CRC 来检验数据是否正确，正确则响应 ACK 帧。</li><li>发送方收到 ACK 就可以进行下一个数据帧的发送，若没有则一直重传至规定重发次数为止 (采用二进制指数退避算法来确定随机的推迟时间)。</li></ol><h4 id=\"csmacd与csmaca\"><a class=\"anchor\" href=\"#csmacd与csmaca\">#</a> CSMA/CD 与 CSMA/CA</h4><p>相同点：</p><ol><li>CSMA/CD 与 CSMA/CA 机制都从属于 CSMA 的思路，其核心是 **&lt;font color=&quot;red&quot;&gt;[先听后说]&lt;/font&gt;**。换言之，两个在接入信道之前都须要进行监听。当发现信道空闲后，才能进行接入。<br>不同点：</li><li>传输介质不同: CSMA/CD 用于总线式以太网 (有线)，而 CSMA/CA 用于无线局域网 (无线)。</li><li>载波检测方式不同：因传输介质不同，CSMA/CD 与 CSMA/CA 的检测方式不用。CSMA/CD 通过电缆中电压的变化来检测，当数据发生碰撞时，电缆中的电压会随着发生变化；而 CSMA/CA 采用能量检测 (ED)、载波检测 (CS) 和能量载波混合检测三种检测信道空闲的方式。</li><li>CSMA/CD 检测冲突，CSMA/CA 避免冲突，二者出现冲突后都会进行<strong>有上限的重传</strong>。</li></ol><h4 id=\"轮询协议\"><a class=\"anchor\" href=\"#轮询协议\">#</a> 轮询协议</h4><p>主节点轮流<strong>邀请</strong>从属节点发送数据。</p><h4 id=\"令牌传递协议\"><a class=\"anchor\" href=\"#令牌传递协议\">#</a> 令牌传递协议</h4><ol><li>令牌：一个特殊格式的<strong> MAC</strong> 控制帧，不含任何信息。控制信道的使用，确保同一时刻只有一个结点独占信道。</li><li>每个节点都可以在一定的时间内 (令牌持有时间) 获得发送数据的权利，并不是无限制地持有令牌。</li><li>应用于令牌环网 (<strong>物理星型拓扑、逻辑环型拓扑</strong>)。</li><li>令牌传送方式的网络常用于<strong>负载较重、通信量较大</strong>的网络中。</li></ol><h3 id=\"局域网\"><a class=\"anchor\" href=\"#局域网\">#</a> 局域网</h3><p>在<strong>某一区域内</strong>由多台计算机互连组成的计算机组，使用<strong>广播信道</strong></p><h4 id=\"局域网介质访问控制方法\"><a class=\"anchor\" href=\"#局域网介质访问控制方法\">#</a> 局域网介质访问控制方法</h4><ol><li>CSMA/CD 常用于<strong>总线型局域网</strong>，也用于树形网络</li><li>令牌总线，常用于<strong>总线型局域网</strong>，也用于树形网络</li><li>令牌环， 用于<strong>环型局域网</strong>，比如令牌环网</li></ol><h4 id=\"局域网的分类\"><a class=\"anchor\" href=\"#局域网的分类\">#</a> 局域网的分类</h4><ol><li>以太网 (IEEE802.3)</li><li>令牌环网 (IEEE802.5)</li><li>FDDI 网 (IEEE802.8)</li><li>ATM 网</li><li>无线局域网 (IEEE802.11)</li></ol><h4 id=\"mac子层和llc子层\"><a class=\"anchor\" href=\"#mac子层和llc子层\">#</a> MAC 子层和 LLC 子层</h4><p>IEEE802 标准所描述的局域网参考模型只对应 OSI 参考模型的<strong>数据链路层与物理层</strong>，它将数据链路层划分为<strong>逻辑链路层 LLC 子层</strong>和<strong>介质访问控制 MAC 子层</strong>。</p><ol><li>LLC 负责识别网络层协议，然后对他们进行封装。</li><li>MAC 子层的主要功能包括<strong>数据帧的封装 / 卸装</strong>，<strong>帧的寻址和识别</strong>，<strong>帧的接受与发送</strong>，链路的管理，帧的差错控制等。MAC 子层的存在屏蔽了不同物理链路种类的差异性。</li></ol><h4 id=\"以太网\"><a class=\"anchor\" href=\"#以太网\">#</a> 以太网</h4><p>指由 Xerox 公司创建并由 Xerox、Intel 和 DEC 公司联合开发的 &lt;font color=&quot;red&quot;&gt;<strong> 基带总线局域网规范</strong> &lt;/font&gt;，是当今现有局域网采用的最通用的通信协议标准。以太网络使用<strong> CSMA/CD</strong> 技术。</p><ol><li>造价低廉</li><li>是应用最广泛的局域网技术</li><li>比令牌环网、ATM 网便宜、简单</li><li>满足网络速率要求：10Mb/s-10Gb/s</li></ol><p>以太网标准：</p><ol><li>DIX Ethernet V2: 第一个局域网产品 (以太网) 规约。</li><li>IEEE802.3：IEEE802 委员会 802.3 工作组制定的第一个 IEEE 的以太网标准。(帧格式有一丢丢改动)</li></ol><h5 id=\"以太网提供无连接-不可靠的服务\"><a class=\"anchor\" href=\"#以太网提供无连接-不可靠的服务\">#</a> 以太网提供无连接、不可靠的服务</h5><ol><li>无连接：发送方和接收方之间无<strong>握手过程</strong></li><li>不可靠：不对发送方的数据帧<strong>编号</strong>，接收方不向发送方进行<strong>确认</strong>，差错帧直接丢弃，差错纠正由高层负责。</li></ol><p>&lt;font color=&quot;red&quot;&gt;<strong> 以太网只实现无差错接收，不实现可靠传输。</strong>&lt;/font&gt;</p><h5 id=\"以太网传输介质与拓扑结构的发展\"><a class=\"anchor\" href=\"#以太网传输介质与拓扑结构的发展\">#</a> 以太网传输介质与拓扑结构的发展</h5><p>以太网拓扑：逻辑上总线型，物理上星型。</p><h5 id=\"10bast-t以太网\"><a class=\"anchor\" href=\"#10bast-t以太网\">#</a> 10BAST-T 以太网</h5><ol><li>10BAST-T 是传送<strong>基带信号</strong>的双绞线以太网，T 表示采用双绞线，现 10BAST-T 采用的是<strong>无屏蔽双绞线</strong> (UTP), 传输速率是<strong> 10Mb</strong>/s。</li><li>物理上采用星型拓扑，逻辑上总线型拓扑，每段双绞线最长为 100M。</li><li>采用曼彻斯特编码。</li><li>采用 CSMA/CD 介质访问控制。</li></ol><h5 id=\"高速以太网\"><a class=\"anchor\" href=\"#高速以太网\">#</a> 高速以太网</h5><p>速度<strong>大于 100Mb/s</strong> 的以太网称为高速以太网。</p><ol><li><p>100BAST-T 以太网:</p><ol><li>在<strong>双绞线</strong>上传送<strong> 100Mb/s 基带信号</strong>的<strong>星型</strong>拓扑以太网，仍使用 IEEE802.3 的 CSMA/CD 协议。</li><li>支持全双工和半双工，可在全双工方式下工作而无冲突。</li></ol></li><li><p>吉比特以太网</p><ol><li>在<strong>光纤或者双绞线</strong>上传送<strong> 1Gb/s 信号</strong></li><li>支持全双工和半双工，可在全双工方式下工作而无冲突</li></ol></li><li><p>10 吉比特</p><ol><li>10 吉比特以太网在<strong>光纤</strong>上传送<strong> 10Gb/s 信号</strong>。</li></ol></li></ol><h5 id=\"以太网mac帧\"><a class=\"anchor\" href=\"#以太网mac帧\">#</a> 以太网 MAC 帧</h5><p>最常用的 MAC 帧是<strong>以太网 V2</strong> 的格式。</p><p>以太网 V2 与 IEEE802.3 的区别：</p><ol><li>第三个字段是长度 / 类型</li><li>当长度 / 类型字段值小于 0x600 时，数据字段必须装入 LLC 子层。</li></ol><h4 id=\"适配器和mac地址\"><a class=\"anchor\" href=\"#适配器和mac地址\">#</a> 适配器和 MAC 地址</h4><ol><li>计算机与外界有局域网的连接是通过<strong>通信适配器</strong>的。</li><li>在局域网中，硬件地址又称为物理地址，或<strong> MAC 地址</strong>（实际上是标识符）。</li><li>MAC 地址：每个适配器有一个全球唯一的 48 位二进制地址，前 24 位代表厂家 (由 IEEE 规定)，后 24 位厂家自己指定。常用 6 个十六进制数表示。</li></ol><h4 id=\"ieee-80211\"><a class=\"anchor\" href=\"#ieee-80211\">#</a> IEEE 802.11</h4><p>IEEE 802.11 是<strong>无线局域网</strong>通用的标准，它是由 IEEE 所定义的无线网络通信的标准。</p><h3 id=\"广域网\"><a class=\"anchor\" href=\"#广域网\">#</a> 广域网</h3><p>使用<strong>分组交换技术</strong>。</p><h4 id=\"ppp协议\"><a class=\"anchor\" href=\"#ppp协议\">#</a> PPP 协议</h4><p>点对点协议，目前使用最广泛的数据链路层协议，用户使用拨号电话接入因特网时一般都用 PPP 协议。</p><ol><li>font color=&quot;red&quot;&gt;<strong> 只支持全双工链路。</strong>&lt;/font&gt;</li></ol><p>ppp 协议应满足的要求：</p><ol><li>简单：对于链路层的帧，无需纠错，无需序号，无需流量控制</li><li>封装成帧</li><li>透明传输</li><li>多种网络层协议</li><li>多种类型链路</li><li>差错检测</li><li>检测连接状态</li><li>最大传送单元</li><li>网络层地址协商</li><li>数据压缩协商</li></ol><p>PPP 协议无需满足的要求：</p><ol><li>纠错</li><li>流量控制</li><li>序号</li><li>不支持多点线路</li></ol><p>PPP 协议组成部分</p><ol><li>一个将 IP 数据报封装到串行链路 (同步串行 / 异步串行) 的方法</li><li>链路控制协议 LCP：建立并维护数据链路连接。(<strong>身份验证</strong>)</li><li>网络控制协议 NCP：PPP 可支持多种网络层协议，每个不同的网络层协议都要一个相应地 NCP 来配置，为网络层协议建立和配置逻辑连接。</li></ol><h4 id=\"hdlc协议\"><a class=\"anchor\" href=\"#hdlc协议\">#</a> HDLC 协议</h4><p>高级数据链路控制协议，是一个在同步网上传输数据、<strong>面向比特</strong>的数据链路层协议。</p><ol><li>&lt;font color=&quot;red&quot;&gt;<strong> 采用全双工通信。</strong>&lt;/font&gt;</li><li>所有帧采用<strong> CRC 检验</strong>，对信息帧进行顺序<strong>编号</strong>，可防止漏收或重份，传输可靠性高。</li></ol><h5 id=\"hdlc的站\"><a class=\"anchor\" href=\"#hdlc的站\">#</a> HDLC 的站</h5><ol><li>主站</li><li>从站</li><li>复合站</li></ol><p>三种数据操作方式</p><ol><li>正常响应方式</li><li>异步平衡方式</li><li>异步响应方式</li></ol><p>HDLC 帧的类型：</p><ol><li>信息帧，用来传输数据信息</li><li>监督帧，用来流量控制盒差错控制</li><li>无编号帧，用来提供对链路的建立、拆除等多种控制功能。</li></ol><h4 id=\"ppp协议和hdlc协议\"><a class=\"anchor\" href=\"#ppp协议和hdlc协议\">#</a> PPP 协议和 HDLC 协议</h4><p>相同点：</p><ol><li>只支持全双工链路</li><li>都可以实现透明传输</li><li>都可以实现差错检测，但不纠正差错</li></ol><p>不同点：</p><ol><li>PPP 协议面向字节，HDLC 面向比特</li><li>PPP 协议不可靠，HDLC 协议可靠</li><li>PPP 协议无序号和确认机制，HDLC 协议有编号和确认机制</li><li>PPP 协议有 2B 的协议字段，HDLC 无</li></ol><h3 id=\"链路层设备\"><a class=\"anchor\" href=\"#链路层设备\">#</a> 链路层设备</h3><h4 id=\"网桥\"><a class=\"anchor\" href=\"#网桥\">#</a> 网桥</h4><p>网桥根据<strong> MAC 帧的目的地址</strong>对帧进行<strong>转发</strong>和<strong>过滤</strong>。</p><p>网桥优点：</p><ol><li>过滤通信量，增大吞吐量</li><li>扩大了物理范围</li><li>提高可靠性</li><li>可互连不同物理层、不同 MAC 子层和不同速率的以太网。</li></ol><h4 id=\"透明网桥源路由网桥\"><a class=\"anchor\" href=\"#透明网桥源路由网桥\">#</a> 透明网桥 &amp; 源路由网桥</h4><ol><li>透明网桥：指以太网上的站点并不知道所发送的帧将经过哪几个网桥，是一种即插即用设备 -- 自学习。</li><li>源路由网桥：在发送帧时，把详细的最佳路由信息 (路由最少 / 时间最短) 放在帧的首部中。方法：源站以广播方式向欲通信的目的站发送一个<strong>发现帧</strong>。</li></ol><h4 id=\"多接口网桥-以太网交换机\"><a class=\"anchor\" href=\"#多接口网桥-以太网交换机\">#</a> 多接口网桥 -- 以太网交换机</h4><p>独占媒体带宽</p><ol><li><p>直通式交换机</p><ol><li>查完目的地址 (6B) 就立刻转发。</li><li>延迟小，可靠性低，无法支持具有不同速率的端口的交换。</li></ol></li><li><p>存储转发式交换机 (常用)</p><ol><li>将帧放入高速缓存，并检查是否正确，正确则转发，错误则丢弃。</li><li><strong>延迟大，可靠性高</strong>，可以支持具有不同速率的端口的交换。</li></ol></li></ol><h2 id=\"应用\"><a class=\"anchor\" href=\"#应用\">#</a> 应用</h2>",
            "tags": [
                "考研",
                "计算机网络",
                "计算机网络",
                "考研"
            ]
        },
        {
            "id": "http://oreki.world/kaoyan/system/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "url": "http://oreki.world/kaoyan/system/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "title": "计算机操作系统概述",
            "date_published": "2021-04-12T16:01:14.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"操作系统的概念\"><a class=\"anchor\" href=\"#操作系统的概念\">#</a> 操作系统的概念</h2><ol><li>** 操作系统是系统资源的管理者。** 控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境。它是计算机系统中最基本的系统软件。</li><li><strong>操作系统向上层提供方便易用的服务。</strong></li><li><strong>最接近硬件的一层软件。</strong></li></ol><p>操作系统提供的功能：</p><ol><li>设备管理</li><li>存储器管理</li><li>处理机 (CPU) 管理</li><li>文件管理</li></ol><p>操作系统向上层提供的易用的服务:</p><ol><li>GUI: 图形化用户接口</li><li>命令接口<ol><li>联机命令接口 (交互式命令接口)</li><li>脱机命令接口 (批处理命令接口)</li></ol></li><li>程序接口：可以再程序中进行系统调用来使用程序接口。普通用户不能直接使用程序接口，只能通过程序代码间接使用。有一系列的系统调用组成。</li></ol><h3 id=\"操作系统的功能和目标\"><a class=\"anchor\" href=\"#操作系统的功能和目标\">#</a> 操作系统的功能和目标</h3><p>需要实现<strong>对硬件机器的拓展</strong>。&lt;br&gt;<br>没有任何软件支持的计算机称为<strong>裸机</strong>。在裸机上安装的操作系统，可以提供资源管理功能和方便用户的服务功能，将裸机改造成功能更强，使用更方便的机器。&lt;br&gt;<br>通常把覆盖了软件的机器称为<strong>扩充机器</strong>，又称之为<strong>虚拟机</strong>.</p><p>操作系统对硬件机器的扩展：&lt;br&gt;<br>将 CPU、内存、显示器、键盘灯硬件合理地组合起来，让各种硬件能够相互协调配合，实现更复杂的功能。</p>",
            "tags": [
                "考研",
                "操作系统",
                "计算机网络",
                "考研"
            ]
        },
        {
            "id": "http://oreki.world/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%92%8C%E5%80%BC%E5%9F%9F/",
            "url": "http://oreki.world/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%92%8C%E5%80%BC%E5%9F%9F/",
            "title": "三角函数的定义域和值域",
            "date_published": "2021-04-05T14:03:45.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"反三角函数的定义域和值域\"><a class=\"anchor\" href=\"#反三角函数的定义域和值域\">#</a> 反三角函数的定义域和值域</h3><h4 id=\"反正弦函数yarcsinx\"><a class=\"anchor\" href=\"#反正弦函数yarcsinx\">#</a> 反正弦函数 y=arcsinx，</h4><p>表示一个正弦值为 x 的角，该角的范围在 [-π/2，π/2] 区间内。&lt;br&gt;<br>定义域 [-1，1] ，值域 [-π/2，π/2]。&lt;br&gt;</p><h4 id=\"反余弦函数yarccosx\"><a class=\"anchor\" href=\"#反余弦函数yarccosx\">#</a> 反余弦函数 y=arccosx，</h4><p>表示一个余弦值为 x 的角，该角的范围在 [0，π] 区间内。&lt;br&gt;<br>定义域 [-1，1] ， 值域 [0，π]。&lt;br&gt;</p><h4 id=\"反正切函数yarctanx\"><a class=\"anchor\" href=\"#反正切函数yarctanx\">#</a> 反正切函数 y=arctanx，</h4><p>表示一个正切值为 x 的角，该角的范围在 (-π/2，π/2) 区间内。&lt;br&gt;<br>定义域 R，值域 (-π/2，π/2)。&lt;br&gt;</p><h4 id=\"反余切函数yarccotx\"><a class=\"anchor\" href=\"#反余切函数yarccotx\">#</a> 反余切函数 y=arccotx，</h4><p>表示一个余切值为 x 的角，该角的范围在 (0，π) 区间内。&lt;br&gt;<br>定义域 R，值域 (0，π)。&lt;br&gt;</p><h4 id=\"反正割函数yarcsecx\"><a class=\"anchor\" href=\"#反正割函数yarcsecx\">#</a> 反正割函数 y=arcsecx，</h4><p>表示一个正割值为 x 的角，该角的范围在 [0,π/2) U (π/2,π] 区间内。&lt;br&gt;<br>定义域 (-∞,-1] U [1,+∞), 值域 [0,π/2) U (π/2,π]。&lt;br&gt;</p><h4 id=\"反余割函数yarccscx\"><a class=\"anchor\" href=\"#反余割函数yarccscx\">#</a> 反余割函数 y=arccscx，</h4><p>表示一个余割值为 x 的角，该角的范围在 [-π/2,0) U (0,π/2] 区间内。&lt;br&gt;<br>定义域 (-∞,-1] U [1,+∞), 值域 [-π/2,0) U (0,π/2]。&lt;br&gt;</p>",
            "tags": []
        },
        {
            "id": "http://oreki.world/kaoyan/computer-composition/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "url": "http://oreki.world/kaoyan/computer-composition/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "title": "408计算机组成原理-计算机系统概述",
            "date_published": "2021-03-30T15:52:58.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"什么是计算机系统\"><a class=\"anchor\" href=\"#什么是计算机系统\">#</a> 什么是计算机系统</h2><p>计算机系统 = 硬件 + 软件</p><h3 id=\"软件\"><a class=\"anchor\" href=\"#软件\">#</a> 软件</h3><ol><li>系统软件：用来管理整个计算机系统<ol><li>操作系统</li><li>数据库管理系统</li><li>标准程序库</li><li>网络软件</li><li>语言处理程序</li><li>服务程序</li></ol></li><li>应用软件：按任务需要编制的各种程序</li></ol><h2 id=\"11-计算机发展历程\"><a class=\"anchor\" href=\"#11-计算机发展历程\">#</a> 1.1 计算机发展历程</h2><h3 id=\"计算机的四代变化\"><a class=\"anchor\" href=\"#计算机的四代变化\">#</a> 计算机的四代变化</h3><ol><li>1946-1957 电子管时代（语言：机器语言，内存：磁鼓、汞延迟线，外存：穿孔卡片、纸带）</li><li>1958-1964 晶体管时代（语言：面向过程的 FORTRAN，内存：磁芯存储器，外存：磁带，有了操作系统的雏形）</li><li>1965-1971 中小规模集成电路时代（高级语言迅速发展，有了分时操作系统，内存：半导体存储器，外存：磁带、磁盘）</li><li>1972 至今 超大规模集成电路时代（出现了微处理器 (cpu)，微型计算机）</li></ol><h3 id=\"计算机元件的更新换代\"><a class=\"anchor\" href=\"#计算机元件的更新换代\">#</a> 计算机元件的更新换代</h3><ol><li>摩尔定律。当价格不变时，集成电路上的晶体管数目约隔 18 个月便会增加一倍，性能也提升一倍。18 个月后同样的钱买到的 CPU，后者性能是前者的两倍。</li><li>半导体存储器发展。1970 年第一个半导体存储器由仙童半导体公司生产。半导体存储器到现在经历了 11 代发展。</li><li>微处理器。处理器中的 32 位，64 位是指计算机进行一次整数运算所能处理的二进制数据的位数。</li></ol><h3 id=\"计算机的分类和发展方向\"><a class=\"anchor\" href=\"#计算机的分类和发展方向\">#</a> 计算机的分类和发展方向</h3><p>两极分化：<br>一极是微信计算机向更微型化、网络化、高性能、多用途方向发展。&lt;br&gt;<br>另一极是巨型化向更巨型化、超高速、并行处理、智能化方向发展。</p><h3 id=\"冯诺依曼计算机的特点\"><a class=\"anchor\" href=\"#冯诺依曼计算机的特点\">#</a> 冯诺依曼计算机的特点</h3><ol><li>计算机由五大部件组成：运算器、储存器、控制器、输入设备、输出设备</li><li>指令和数据以同等地位存于存储器，并可按地址寻访</li><li>指令和数据用二进制表示</li><li>指令有操作码和地址码组成<br>5 . 指令在存储器内按顺序存放（<strong>存储程序</strong>）.exe 文件执行时先按顺序存放到存储器中，然后存储器一条条执行</li><li>机器以运算器为中心，输入输出设备与存储器间的数据传送通过运算器完成</li></ol><p>现代计算机：&lt;font color=&quot;red&quot;&gt;<strong> 以存储器为核心</strong> &lt;/font&gt;。CPU = 运算器 + 控制器。</p><p>在计算机系统中，<strong>软件和硬件在逻辑上是 &lt;font color=&quot;red&quot;&gt; 等效 &lt;/font &gt; 的</strong>。</p><h3 id=\"存储器\"><a class=\"anchor\" href=\"#存储器\">#</a> 存储器</h3><p>计算机的存储部件，用来存放数据和程序</p><p>存储器分为主存储器 (内存) 和辅存储器 (外存)。CPU 能够直接访问主存，辅存的信息比如调入主存，cpu 才能访问。</p><p>主存储器构成：</p><ol><li>存储体：用来存放数据，由一系列存储元件构成，用来存放二进制 0 或 1，数据在存储体内按地址存储。<ol><li>存储单元：每个存储单元存放一串二进制代码</li><li>存储字 (word)：存储单元中二进制代码的组合</li><li>存储字长：存储单元中二进制代码的位数</li><li>即存储二进制的电子元件，每个存储元件可存 1bt</li></ol></li><li>地址寄存器 (MAR) 存放访存地址，用于寻址，其位数对应存储单元的个数，如 MAR 有 10 位，则有 2^10=1024 个单元，为 1k</li><li>数据寄存器 (MDR) 用于暂存从存储体中读或写的信息，其位数代表存储字长。</li></ol><p>MAR 与 MDR 虽然是存储器的一部分，但在现代 CPU 中是存在于 CPU 中，高速缓存 (Cache) 也存在 CPU 中</p><h3 id=\"运算器\"><a class=\"anchor\" href=\"#运算器\">#</a> 运算器</h3><p>用于实现算术运算 (加减乘除)、逻辑运算 (与或非)。</p><p>基本组成</p><ol><li>ACC: 累加器，用来存放操作数，或运算结果</li><li>MQ：乘商寄存器，在乘、除运算时，用来存放操作数和运算结果</li><li>X：通用的操作数寄存器，用来存放操作数。</li><li>ALU：算术逻辑单元，通过内部复杂的电路实现算术运算、逻辑运算。</li></ol><h3 id=\"控制器\"><a class=\"anchor\" href=\"#控制器\">#</a> 控制器</h3><p>基本组成</p><ol><li>CU：控制单元，分析指令，给出控制信号</li><li>IR：指令寄存器，存放当前执行指令</li><li>PC：程序计数器，存放下一条指令地址，有自动加 1 功能</li></ol><p>完成一条指令：取指令 (PC--&gt;IR)---&gt; 分析指令 (CU)----&gt; 执行 (CU)</p><p><strong>CPU 区分指令和数据的依据: &lt;font color=&quot;red&quot;&gt; 指令周期的不同阶段 &lt;/font&gt;</strong></p><h3 id=\"计算机系统的层次结构\"><a class=\"anchor\" href=\"#计算机系统的层次结构\">#</a> 计算机系统的层次结构</h3><p>虚拟机器 M4 (高级机器语言：用编译程序翻译成汇编语言程序)---&gt; 虚拟机器 M3 (汇编语言机器：用汇编程序翻译成机器语言程序)--&gt; 虚拟机器 M2 (操作系统机器：向上提供 &quot;广义指令&quot;(系统调用))---&gt; 传统机器 M1 (用机器语言的机器：执行二进制机器指令)---&gt; 微程序机器 M0 (微指令系统：由硬件直接执行微指令)</p><p>M4,M3,M2 属于软件层次，M1,M0 属于硬件层次</p><p>计算机系统层次，<strong>&lt;font color=&quot;red&quot;&gt; 下层是上层的基础，上层是下层的扩展 &lt;/font&gt;</strong></p><p>编译程序：将高级语言编写的源程序<strong>全部语句一次全部翻译成机器语言程序</strong>，而后再执行机器语言程序 (只需要翻译一次)<br>解释程序：将源程序的一条语句翻译成对于机器语言的语句，并立即执行。紧接着再翻译下一句。(每次执行都要翻译)</p><h3 id=\"计算机工作的过程\"><a class=\"anchor\" href=\"#计算机工作的过程\">#</a> 计算机工作的过程</h3><ol><li>把程序和数据装入主存储器</li><li>将源程序换为可执行文件</li><li>从可执行文件的首地址开始逐条执行指令</li></ol><h3 id=\"什么是存储程序原理\"><a class=\"anchor\" href=\"#什么是存储程序原理\">#</a> 什么是存储程序原理</h3><p>存储程序是指将指令以代码的形式事先输入计算机主存储器，然后按其在存储器中的首地址执行程序的第一条指令，以后就按该程序的规定顺序执行其他指令，直至程序执行结束。</p><h2 id=\"13-计算机的主要性能指标\"><a class=\"anchor\" href=\"#13-计算机的主要性能指标\">#</a> 1.3 计算机的主要性能指标</h2><h3 id=\"存储器的性能指标\"><a class=\"anchor\" href=\"#存储器的性能指标\">#</a> 存储器的性能指标</h3><p>MAR 位数反应存储单元的个数，MDR 位数 = 存储字长 = 每个存储单元的大小。<br>总容量 = 存储单元个数 x 存储字长 bit = 存储单元个 = 数存储字长 x 存储字长 / 8 Byte</p><h3 id=\"cpu的性能指标\"><a class=\"anchor\" href=\"#cpu的性能指标\">#</a> CPU 的性能指标</h3><ol><li>CPU 主频: CPU 内数字脉冲信号震荡的频率。每秒内 CPU 数字脉冲信号震荡的次数 (单位：HZ)。CPU 主频 = 1 / CPU 时钟周期。</li><li>CPU 时钟周期：每个 CPU 脉冲的时间 (单位：微妙、纳秒)。</li><li>CPI：执行一条指令所需要的时钟周期数。</li><li>IPS: 每秒执行多少条指令。IPS= 主频 / 平均 CPI<ol><li>MIPS，即每秒执行百万条指令。</li></ol></li><li>FLOPS：每秒执行多少次浮点运算。<ol><li>MFLOPS</li><li>GFLOPS</li><li>TFLOPS<br>&lt;font color=&quot;red&quot;&gt;<strong> 执行一条指令的耗时 = CPI * CPU 时钟周期</strong> &lt;/font&gt;<br>CPU 执行时间 = CPU 时钟周期数 / 主频 = (指令条数 * CPI)/ 主频</li></ol></li></ol><h3 id=\"系统整体性能的指标\"><a class=\"anchor\" href=\"#系统整体性能的指标\">#</a> 系统整体性能的指标</h3><h4 id=\"数据通路带宽\"><a class=\"anchor\" href=\"#数据通路带宽\">#</a> 数据通路带宽</h4><p>数据总线一次所能并行传送信息的位数（各硬件部件通过数据总线传输数据）</p><h4 id=\"吞吐量\"><a class=\"anchor\" href=\"#吞吐量\">#</a> 吞吐量</h4><p>指系统在单位时间内处理请求的数量。</p><h4 id=\"响应时间\"><a class=\"anchor\" href=\"#响应时间\">#</a> 响应时间</h4><p>指从用户向计算机发送一个请求，该系统对该请求作出响应并获得所需结果的等待时间。</p><h4 id=\"基准程序跑分软件\"><a class=\"anchor\" href=\"#基准程序跑分软件\">#</a> 基准程序 (跑分软件)</h4><p>是用来测量计算机处理速度的一种实用程序，以便于被测量的计算机性能可以与运行相同程序的其它计算机性能进行比较。</p><h3 id=\"机器字长\"><a class=\"anchor\" href=\"#机器字长\">#</a> 机器字长</h3><p>指计算机进行一次整数运算所能处理的二进制数据的位数。机器字长一般等于内部寄存器的大小。</p><h2 id=\"思考问题\"><a class=\"anchor\" href=\"#思考问题\">#</a> 思考问题</h2><h3 id=\"主频高的cpu一定比主频低的cpu快吗\"><a class=\"anchor\" href=\"#主频高的cpu一定比主频低的cpu快吗\">#</a> 主频高的 CPU 一定比主频低的 CPU 快吗？</h3><p>不一定。还要看 CPI 和指令系统。</p>",
            "tags": [
                "考研",
                "计算机组成",
                "考研",
                "计算机组成"
            ]
        },
        {
            "id": "http://oreki.world/kaoyan/internet/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%89%A9%E7%90%86%E5%B1%82/",
            "url": "http://oreki.world/kaoyan/internet/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%89%A9%E7%90%86%E5%B1%82/",
            "title": "408计算机网络-物理层",
            "date_published": "2021-03-28T11:17:07.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"通信基础\"><a class=\"anchor\" href=\"#通信基础\">#</a> 通信基础</h2><h3 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h3><p>物理层解决如何 &lt;font color=Red&gt;<strong> 在各种计算机的传输媒体上传输数据比特流</strong> &lt;/font&gt;，而不是指 &lt; font color=Red&gt;<strong> 具体的传输媒体</strong> &lt;/font&gt;。</p><p>物理层主要任务：确定与传输媒体接口有关的一些特性 ——&gt; 定义标准</p><ol><li>机械特性。定义物理连接的特性，规定物理连接时采用的规格，接口形状，引线数目，引脚数量和排列情况。</li><li>电气特性。规定传输二进制位时，线路上信号的电压范围、阻抗匹配、传输速率和距离限制等。</li><li>功能特性。指明某条线上出现的某一电平表示何种意义，接口部件的信号线用途。</li><li>规程特性。定义各条物理线路的工作规程和时序关系。</li></ol><h4 id=\"数据通信相关术语\"><a class=\"anchor\" href=\"#数据通信相关术语\">#</a> 数据通信相关术语</h4><ol><li>数据 data：传送信息的实体，通常是有意义的符号序列。数据通信指在不同计算机之间传输表示信息的二进制数 0、1 序列的过程。</li><li>信号：数据的电气 / 电磁的表现，是数据在传输过程中的存在形式。<ol><li>数字信号 / 离散信号：代表消息的参数的取值是离散的。</li><li>模拟信号 / 连续信号：代表消息的参数的取值是连续的。</li></ol></li><li>信源：产生和发送数据的源头。</li><li>信宿：接受数据的终点。</li><li>信道：信号的传输媒介。<ol><li>按传输信号分：模拟信道 (传送模拟信号) 数字信号 (传送数字信号)</li><li>按传输介质分：无线信道 有线信道</li></ol></li></ol><h4 id=\"三种通信方式\"><a class=\"anchor\" href=\"#三种通信方式\">#</a> 三种通信方式</h4><ol><li>单工</li><li>半双工</li><li>全双工</li></ol><h4 id=\"数据传输方式\"><a class=\"anchor\" href=\"#数据传输方式\">#</a> 数据传输方式</h4><ol><li>串行传输 -- 将表示一个字符的 8 位二进制数按由低位到高位的顺序依次发送</li><li>并行传输 -- 将一个字符的 8 位二进制数同时通过 8 条信道发送</li></ol><h4 id=\"同步传输异步传输\"><a class=\"anchor\" href=\"#同步传输异步传输\">#</a> 同步传输 &amp; 异步传输</h4><ol><li>同步传输 --&gt; 在同步传输的模式下，数据的传送是以一个数据区块为单位，因此同步传输又称为区块传输。在传输数据时，需先送出一个或者多个同步字符，再送出整批的数据。</li><li>异步传输</li></ol><h4 id=\"码元\"><a class=\"anchor\" href=\"#码元\">#</a> 码元</h4><p>是指用一个固定时长的信号波形（数字脉冲）。是数字信号中数字信号的计量单位。当码元的离散状态由 M 个时，此时码元为 M 进制码元。1 码元可以携带多个比特的信息量。<br>K 进制码元 ---4 进制码元 ——&gt; 码元的离散状态由 4 个 ——&gt;4 种高低不同的信号波形 00、01、10、11</p><h4 id=\"速率\"><a class=\"anchor\" href=\"#速率\">#</a> 速率</h4><p>也叫数据率，指数据的传输速率。可以用码元传输速率和信息传输速率表示。</p><ol><li>码元传输速率：表示单位时间内数字通信系统所传输的码元个数</li></ol><h4 id=\"带宽\"><a class=\"anchor\" href=\"#带宽\">#</a> 带宽</h4><ol><li>在模拟信号系统中，高频与低频之间的差值就是系统的通频带宽，单位是 HZ</li><li>在数字设备中，表示单位时间内从网络的某一点到另一点所能通过的最高数据率 / 单位时间内通过链路的数量，单位是比特每秒</li></ol><h3 id=\"两个公式只有在这两个公式这带宽才用hz\"><a class=\"anchor\" href=\"#两个公式只有在这两个公式这带宽才用hz\">#</a> 两个公式（只有在这两个公式这带宽才用 HZ）</h3><h4 id=\"失真\"><a class=\"anchor\" href=\"#失真\">#</a> 失真</h4><p>影响失真程度的因素：</p><ol><li>码元传输速率</li><li>信号传输距离</li><li>噪声干扰</li><li>传输媒体质量</li></ol><p>失真的一种现象 -- 码间串扰 &lt;br&gt;<br>接收端接收到的信号波形失去了码元之间清晰界限的现象</p><h4 id=\"奈氏准则奈奎斯特定理\"><a class=\"anchor\" href=\"#奈氏准则奈奎斯特定理\">#</a> 奈氏准则（奈奎斯特定理）</h4><p>在理想低通（无噪声，带宽受限）条件下，为了避免码间串扰。极限码元传输速率为 2WBaud，W 是信道带宽，单位是 HZ。&lt;br&gt;<br>奈氏准则求极限数据率，理想低通信道下的极限数据传速率 = 2Wlog2V</p><p>根据奈氏准则得出结论：</p><ol><li>在任何信道中，码元传输的速率是有上限的。若传输速率超过此上限。就会出现严重的码间串扰问题，是接收端对码元的完全正确识别成为不可能。</li><li>信道的频带越宽，就可以用更高的速率进行码元的有效传输</li><li>奈氏准则给出了码元传输速率的限制，但并没有对信息传输速率给出限制</li><li>由于码元的传输速率受奈氏准则的制约，所以要提高数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量。这就需要采用多元制的调制方法。</li></ol><h4 id=\"香农定理\"><a class=\"anchor\" href=\"#香农定理\">#</a> 香农定理</h4><p>在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。&lt;br&gt;<br>如果题目中给出的信噪比带有单位 dB，则需要先求 S/N：&lt;br&gt;<br>信噪比 (dB) = 10log10 (S/N) &lt;br&gt;<br>信道的极限数据传输速率 = Wlog2 (1+S/N)&lt;br&gt;</p><p>根据香农定理得出结论:</p><ol><li>信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高</li><li>对一定的传输带宽和一定的信噪比，信息传输速率的上限就确定了</li><li>只要信息的传输速率低于信道的极限传输速率，就一定能找到某种方法来实现无差错的传输</li><li>香农定理得出的为极限信息传输速率，实际信道能达到的传输速率要比它低不少</li></ol><h3 id=\"数据交换方式\"><a class=\"anchor\" href=\"#数据交换方式\">#</a> 数据交换方式</h3><h4 id=\"电路交换\"><a class=\"anchor\" href=\"#电路交换\">#</a> 电路交换</h4><p>电路交换原理：在数据传输期间，源节点与目的节点之间有一条由中间节点构成的专用物理连接线路，在数据传输结束之前，这条线路一直保持 &lt;br&gt;<br>电路交换的阶段：建立连接 (呼叫 / 电路建立) --&gt; 通信 (数据传输) --&gt; 释放连接 (拆除电路)&lt;br&gt;<br>特点：独占资源。适用于远程批处理信息传输或系统间实时性要求高的大量数据传输的情况。&lt;br&gt;</p><h4 id=\"报文交换\"><a class=\"anchor\" href=\"#报文交换\">#</a> 报文交换</h4><p>报文：是网络中交换与传输的数据单元，即站点一次性要送的数据块。&lt;br&gt;<br>报文交换的原理：无需在两个站点之间建立一条专用通路，其数据传输的单位是报文，传送过程采用存储转发的方式。&lt;br&gt;</p><h4 id=\"分组交换\"><a class=\"anchor\" href=\"#分组交换\">#</a> 分组交换</h4><p>分组：大多数计算机网络都不能连续地传送任意长的数据，所以实际上网络系统把数据分割成小块，然后逐块地发送，这种小块称作分组 (packet)&lt;br&gt;<br>分组交换原理：分组交换与报文交换工作方式相同，都采用存储转发。形式上差别，分组交换网中要限制所传输的数据单位的长度，一般选 128B。&lt;br&gt;</p><ol><li>数据报方式<ol><li>数据报方式为网络层提供无连接服务。发送方可随时发送分组，网络中的节点可随时接收分组。(无连接服务：不事先为分组的传输确定传输路径，每个分组独立确定传输路径)</li><li>同一报文的不同分组达到目的结点时可能发生乱序、重复与丢失。</li><li>每个分组在传输过程中都必须携带源地址和目的地址，以及分组号</li><li>分组在交换结点存储转发时，需要排队等候处理，这会带来一定的时延。当通过交换结点的通信量较大或网络发送拥塞时，这种时延会大大增加，交换结点还可能根绝情况丢弃部分分组。</li><li>网络具有冗余路径，当某一交换结点或一段链路出现故障时，可相应地更新转发表，寻找另一条路径转发分组，对故障的适应能力强，适用于突发性通信，不适于长报文，会话式通信。</li></ol></li><li>虚电路方式<br>虚电路将数据报方式和电路交换方式结合。<br>一条源主机到目的主机类似于电路的路径 (逻辑连接)，路径上所有结点都要维持这条虚电路的建立，都维持一张虚电路表。<ol><li>虚电路方式为网络层提供连接服务。源节点和目的结点之间建立一条逻辑连接，而非实际物理连接。(连接服务：首先为分组的传输确定传输路径，然后沿该路径传输系列分组，传输结束后拆除连接)</li><li>一次通信的所有分组都通过虚电路顺序传送，分组不需要携带源地址<br>目的地址等信息，同一报文的不同分组到达目的结点时不会乱序、重复和丢失。</li><li>分组通过虚电路上的每个节点时，节点只进行差错检测，不需要路由选择。</li><li>每个节点可能与多个节点之间建立虚电路，每条虚电路支持特定两个端系统间的数据传输，可以对两个数据端点的流量进行控制。两个端系统之间也可以有多条虚电路为不同的进程服务。</li><li>致命弱点：当网络中的某个节点或者某条链路出故障而彻底失效时，则所有经过该节点或者该链路的虚电路将遭到破坏</li></ol></li></ol><h2 id=\"编码与调制\"><a class=\"anchor\" href=\"#编码与调制\">#</a> 编码与调制</h2><ol><li>基带信号 --&gt; 将数字信号 1 和 0 直接用两种不同的电压表示，再送到数字信道上去传输 (基带传输)</li><li>宽带信号 --&gt; 将基带信号进行调制后形成的频分复用模拟信号，再传送到模拟信道上去传输 (宽带传输)</li></ol><p>再传输距离较近时，计算机网络采用基带传输方式。在距离较远时，计算机网络采用宽带传输方式。</p><p>数字数据 --（数字发送器）-&gt; 数字信号 编码 &lt;br&gt;<br>数字数据 --（调制器）-&gt; 模拟信号 调制 &lt;br&gt;</p><p>模拟数据 --（PCM 编码器）-&gt; 数字信号 编码 &lt;br&gt;<br>模拟数据 --（放大器调制器）-&gt; 模拟信号 调制 &lt;br&gt;</p><p>数字数据编码为数字信号</p><ol><li>非归零编码 (NRZ)</li><li>曼彻斯特编码 --&gt; 一个码元中信号变化 2 次</li><li>差分曼彻斯特编码</li><li>归零编码 (RZ)</li><li>反向不归零编码 (NRZI)</li><li>4B/5B 编码</li></ol><p>数字数据调制为模拟信号</p><p>模拟数据编码为数字信号</p><h2 id=\"传输介质设备\"><a class=\"anchor\" href=\"#传输介质设备\">#</a> 传输介质 &amp; 设备</h2><h3 id=\"传输介质\"><a class=\"anchor\" href=\"#传输介质\">#</a> 传输介质</h3><h4 id=\"导向传输介质\"><a class=\"anchor\" href=\"#导向传输介质\">#</a> 导向传输介质</h4><p>电磁被导向沿着固体媒介 (铜线 / 光纤) 传播。&lt;br&gt;</p><ol><li><p>双绞线。最古老，最常用的传输介质，由两根采用一定规则并排绞合的、相互绝缘的铜导线组成。</p><ol><li>屏蔽双绞线 (STP)</li><li>非屏蔽双绞线 (UTP)</li></ol></li><li><p>同轴电缆</p><ol><li>基带同轴电缆，传送基带数字信号</li><li>宽带同轴电缆，传送宽带信号</li></ol></li><li><p>光纤</p><ol><li><p>多模光纤<br>定义：有多种传输光信号模式的光纤<br>光源：发光二极管<br>易失真，适合近距离传输</p></li><li><p>单模光纤<br>定义：一种在横向模式直接传输光信号的光纤<br>光源：定向性很好的激光二极管<br>特点：衰耗小，适合远距离传输</p></li></ol><p>光纤的特点：&lt;br&gt;</p><ol><li>传输损耗小</li><li>抗雷电和电磁干扰性能好</li><li>保密性好，不易被窃听和截取数据</li><li>体积小、重量轻</li></ol></li></ol><h4 id=\"非导向传输介质\"><a class=\"anchor\" href=\"#非导向传输介质\">#</a> 非导向传输介质</h4><p>自由空间，介质可以是空气、真空、海水等。</p><ol><li><p>无线电波：信号向所有方向传播。较强穿透能力，可传远距离，广泛用于通信领域。</p></li><li><p>微波：信号固定方向传播。微波通信频率较高、频段范围宽，因此数据率很高。</p><ol><li>地面微波接力通信</li><li>卫星通信</li></ol></li><li><p>红外线、激光：信号固定方向传播。把要传输的信号分别转换为各自的信号格式，即红外光信号和激光信号，再在空气中传播。</p></li></ol><h3 id=\"物理层设备\"><a class=\"anchor\" href=\"#物理层设备\">#</a> 物理层设备</h3><h4 id=\"中继器\"><a class=\"anchor\" href=\"#中继器\">#</a> 中继器</h4><p>诞生原因：由于存在损耗，在线路上传输的信号功率会逐渐衰减，衰减到一定程度失真，因此会导致接收错误。&lt;br&gt;<br>中继器的功能：对信号进行再生和还原，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度。&lt;br&gt;<br>中继器的两端：</p><ol><li>两端的网络部分是网段，而不是子网，适用于完全相同的两类网络互连。</li><li>两端可连接相同媒体，也可以连接不同媒体。</li><li>中继器两端的网段一定要是同一个协议，中继器不会存储转发。</li></ol><h4 id=\"集线器多口中继器\"><a class=\"anchor\" href=\"#集线器多口中继器\">#</a> 集线器 (多口中继器)</h4><p>集线器的功能：对信号进行再生放大转发，对衰减信号放大，接着转发到其他所有处于工作状态的端口上，以增加信号传输的距离，延长网络的长度。不具备信号的定向传送能力，是一个共享式设备。</p><ol><li>集线器不能分割冲突域</li><li>连在集线器上的工作主机平分带宽</li></ol>",
            "tags": [
                "考研",
                "计算机网络",
                "计算机网络",
                "考研"
            ]
        },
        {
            "id": "http://oreki.world/kaoyan/internet/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB/",
            "url": "http://oreki.world/kaoyan/internet/408%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB/",
            "title": "408计算机网络-计算机网络体系",
            "date_published": "2021-03-28T11:16:54.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"计算机网络\"><a class=\"anchor\" href=\"#计算机网络\">#</a> 计算机网络</h3><p>是一个将分散的、具有独立功能的计算机系统，通过通信设备和线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。</p><p>计算机网络是互连得、自治的计算机集合</p><ol><li>互连 - 通过通信链路互联互通</li><li>自治 - 无主从关系</li></ol><p>计算机网络的功能</p><ol><li>数据通信</li><li>资源共享</li><li>分布式处理</li><li>提高可靠性</li><li>负载均衡</li></ol><h3 id=\"计算机网络的发展\"><a class=\"anchor\" href=\"#计算机网络的发展\">#</a> 计算机网络的发展</h3><h4 id=\"第一阶段\"><a class=\"anchor\" href=\"#第一阶段\">#</a> 第一阶段</h4><p>ARPAnet 阿帕网 --&gt; internet (interconnected netword) 互联网 --&gt; Internet 因特网</p><ol><li>网络把许多的计算机连接在一起</li><li>互联网把许多的网络连接在一起</li><li>因特网是世界上最大的互联网</li></ol><h4 id=\"第二阶段-三级结构\"><a class=\"anchor\" href=\"#第二阶段-三级结构\">#</a> 第二阶段 - 三级结构</h4><h4 id=\"第三阶段-多层次isp结构\"><a class=\"anchor\" href=\"#第三阶段-多层次isp结构\">#</a> 第三阶段 - 多层次 ISP 结构</h4><h3 id=\"计算机网络的组成\"><a class=\"anchor\" href=\"#计算机网络的组成\">#</a> 计算机网络的组成</h3><p>组成部分：硬件、软件、协议（一系列规则和约定的集合）</p><p>工作方式</p><ol><li>边缘部分</li><li>核心部分</li></ol><p>功能组成<br>数据通信和资源共享</p><ol><li>通信子网：实现数据通信</li><li>资源子网：实现资源共享 / 数据处理</li></ol><h3 id=\"计算机网络的分类\"><a class=\"anchor\" href=\"#计算机网络的分类\">#</a> 计算机网络的分类</h3><p>按范围分布</p><ol><li>广域网 WAN--&gt; 交换技术</li><li>城域网 MAN</li><li>局域网 LAN--&gt; 广播技术</li><li>个人区域网 PAN</li></ol><p>按使用者分</p><ol><li>公用网</li><li>专用网</li></ol><p>按交换技术分</p><ol><li>电路交换</li><li>报文交换</li><li>分组交换</li></ol><p>按拓扑结构分</p><ol><li>总线型</li><li>星型</li><li>环型</li><li>网状型 -- 常用于广域网</li></ol><p>按传输技术分</p><ol><li>广播式网络 -- 共享公共通信信道</li><li>点对点网络 -- 使用分组存储转发和路由选择机制</li></ol><h3 id=\"计算机网络的标准化工作\"><a class=\"anchor\" href=\"#计算机网络的标准化工作\">#</a> 计算机网络的标准化工作</h3><p>标准的分类</p><ol><li>法定标准：osi</li><li>事实标准: tcp/ip</li></ol><h3 id=\"标准化工作的相关组织\"><a class=\"anchor\" href=\"#标准化工作的相关组织\">#</a> 标准化工作的相关组织</h3><p>国际标准化组织 ISO-- 制定了 OSI 参考模型、HDLC 协议<br>国际电信联盟 ITU-- 制定通信规则<br>国际电气电子工程师协会 IEEE-- 学术机构、IEEE802 系列标准、5G<br>internet 工程任务组 IETF-- 负责因特网相关标准的制定</p><h3 id=\"计算机网络性能指标\"><a class=\"anchor\" href=\"#计算机网络性能指标\">#</a> 计算机网络性能指标</h3><h4 id=\"速率\"><a class=\"anchor\" href=\"#速率\">#</a> 速率</h4><p>即数据率或者称数据传输率或比特率</p><h4 id=\"比特\"><a class=\"anchor\" href=\"#比特\">#</a> 比特</h4><p>表现形式：1/0 单位：位</p><p>连接在计算机网络上的主机在数字信道上传送数据位数的速率单位是 b/s, kb/s, Mb/s, Gb/s, Tb/s</p><h4 id=\"存储容量\"><a class=\"anchor\" href=\"#存储容量\">#</a> 存储容量</h4><p>1Byte (字节)=8bit (比特)</p><h4 id=\"带宽\"><a class=\"anchor\" href=\"#带宽\">#</a> 带宽</h4><p>计算机网络中，带宽用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的 “最高数据率”。单位是 b/s, kb/s, Mb/s, Gb/s, Tb/s</p><h4 id=\"吞吐量\"><a class=\"anchor\" href=\"#吞吐量\">#</a> 吞吐量</h4><p>表示在单位时间内通过某个网络 (或信道、接口) 的数据量。单位是 b/s, kb/s, Mb/s 等<br>吞吐量受网络的带宽限制</p><h4 id=\"时延\"><a class=\"anchor\" href=\"#时延\">#</a> 时延</h4><p>指数据从网络的一端传送到另一端所需的时间。也叫延迟，单位是 s</p><ol><li>发送时延：从发送分组的第一个比特算起，到该分组的最后一个比特发送完毕所需的时间。发送时延 = 数据长度 / 信道带宽</li><li>传播时延：取决于电磁波传播速度和链路长度。传播时延 = 信道长度 / 电磁波在信道上的传播速率</li><li>排队时延</li><li>处理时延</li></ol><p>时延带宽积<br>时延带宽积 = 传播时延 * 带宽<br>以比特位单位的链路长度，即 “某段链路现在有多少比特”</p><h4 id=\"往返使用rtt\"><a class=\"anchor\" href=\"#往返使用rtt\">#</a> 往返使用 RTT</h4><p>从发送方发送数据开始，到发送方收到接收方的确认，总共经历的时延。<br>RTT 越大，在收到确认之前，可以发送的数据越多。&lt;br&gt;<br>RTT 包括</p><ol><li>往返传播时延 = 传播时延 * 2</li><li>末端处理时间</li></ol><p>利用率</p><ol><li>信道利用率：有数据通过的时间 /（有 + 无）数据通过时间</li><li>网络利用率：信道利用率加权平均值</li></ol><h3 id=\"综合概念\"><a class=\"anchor\" href=\"#综合概念\">#</a> 综合概念</h3><ol><li>网络体系结构是从功能上描述计算机网络结构 &lt;br&gt;</li><li>计算机网络体系结构简称网络体系结构是分层结构 &lt;br&gt;</li><li>每层遵循某个网络以完成本层功能 &lt;br&gt;</li><li>计算机网络体系结构是计算机网络的各层及其协议的集合 &lt;br&gt;</li><li>第 N 层在向 N+1 层提供服务时，此服务不仅包含第 N 层本身的功能，还包含由下层服务提供的功能 &lt;br&gt;</li><li>仅仅在相邻层有接口，且所提供的服务的具体实现细节对上一层完全屏蔽 &lt;br&gt;</li><li>体系结构是抽象的，而实现是指能运行的一些软件和硬件 &lt;br&gt;</li></ol><p>协议与服务有何区别？</p><ol><li>协议是水平的，即协议是控制两个对等实体之间通信的规则。服务是垂直的。即服务室由下层通过层间接口向上层提供。</li><li></li></ol>",
            "tags": [
                "考研",
                "计算机网络",
                "计算机网络",
                "考研"
            ]
        },
        {
            "id": "http://oreki.world/interview/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/",
            "url": "http://oreki.world/interview/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/",
            "title": "进程线程协程",
            "date_published": "2020-10-24T08:54:17.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"进程\"><a class=\"anchor\" href=\"#进程\">#</a> 进程</h3><p>操作系统提供的抽象概念，是系统进行资源分配和调度的基本单位。也可以说是实体，程序的实体。程序本身是没有生命周期的，它只是存在磁盘上的一些指令，程序一旦运行就是进程。</p><ol><li>每一个进程都有自己的地址空间，一般情况下，包括文本区域、数据区域和堆栈。文本区域存储代码、数据区域分配内存、堆栈区域存储调用的指令和本地变量。</li><li>进程是一个 “执行中的程序”。</li></ol><h3 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h3><p>轻量级进程，是程序执行流的最小单元。是程序的实际执行者。</p><ol><li>线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。</li><li>一个进程里面有多个线程</li><li>每一个程序都至少有一个线程，若程序只有一个线程，那就是程序本身。</li><li>线程拥有自己的栈空间。</li></ol><p>线程也有就绪、阻塞和运行三种基本状态。</p><ol><li>就绪状态是指线程具备运行的所有条件，逻辑上可以运行，在等待处理机；</li><li>运行状态是指线程占有处理机正在运行；</li><li>阻塞状态是指线程在等待一个事件（如某个信号量），逻辑上不可执行。</li></ol><h3 id=\"协程\"><a class=\"anchor\" href=\"#协程\">#</a> 协程</h3><p>需要讲回线程<br>线程有两种类型</p><ol><li>一种是由内核来管理和调度。</li><li>另外一种线程，他的调度是由程序员自己写程序来管理的，对内核来说不可见。这种线程叫做『用户空间线程』。</li></ol><p>协程可以理解就是一种用户空间线程。</p><ol><li>协同，因为是由程序员自己写的调度策略，其通过协作而不是抢占来进行切换</li><li>在用户态完成创建，切换和销毁</li></ol>",
            "tags": [
                "面试",
                "操作系统"
            ]
        },
        {
            "id": "http://oreki.world/PyQt%E7%9A%84Led%E6%8E%A7%E4%BB%B6%E6%98%BE%E7%A4%BA%E5%BA%93/",
            "url": "http://oreki.world/PyQt%E7%9A%84Led%E6%8E%A7%E4%BB%B6%E6%98%BE%E7%A4%BA%E5%BA%93/",
            "title": "PyQt的Led控件显示库",
            "date_published": "2020-10-16T06:30:09.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"控件说明\"><a class=\"anchor\" href=\"#控件说明\">#</a> 控件说明</h3><p>在 Github 上，偶然发现了一个基于 PyQt5 的第三方 Led 指示灯控件库，使用起来非常方便，控件外观也比较漂亮，更难能可贵的是作者源代码写得比较简洁，仅仅才约 200 行左右，可以作为一个在 PyQt 中写自定义控件方法的非常好的学习例子。这个控件具有以下特点：</p><ol><li>提供了 3 种外形可供选择，分别为：'capsule', 'circle', 'rectangle' 等</li><li>提供了 7 种颜色可供选择，分别为：'blue', 'green', 'orange', 'purple', 'red', 'yellow' 等</li></ol><h3 id=\"安装使用\"><a class=\"anchor\" href=\"#安装使用\">#</a> 安装使用</h3><pre><code>pip install pyqt-led\n</code></pre><p>在代码中使用时，只需使用以下语句导入该库的 LED 类即可：</p><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pyqt_led <span class=\"token keyword\">import</span> led</pre></td></tr></table></figure><p>在该库中，提供了几个主要的方法函数，包括 set_on_color、set_off_color、set_shape、turn_on、turn_off 等函数，分别设置 Led 的开 / 关颜色、形状及设置开、关状态等。</p><h3 id=\"使用案例\"><a class=\"anchor\" href=\"#使用案例\">#</a> 使用案例</h3><pre><code class=\"language-pythonython\">import sys\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtCore import *\nimport numpy as np\nfrom pyqt_led import Led\n\nclass Demo(QWidget):\n    def __init__(self, parent=None):\n        QWidget.__init__(self, parent)\n        self._shape = np.array(['capsule', 'circle', 'rectangle'])\n        self._color = np.array(['blue', 'green', 'orange', 'purple', 'red',\n                                'yellow'])\n        self._layout = QGridLayout(self)\n        self._create_leds()\n        self._arrange_leds()\n        self.resize(400, 200)\n        self.setWindowTitle('pyqt-led Demo')\n\n    def keyPressEvent(self, e):\n        if e.key() == Qt.Key_Escape:\n            self.close()\n\n    def _create_leds(self):\n        for s in self._shape:\n            for c in self._color:\n                exec('self._{}_{} = Led(self, on_color=Led.{}, shape=Led.{}, build=&quot;debug&quot;)'\n                     .format(s, c, c, s))\n                exec('self._{}_{}.setFocusPolicy(Qt.NoFocus)'.format(s, c))\n                exec('self._{}_{}.turn_on(True)'.format(s, c))\n\n    def _arrange_leds(self):\n        for r in range(3):\n            for c in range(6):\n                exec('self._layout.addWidget(self._{}_{}, {}, {}, 1, 1, \\\n                      Qt.AlignCenter)'\n                     .format(self._shape[r], self._color[c], r, c))\n\napp = QApplication(sys.argv)\ndemo = Demo()\ndemo.show()\nsys.exit(app.exec_())\n</code></pre><p>运行这个程序后，即可出现本文开头所示的在一个窗口上显示了不同形状、不同颜色的 Led 的窗口。默认运行时显示的为全亮状态，当设置为全灭状态时，如下图所示：</p><p>在代码中，Led 类实例化时，其构造函数原型如下所示：</p><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Led<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> on_color<span class=\"token operator\">=</span>green<span class=\"token punctuation\">,</span> off_color<span class=\"token operator\">=</span>black<span class=\"token punctuation\">,</span> shape<span class=\"token operator\">=</span>rectangle<span class=\"token punctuation\">,</span> build<span class=\"token operator\">=</span><span class=\"token string\">'release'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>可传入父窗口、初始的亮颜色、灭颜色、形状及状态参数。</p><p>对于需要在程序开发中使用指示灯的情况，如显示各种程序的运行状态等，应该说这是一个比较实用的库了。当然，由于源代码比较简单，你也可以在其基础上进一步修改订制，比如添加其它形状、颜色等选项设置，以满足自己的项目使用要求。</p>",
            "tags": [
                "Python",
                "Pyqt5",
                "Python"
            ]
        },
        {
            "id": "http://oreki.world/pyqt5%E5%BC%B9%E5%87%BA%E7%AA%97%E5%8F%A3%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B%E5%A4%A7%E5%85%A8/",
            "url": "http://oreki.world/pyqt5%E5%BC%B9%E5%87%BA%E7%AA%97%E5%8F%A3%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B%E5%A4%A7%E5%85%A8/",
            "title": "pyqt5弹出窗口代码实例大全",
            "date_published": "2020-10-15T07:58:05.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"pyqt5弹出窗口代码大全\"><a class=\"anchor\" href=\"#pyqt5弹出窗口代码大全\">#</a> PyQT5 弹出窗口代码大全</h3><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtWidgets <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtCore <span class=\"token keyword\">import</span> Qt<span class=\"token punctuation\">,</span> pyqtSignal<span class=\"token punctuation\">,</span> QTimer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWindow</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'PyQt5 弹出窗口（框）大全'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\"># 全局布局（注意参数 self）</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        wl <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\"># 局部布局</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        h1 <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输入框</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        h2 <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 消息窗口</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        h3 <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 文件（夹）打开，保存</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        h4 <span class=\"token operator\">=</span> QHBoxLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 颜色、字体、自定义</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        btn11 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'输入：整数'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        btn12 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'输入：小数'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        btn13 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'输入：文本'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        btn14 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'输入：多文'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        btn15 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'输入：选项'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        btn21 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'消息：信息'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        btn22 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'消息：问答'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        btn23 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'消息：警告'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        btn24 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'消息：危险'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        btn25 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'消息：关于'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        btn31 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'文件：文件夹'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        btn32 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'文件：单文件'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        btn33 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'文件：多文件'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        btn34 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'文件：保存'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        btn35 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'文件：另存为'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        btn41 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'颜色'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        btn42 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'字体'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        btn43 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span><span class=\"token string\">'自定义'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">for</span> btn <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>btn11<span class=\"token punctuation\">,</span> btn12<span class=\"token punctuation\">,</span> btn13<span class=\"token punctuation\">,</span> btn14<span class=\"token punctuation\">,</span> btn15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            h1<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">for</span> btn <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>btn21<span class=\"token punctuation\">,</span> btn22<span class=\"token punctuation\">,</span> btn23<span class=\"token punctuation\">,</span> btn24<span class=\"token punctuation\">,</span> btn25<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            h2<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">for</span> btn <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>btn31<span class=\"token punctuation\">,</span> btn32<span class=\"token punctuation\">,</span> btn33<span class=\"token punctuation\">,</span> btn34<span class=\"token punctuation\">,</span> btn35<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            h3<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">for</span> btn <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>btn41<span class=\"token punctuation\">,</span> btn42<span class=\"token punctuation\">,</span> btn43<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            h4<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        btn11<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn11<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输入：整数</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        btn12<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn12<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输入：小数</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        btn13<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn13<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输入：文本</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        btn14<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn14<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输入：多文</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        btn15<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn15<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输入：选项</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        btn21<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn21<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 消息：信息</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        btn22<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn22<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 消息：问答</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        btn23<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn23<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 消息：警告</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        btn24<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn24<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 消息：危险</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        btn25<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn25<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 消息：关于</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        btn31<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn31<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 文件：文件夹</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        btn32<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn32<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 文件：单文件</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        btn33<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn33<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 文件：多文件</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        btn34<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn34<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 文件：保存</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        btn35<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn35<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 文件：另存为</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        btn41<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn41<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 颜色</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        btn42<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn42<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 字体</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        btn43<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>do_btn43<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 自定义</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\"># 加到全局布局</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        wl<span class=\"token punctuation\">.</span>addLayout<span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        wl<span class=\"token punctuation\">.</span>addLayout<span class=\"token punctuation\">(</span>h2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        wl<span class=\"token punctuation\">.</span>addLayout<span class=\"token punctuation\">(</span>h3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        wl<span class=\"token punctuation\">.</span>addLayout<span class=\"token punctuation\">(</span>h4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        self<span class=\"token punctuation\">.</span>window2 <span class=\"token operator\">=</span> MyWindow2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 自定义窗口</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        self<span class=\"token punctuation\">.</span>window2<span class=\"token punctuation\">.</span>before_close_signal<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 接收自定义窗口关闭时发送过来的信号，交给 echo 函数显示</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''显示对话框返回值'''</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        QMessageBox<span class=\"token punctuation\">.</span>information<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token string\">\"返回值\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"得到：&#123;&#125;\\n\\ntype: &#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                                QMessageBox<span class=\"token punctuation\">.</span>Yes <span class=\"token operator\">|</span> QMessageBox<span class=\"token punctuation\">.</span>No<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token comment\"># pass</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token comment\"># =====================================================================</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn11</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 输入：整数</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token comment\"># 后面四个数字的作用依次是 初始值 最小值 最大值 步幅</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        value<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> QInputDialog<span class=\"token punctuation\">.</span>getInt<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token string\">\"输入框标题\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"这是提示信息\\n\\n请输入整数:\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token comment\"># self.echo(value)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn12</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 输入：小数</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token comment\"># 后面四个数字的作用依次是 初始值 最小值 最大值 小数点后位数</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        value<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> QInputDialog<span class=\"token punctuation\">.</span>getDouble<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token string\">\"输入框标题\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"这是提示信息\\n\\n请输入整数:\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37.56</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn13</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 输入：文本</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token comment\"># 第三个参数表示显示类型，可选，有正常（QLineEdit.Normal）、密碼（ QLineEdit. Password）、不显示（ QLineEdit. NoEcho）三种情况</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        value<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> QInputDialog<span class=\"token punctuation\">.</span>getText<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token string\">\"输入框标题\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"这是提示信息\\n\\n请输入文本:\"</span><span class=\"token punctuation\">,</span> QLineEdit<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">,</span> <span class=\"token string\">\"这是默认值\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn14</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 输入：多文</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        value<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> QInputDialog<span class=\"token punctuation\">.</span>getMultiLineText<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token string\">\"输入框标题\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"这是提示信息\\n\\n请输入地址:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"默认的\\n我的地址是\\n中国广东广州番禺\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn15</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 输入：选项</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token comment\"># 1 为默认选中选项目，True/False  列表框是否可编辑。</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Spring\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Summer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fall\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Winter\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        value<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> QInputDialog<span class=\"token punctuation\">.</span>getItem<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token string\">\"输入框标题\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"这是提示信息\\n\\n请选择季节:\"</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token comment\"># =====================================================================</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn21</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 消息：信息</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        reply <span class=\"token operator\">=</span> QMessageBox<span class=\"token punctuation\">.</span>information<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                                        <span class=\"token string\">\"消息框标题\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                                        <span class=\"token string\">\"这是一条消息。\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                                        QMessageBox<span class=\"token punctuation\">.</span>Yes <span class=\"token operator\">|</span> QMessageBox<span class=\"token punctuation\">.</span>No<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn22</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 消息：问答</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        reply <span class=\"token operator\">=</span> QMessageBox<span class=\"token punctuation\">.</span>question<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                                     <span class=\"token string\">\"消息框标题\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                                     <span class=\"token string\">\"这是一条问答吗？\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                                     QMessageBox<span class=\"token punctuation\">.</span>Yes <span class=\"token operator\">|</span> QMessageBox<span class=\"token punctuation\">.</span>No<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn23</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 消息：警告</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        reply <span class=\"token operator\">=</span> QMessageBox<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>                                    <span class=\"token string\">\"消息框标题\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>                                    <span class=\"token string\">\"这是一条警告！\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                                    QMessageBox<span class=\"token punctuation\">.</span>Yes <span class=\"token operator\">|</span> QMessageBox<span class=\"token punctuation\">.</span>No<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn24</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 消息：危险</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        reply <span class=\"token operator\">=</span> QMessageBox<span class=\"token punctuation\">.</span>ctitical<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>                                     <span class=\"token string\">\"消息框标题\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>                                     <span class=\"token string\">\"危险！程序即将强制退出！！！\\n\\n这个按钮再也点不开。\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>                                     QMessageBox<span class=\"token punctuation\">.</span>Yes <span class=\"token operator\">|</span> QMessageBox<span class=\"token punctuation\">.</span>No<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn25</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 消息：关于</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        reply <span class=\"token operator\">=</span> QMessageBox<span class=\"token punctuation\">.</span>about<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>                                  <span class=\"token string\">\"消息框标题\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>                                  <span class=\"token string\">\"这是关于软件的说明。。。\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>                                  QMessageBox<span class=\"token punctuation\">.</span>Yes <span class=\"token operator\">|</span> QMessageBox<span class=\"token punctuation\">.</span>No<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token comment\"># =====================================================================</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn31</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 文件：文件夹</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token builtin\">dir</span> <span class=\"token operator\">=</span> QFileDialog<span class=\"token punctuation\">.</span>getExistingDirectory<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>                                               <span class=\"token string\">\"选取文件夹\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                                               <span class=\"token string\">\"C:/\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 起始路径</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn32</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 文件：单文件</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        file_<span class=\"token punctuation\">,</span> filetype <span class=\"token operator\">=</span> QFileDialog<span class=\"token punctuation\">.</span>getOpenFileName<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>                                                      <span class=\"token string\">\"选取文件\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>                                                      <span class=\"token string\">\"C:/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>                                                      <span class=\"token string\">\"All Files (*);;Text Files (*.txt)\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 设置文件扩展名过滤，注意用双分号间隔</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>file_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn33</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 文件：多文件</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        files<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> QFileDialog<span class=\"token punctuation\">.</span>getOpenFileNames<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>                                                 <span class=\"token string\">\"多文件选择\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                                                 <span class=\"token string\">\"C:/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>                                                 <span class=\"token string\">\"All Files (*);;Text Files (*.txt)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn34</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 文件：保存</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>        file_<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> QFileDialog<span class=\"token punctuation\">.</span>getSaveFileName<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>                                                <span class=\"token string\">\"文件保存\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>                                                <span class=\"token string\">\"C:/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>                                                <span class=\"token string\">\"All Files (*);;Text Files (*.txt)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>file_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn35</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 文件：另存为</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        file_<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> QFileDialog<span class=\"token punctuation\">.</span>getSaveFileName<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>                                                <span class=\"token string\">\"文件另存为\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>                                                <span class=\"token string\">\"C:/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>                                                <span class=\"token string\">\"All Files (*);;Text Files (*.txt)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>file_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token comment\"># =====================================================================</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn41</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 颜色</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>        color <span class=\"token operator\">=</span> QColorDialog<span class=\"token punctuation\">.</span>getColor<span class=\"token punctuation\">(</span>Qt<span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Select Color\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn42</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 字体</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>        font<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">=</span> QFontDialog<span class=\"token punctuation\">.</span>getFont<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>        self<span class=\"token punctuation\">.</span>echo<span class=\"token punctuation\">(</span>font<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">do_btn43</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 自定义</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        self<span class=\"token punctuation\">.</span>window2<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre></pre></td></tr><tr><td data-num=\"204\"></td><td><pre></pre></td></tr><tr><td data-num=\"205\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWindow2</span><span class=\"token punctuation\">(</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''自定义窗口'''</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>    <span class=\"token comment\"># 知识点：</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>    <span class=\"token comment\"># 1. 为了得到返回值用到了自定义的信号 / 槽</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>    <span class=\"token comment\"># 2. 为了显示动态数字，使用了计时器</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>    before_close_signal <span class=\"token operator\">=</span> pyqtSignal<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 自定义信号（int 类型）</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>        self<span class=\"token punctuation\">.</span>sec <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">'自定义窗口'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>        self<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>        self<span class=\"token punctuation\">.</span>lcd <span class=\"token operator\">=</span> QLCDNumber<span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>        btn1 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>        btn2 <span class=\"token operator\">=</span> QPushButton<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"关闭\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>        layout <span class=\"token operator\">=</span> QVBoxLayout<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>lcd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>        layout<span class=\"token punctuation\">.</span>addWidget<span class=\"token punctuation\">(</span>btn2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>        self<span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> QTimer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>        self<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 每次计时结束，触发 update</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>        btn1<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>startTimer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>        btn2<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>stopTimer<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 去到关闭前的处理</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>        self<span class=\"token punctuation\">.</span>sec <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>        self<span class=\"token punctuation\">.</span>lcd<span class=\"token punctuation\">.</span>display<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sec<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># LED 显示数字 + 1</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>        self<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 计时器每秒计数</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">stopTimer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>        self<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>        self<span class=\"token punctuation\">.</span>sec <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>        self<span class=\"token punctuation\">.</span>before_close_signal<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>lcd<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 发送信号，带参数 888</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>        self<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 然后窗口关闭</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>    <span class=\"token comment\"># 默认关闭事件     def closeEvent (self, e):        self.stopTimer ()</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre></pre></td></tr><tr><td data-num=\"250\"></td><td><pre></pre></td></tr><tr><td data-num=\"251\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>    <span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"253\"></td><td><pre></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>    app <span class=\"token operator\">=</span> QApplication<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>    win <span class=\"token operator\">=</span> MyWindow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>    win<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>exec_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Python",
                "Pyqt5",
                "Python"
            ]
        },
        {
            "id": "http://oreki.world/interview/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%80%E7%AD%94/",
            "url": "http://oreki.world/interview/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%80%E7%AD%94/",
            "title": "vue生命周期简答",
            "date_published": "2020-08-16T13:32:58.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h4 id=\"mvvm\"><a class=\"anchor\" href=\"#mvvm\">#</a> MVVM</h4><p>MVVM 是 Model-View-ViewModel 缩写，也就是把 MVC 中的 Controller 演变成 ViewModel。Model 层代表数据模型，View 代表 UI 组件，ViewModel 是 View 和 Model 层的桥梁，数据会绑定到 viewModel 层并自动将数据渲染到页面中，视图变化的时候会通知 viewModel 层更新数据。</p><h4 id=\"vue的生命周期\"><a class=\"anchor\" href=\"#vue的生命周期\">#</a> Vue 的生命周期</h4><p>Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载 Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p><h5 id=\"它的生命周期中有多个事件钩子让我们在控制整个vue实例的过程中更容易形成好的逻辑\"><a class=\"anchor\" href=\"#它的生命周期中有多个事件钩子让我们在控制整个vue实例的过程中更容易形成好的逻辑\">#</a> 它的生命周期中有多个事件钩子，让我们在控制整个 vue 实例的过程中更容易形成好的逻辑。</h5><ol><li>beforeCreate---- 创建前：组件实例更被创建，组件属性计算之前，数据对象 data 都为 undefined，未初始化。</li><li>created---- 创建后：组件实例创建完成，属性已经绑定，数据对象 data 已存在，但 dom 未生成，$el 未存在</li><li>beforeMount--- 挂载前：vue 实例的 $el 和 data 都已初始化，挂载之前为虚拟的 dom 节点，data.message 未替换</li><li>mounted----- 挂载后：vue 实例挂载完成，data.message 成功渲染。</li><li>beforeUpdate---- 更新前：当 data 变化时，会触发 beforeUpdate 方法</li><li>updated---- 更新后：当 data 变化时，会触发 updated 方法</li><li>beforeDestory--- 销毁前：组件销毁之前调用</li><li>destoryed--- 销毁后：组件销毁之后调用，对 data 的改变不会再触发周期函数，vue 实例已解除事件监听和 dom 绑定，但 dom 结构依然存在</li></ol><h5 id=\"简述生命周期\"><a class=\"anchor\" href=\"#简述生命周期\">#</a> 简述生命周期</h5><ol><li>beforeCreate 实例准备开始创建</li><li>created 实例创建完成，数据初始化完成</li><li>beforeMount 实例挂在之前，无法访问 DOM</li><li>mounted 实例挂载完成，可以访问真实 DOM</li><li>beforeUpdate 数据发生更新，访问的是旧的 DOM，和最新的数据</li><li>updated：DOM 更 i 新完成，可以访问最新的 DOM</li><li>activated：组件被激活</li><li>deactivated：组件被冻结</li><li>beforeDestroy：组件实例即将销毁</li><li>destroyed：组件实例销毁完成</li><li>deactivated/beforeDestroy 必须是 keep-alive 的组件才会有</li></ol>",
            "tags": [
                "面试",
                "Vue.js"
            ]
        },
        {
            "id": "http://oreki.world/%E5%8D%95%E7%89%87%E6%9C%BA%E7%9A%84%E5%87%A0%E7%A7%8DIO%E5%8F%A3/",
            "url": "http://oreki.world/%E5%8D%95%E7%89%87%E6%9C%BA%E7%9A%84%E5%87%A0%E7%A7%8DIO%E5%8F%A3/",
            "title": "单片机的几种IO口",
            "date_published": "2020-08-11T14:07:32.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>学习单片机开发也有一段时间了，对一些底层的东西不太了解或不够深入，希望能弥补上这些知识空缺。</p><h3 id=\"gpio的几种状态\"><a class=\"anchor\" href=\"#gpio的几种状态\">#</a> GPIO 的几种状态</h3><blockquote><p>输入状态</p><blockquote><p>浮空输入<br>上 / 下拉输入<br>模拟输入</p></blockquote></blockquote><blockquote><p>输出状态</p><blockquote><p>推挽输出<br>开漏输出</p></blockquote></blockquote><h4 id=\"输入状态\"><a class=\"anchor\" href=\"#输入状态\">#</a> 输入状态</h4><h5 id=\"浮空输入\"><a class=\"anchor\" href=\"#浮空输入\">#</a> 浮空输入</h5><p>辅控输入即 IO 口在芯片内部既不接上拉电阻也不接下拉电阻，输入电阻相当于非常大。IO 口的电平状态不确定，完全由外部决定，悬空时用示波器直接测量可能是高电平也可能是低电平。由于浮空状态容易受到干扰甚至是静电导致芯片损坏，因此未使用的脚一般要避免浮空。<br>浮空输入的常见运用是检测按键状态。</p><h5 id=\"上拉下拉输入\"><a class=\"anchor\" href=\"#上拉下拉输入\">#</a> 上拉 / 下拉输入</h5><p>IO 上拉输入指的是通过配置，在芯片内部将该 IO 串联电阻后接 Vcc；IO 下拉输入指的是通过配置，在芯片内部将该 IO 串联电阻后接 Gnd。</p><h5 id=\"模拟输入\"><a class=\"anchor\" href=\"#模拟输入\">#</a> 模拟输入</h5><p>普通的数字 IO 口可以通过输入数据寄存器的 0 或 1 读取到外部电平的高低状态，而模拟 IO 无法通过输入寄存器的值反应电平的高低，一般需要借助 ADC 或电压比较器去获取外部电平的值。<br>常用于 AD 检测或电压比较器。</p><h4 id=\"输出状态\"><a class=\"anchor\" href=\"#输出状态\">#</a> 输出状态</h4><h5 id=\"推挽输出\"><a class=\"anchor\" href=\"#推挽输出\">#</a> 推挽输出</h5><p>推挽输出可以输出高低电平，可以直接驱动功耗不大的数字器件。内部结构相当于两个三极管或 MOSFET 互补工作，不管输出高还是低，总有一个开关管导通。如果两个推完输出相互直连，其中一个芯片若输出高，此时上面的 MOS 导通下面 MOS 闭合，而一个芯片若输出低，即下面的 MOS 导通上面的 MOS 闭合，电流会从上 MOS 导通的 VCC 直接流向下 MOS 导通的 GND，整个通路电阻很小，将会发生短路并损坏端口。因此推挽输出不能实现” 线与 “。</p><h5 id=\"开漏输出\"><a class=\"anchor\" href=\"#开漏输出\">#</a> 开漏输出</h5><p>开漏输出只能输出低电平，如果要输出高电平必须通过外部上拉电阻才能实现。内部输出 1 时 MOS 管截止，输出与地断开，这时候 IO 其实没有驱动能力，需要外部连接上拉电阻才能输出高电平；内部输出 0 时 MOS 管导通接地，所以开漏达到输出低电平效果。开漏输出的吸电流能力较强，适合做电流型的驱动。<br>关于开漏输出接上拉电阻的一大运用是 IIC 线路。当上拉电阻阻值较小时，上升沿的延迟就小，但功耗较大，反之，当上拉电阻阻值较大时，上升沿延迟就大，但功耗较小。但电阻影响上升沿不影响下降沿。根据上升沿时延和功耗的需要，综合考虑选择合适的上拉电阻。</p><h5 id=\"高阻输出\"><a class=\"anchor\" href=\"#高阻输出\">#</a> 高阻输出</h5><p>IO 的高阻态实际上是输出 IO，与浮空输入有些类似，输入电阻都非常大。不同在于浮空输入是输入型 IO，而高阻态 IO 实际是开漏输出在输出高电平时的状态，且外部不接上拉电阻。</p><h4 id=\"芯片复位后的io状态\"><a class=\"anchor\" href=\"#芯片复位后的io状态\">#</a> 芯片复位后的 IO 状态</h4><p>通常芯片复位后 IO 初始状态是高阻输入，为了防止芯片被异常复位时的 IO 电平变化对外部器件产生异常动作。但为了避免高阻输入产生漏电流，在芯片启动后需要对端口进行配置，改为其他状态，如内部拉高输入或输出。</p><h4 id=\"io的驱动能力\"><a class=\"anchor\" href=\"#io的驱动能力\">#</a> IO 的驱动能力</h4><p>大部分的单片机 IO 口都可以选择驱动能力的强弱，一般来说驱动能力越强则功耗损耗也越大。IO 对外部的驱动能力既要看电压驱动能力，还要看电流驱动能力。有个简易的判断驱动能力是否足够的方法，将电路开路后则是电压是否符合负载电压，如果负责则表示电压驱动能力足够，否则电压驱动能力不够。如果接上负载后电压降低了，这就表明电流驱动能力不足。</p>",
            "tags": [
                "嵌入式",
                "嵌入式"
            ]
        },
        {
            "id": "http://oreki.world/webpack%E9%85%8D%E7%BD%AE/",
            "url": "http://oreki.world/webpack%E9%85%8D%E7%BD%AE/",
            "title": "webpack配置",
            "date_published": "2020-07-24T12:48:06.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"建立-webpackvue-loader-项目\"><a class=\"anchor\" href=\"#建立-webpackvue-loader-项目\">#</a> 建立 webpack+vue-loader 项目</h3><h4 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h4><p>创建 jtodo 目录，并初始化项目</p><pre><code>$ git init // 初始化 git 仓库\n$ npm init // 初始化 npm 项目，目录生成 `package.json` 文件\n</code></pre><p>安装 webpack 打包工具，vue 解释器</p><pre><code>$ npm i webpack webpack-cli vue-template-compiler css-loader --save-dev\n$ npm i vue vue-loader --save-dev\n</code></pre><p>新建 src 目录，及该目录下的 app.vue 和 index.js 文件</p><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// app.vue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      text<span class=\"token operator\">:</span> <span class=\"token string\">'hello world!'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token selector\">#app</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// index.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 将 app.vue 挂载到 root 元素上</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token parameter\">h</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>$ <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"配置项目的打包入口和出口\"><a class=\"anchor\" href=\"#配置项目的打包入口和出口\">#</a> 配置项目的打包入口和出口</h4><p>在根目录新建 webpack.config.js 文件，并配置项目的打包入口和出口</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// webpack.config.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  entry<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 使用绝对路径'src/index.js'),</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  ouput<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    filename<span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"配置-build-脚本并测试\"><a class=\"anchor\" href=\"#配置-build-脚本并测试\">#</a> 配置 build 脚本并测试</h4><p>在 package.json 配置 build 脚本</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// package.json</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --config webpack.config.js\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此时尝试 $ npm run build ，报错如下</p><pre><code>ERROR in ./src/app.vue 1:0\nModule parse failed: Unexpected token (1:0)\nYou may need an appropriate loader to handle this file type.\n&gt; &lt;template&gt;\n|   &lt;div&gt;hello&lt;/div&gt;\n| &lt;/template&gt;\n...\n</code></pre><h3 id=\"webpack-配置项目加载静态文件和-css-预处理器\"><a class=\"anchor\" href=\"#webpack-配置项目加载静态文件和-css-预处理器\">#</a> webpack 配置项目加载静态文件和 CSS 预处理器</h3><h4 id=\"配置-vue-文件中的-css-解释器\"><a class=\"anchor\" href=\"#配置-vue-文件中的-css-解释器\">#</a> 配置 vue 文件中的 CSS 解释器</h4><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// webpack.config.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> VueLoaderPlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vue-loader'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">.vue$ </span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        loader<span class=\"token operator\">:</span> <span class=\"token string\">'vue-loader'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//vue-loader@15.* 之后，还需 css-loader 去解析 vue 中的 style</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$ </span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token string\">'css-loader'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueLoaderPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行 $ npm run build ，成功打包项目</p><h4 id=\"配置项目加载静态文件\"><a class=\"anchor\" href=\"#配置项目加载静态文件\">#</a> 配置项目加载静态文件</h4><p>项目中的一些小静态文件，可以把小静态文件转换成代码，直接写到 JS 文件中，减少 HTTP 请求。</p><p>安装解释器</p><pre><code>$ npm i file-loader, url-loader --save-dev\n</code></pre><p>配置项目加载静态文件</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// webpack.config.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(gif|jpg|jpeg|png|svg)$ </span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            loader<span class=\"token operator\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 把小静态文件转换成代码，直接写到 JS 文件中，减少 HTTP 请求</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              limit<span class=\"token operator\">:</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 单位是 B</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              name<span class=\"token operator\">:</span> <span class=\"token string\">'[name]-aaa.[ext]'</span> <span class=\"token comment\">// 重命名图片</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接着在目录 src/assets/images/ 下新建 bg.svg 文件测试</p><pre><code>&lt;svg xmlns='http://www.w3.org/2000/svg' width='400' height='400' viewBox='0 0 800 800'&gt;&lt;rect fill='#330033' width='800' height='800'/&gt;&lt;g fill='none' stroke='#404' stroke-width='1'&gt;&lt;path d='M769 229L1037 260.9M927 880L731 737 520 660 309 538 40 599 295 764 126.5 879.5 40 599-197 493 102 382-31 229 126.5 79.5-69-63'/&gt;&lt;path d='M-31 229L237 261 390 382 603 493 308.5 537.5 101.5 381.5M370 905L295 764'/&gt;&lt;path d='M520 660L578 842 731 737 840 599 603 493 520 660 295 764 309 538 390 382 539 269 769 229 577.5 41.5 370 105 295 -36 126.5 79.5 237 261 102 382 40 599 -69 737 127 880'/&gt;&lt;path d='M520-140L578.5 42.5 731-63M603 493L539 269 237 261 370 105M902 382L539 269M390 382L102 382'/&gt;&lt;path d='M-222 42L126.5 79.5 370 105 539 269 577.5 41.5 927 80 769 229 902 382 603 493 731 737M295-36L577.5 41.5M578 842L295 764M40-201L127 80M102 382L-261 269'/&gt;&lt;/g&gt;&lt;g fill='#505'&gt;&lt;circle cx='769' cy='229' r='5'/&gt;&lt;circle cx='539' cy='269' r='5'/&gt;&lt;circle cx='603' cy='493' r='5'/&gt;&lt;circle cx='731' cy='737' r='5'/&gt;&lt;circle cx='520' cy='660' r='5'/&gt;&lt;circle cx='309' cy='538' r='5'/&gt;&lt;circle cx='295' cy='764' r='5'/&gt;&lt;circle cx='40' cy='599' r='5'/&gt;&lt;circle cx='102' cy='382' r='5'/&gt;&lt;circle cx='127' cy='80' r='5'/&gt;&lt;circle cx='370' cy='105' r='5'/&gt;&lt;circle cx='578' cy='42' r='5'/&gt;&lt;circle cx='237' cy='261' r='5'/&gt;&lt;circle cx='390' cy='382' r='5'/&gt;&lt;/g&gt;&lt;/svg&gt;\n</code></pre><h4 id=\"配置-scss-解释器\"><a class=\"anchor\" href=\"#配置-scss-解释器\">#</a> 配置 SCSS 解释器</h4><p>安装解释器</p><pre><code>$ npm i sass-loader, node-sass, style-loader --save-dev\n</code></pre><p>配置 SCSS 解释器</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// webpack.config.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.scss$ </span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 将 JS 字符串生成为 style 节点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token string\">\"css-loader\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 将 CSS 转化成 CommonJS 模</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token string\">\"sass-loader\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接着在目录 src/assets/styles/ 下新建 global.scss 文件测试</p><figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">// global.scss</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>html, body <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'../images/bg.svg'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> center center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #4d4d4d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 300<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"配置开发环境\"><a class=\"anchor\" href=\"#配置开发环境\">#</a> 配置开发环境</h3><h4 id=\"配置-webpack-dev-server\"><a class=\"anchor\" href=\"#配置-webpack-dev-server\">#</a> 配置 webpack-dev-server</h4><p>webpack-dev-server 能帮助程序员在开发环境中预览项目</p><p>安装</p><pre><code>$ npm i webpack-dev-server cross-env --save-dev\n</code></pre><p>在 package.json 配置 dev 脚本，并设置环境变量标识环境，同时使得跨平台命令统一（cross-env）</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// package.json</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=production webpack --config webpack.config.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=development webpack-dev-server --config webpack.config.js\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在根目录新建 webpack.config.js 文件，并配置项目的开发环境</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// webpack.config.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> VueLoaderPlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vue-loader'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 引入 webpack</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 启动 build 或 dev 脚本时，会把环境变量存在 process.env 中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> isDev <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  target<span class=\"token operator\">:</span> <span class=\"token string\">'web'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 编译目标 web 平台</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  entry<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 使用绝对路径</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    filename<span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token string\">'process.env'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token constant\">NODE_ENV</span><span class=\"token operator\">:</span> isDev <span class=\"token operator\">?</span> <span class=\"token string\">'\"development\"'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'\"production\"'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueLoaderPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  config<span class=\"token punctuation\">.</span>devServer <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    port<span class=\"token operator\">:</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    host<span class=\"token operator\">:</span> <span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 设 IP 为 0.0.0.0 可用同时用 localhost 和内网 IP 访问</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    overlay<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 在网页上报错</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      errors<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</pre></td></tr></table></figure><h4 id=\"配置html入口\"><a class=\"anchor\" href=\"#配置html入口\">#</a> 配置 html 入口</h4><p>安装</p><pre><code>$ npm i html-webpack-plugin --save-dev\n</code></pre><p>预览项目需要有一个 html 文件去包含 index.js ，在 webpack.config.js 添加如下信息</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// webpack.config.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> HTMLPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTMLPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"配置热重载和-devtool\"><a class=\"anchor\" href=\"#配置热重载和-devtool\">#</a> 配置热重载和 devtool</h4><p>前面修改组件代码后，会自动更新整个页面，现在配置修改组件时，仅重新渲染该组件。另外，添加了 devtool 来帮助我们在浏览器调试代码。</p><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// webpack.config.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  config<span class=\"token punctuation\">.</span>devtool <span class=\"token operator\">=</span> <span class=\"token string\">'#cheap-module-eval-source-map'</span> <span class=\"token comment\">// 用 devtool 检查代码</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  config<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>HotModuleReplacementPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 模块热重载</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>NoEmitOnErrorsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 减少不需要信息的展示</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "前端",
                "Vue",
                "前端"
            ]
        },
        {
            "id": "http://oreki.world/%E5%A6%82%E4%BD%95%E7%BB%98%E5%88%B6%E7%9F%A9%E5%BD%A2%E5%B9%B6%E9%80%9A%E8%BF%87%E5%9C%A8PyQt5%E4%B8%AD%E6%8B%96%E6%94%BE%E6%9D%A5%E8%B0%83%E6%95%B4%E5%85%B6%E5%BD%A2%E7%8A%B6/",
            "url": "http://oreki.world/%E5%A6%82%E4%BD%95%E7%BB%98%E5%88%B6%E7%9F%A9%E5%BD%A2%E5%B9%B6%E9%80%9A%E8%BF%87%E5%9C%A8PyQt5%E4%B8%AD%E6%8B%96%E6%94%BE%E6%9D%A5%E8%B0%83%E6%95%B4%E5%85%B6%E5%BD%A2%E7%8A%B6/",
            "title": "如何绘制矩形并通过在PyQt5中拖放来调整其形状",
            "date_published": "2020-06-27T07:07:57.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>由 PyQt5 创建的 GUI 上绘制一个矩形.<br>拖动时，通过鼠标移动来调整矩形形状.<br>释放鼠标左键时，确定矩形形状.</p><h3 id=\"调用mousemoveevent函数\"><a class=\"anchor\" href=\"#调用mousemoveevent函数\">#</a> 调用 mouseMoveEvent 函数</h3><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> PyQt5 <span class=\"token keyword\">import</span> QtWidgets<span class=\"token punctuation\">,</span> QtCore</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> PyQt5<span class=\"token punctuation\">.</span>QtGui <span class=\"token keyword\">import</span> QPainter</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWidget</span><span class=\"token punctuation\">(</span>QtWidgets<span class=\"token punctuation\">.</span>QWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>setGeometry<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>begin <span class=\"token operator\">=</span> QtCore<span class=\"token punctuation\">.</span>QPoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> QtCore<span class=\"token punctuation\">.</span>QPoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">paintEvent</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        qp <span class=\"token operator\">=</span> QtGui<span class=\"token punctuation\">.</span>QPainter<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        br <span class=\"token operator\">=</span> QtGui<span class=\"token punctuation\">.</span>QBrush<span class=\"token punctuation\">(</span>QtGui<span class=\"token punctuation\">.</span>QColor<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        qp<span class=\"token punctuation\">.</span>setBrush<span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        qp<span class=\"token punctuation\">.</span>drawRect<span class=\"token punctuation\">(</span>QtCore<span class=\"token punctuation\">.</span>QRect<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>begin<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">mousePressEvent</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        self<span class=\"token punctuation\">.</span>begin <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        self<span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        self<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">mouseMoveEvent</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        self<span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        self<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">mouseReleaseEvent</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        self<span class=\"token punctuation\">.</span>begin <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        self<span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        self<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Python",
                "Pyqt5",
                "Pyqt5"
            ]
        },
        {
            "id": "http://oreki.world/pyqt5%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/",
            "url": "http://oreki.world/pyqt5%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/",
            "title": "pyqt5插入图片",
            "date_published": "2020-05-25T12:39:56.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"designer中图片资源插入\"><a class=\"anchor\" href=\"#designer中图片资源插入\">#</a> designer 中图片资源插入</h3><p><img data-src=\"https://orekisama.gitee.io/blog-image-bed/blogimg/assets/pyqt5%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/1.png\" alt=\"\"><br>如修改 lable 控件的背景图，选择资源，导入 qrc 文件。</p><p>qrc 文件格式编辑</p><pre><code>&lt;RCC&gt;\n  &lt;qresource&gt;\n    &lt;file&gt;1.jpeg&lt;/file&gt;\n    &lt;file&gt;ico/add.png&lt;/file&gt;\n    &lt;file&gt;ico/add_to_list.png&lt;/file&gt;\n    &lt;file&gt;ico/center_volume.png&lt;/file&gt;\n    &lt;file&gt;ico/cycle.png&lt;/file&gt;\n    &lt;file&gt;ico/cycle_one.png&lt;/file&gt;\n    &lt;file&gt;ico/de.png&lt;/file&gt;\n    &lt;file&gt;ico/delete.png&lt;/file&gt;\n    &lt;file&gt;ico/disc.png&lt;/file&gt;\n    &lt;file&gt;ico/downloads.png&lt;/file&gt;\n    &lt;file&gt;ico/high_volume.png&lt;/file&gt;\n    &lt;file&gt;ico/kk-music.ico&lt;/file&gt;\n    &lt;file&gt;ico/logo.png&lt;/file&gt;\n    &lt;file&gt;ico/music.png&lt;/file&gt;\n    &lt;file&gt;ico/my_playlist.png&lt;/file&gt;\n    &lt;file&gt;ico/no_volume.png&lt;/file&gt;\n    &lt;file&gt;ico/on.png&lt;/file&gt;\n    &lt;file&gt;ico/open_folder.png&lt;/file&gt;\n    &lt;file&gt;ico/random.png&lt;/file&gt;\n    &lt;file&gt;ico/small_volume.png&lt;/file&gt;\n    &lt;file&gt;ico/song.png&lt;/file&gt;\n    &lt;file&gt;ico/start.png&lt;/file&gt;\n    &lt;file&gt;ico/搜索.png&lt;/file&gt;\n    &lt;file&gt;ico/网易云音乐.png&lt;/file&gt;\n    &lt;file&gt;ico/stop.png&lt;/file&gt;\n    &lt;file&gt;ico/音量 .png&lt;/file&gt;\n  &lt;/qresource&gt;\n&lt;/RCC&gt;\n</code></pre><p>再使用命令</p><pre><code>pyrcc5 xx.qrc -o xx.py\n</code></pre><p>并在 ui 文件转换的 py 文件中导入该文件，作为图片资源文件。</p>",
            "tags": [
                "Python",
                "Pyqt5",
                "Pyqt5"
            ]
        },
        {
            "id": "http://oreki.world/ubuntu%E5%AE%89%E8%A3%85mariadb/",
            "url": "http://oreki.world/ubuntu%E5%AE%89%E8%A3%85mariadb/",
            "title": "ubuntu安装mariadb",
            "date_published": "2020-05-12T09:40:28.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h3><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> mariadb-server</pre></td></tr></table></figure><h3 id=\"验证\"><a class=\"anchor\" href=\"#验证\">#</a> 验证</h3><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> systemctl status mariadb</pre></td></tr></table></figure><h3 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h3><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> mysql_secure_installation</pre></td></tr></table></figure><p>脚本将会提示你输入 root 密码：</p><blockquote><p>Enter current password for root (enter for none):</p></blockquote><p>你会被问到是否 MySQL root 用户设置密码：</p><blockquote><p>Set root password? [Y/n]</p></blockquote><p>你将会被要求移除匿名用户，限制 root 用户访问本地机器，移除测试数据库，并且重新加载权限表。</p><blockquote><p>Remove anonymous users? [Y/n] Y<br>Disallow root login remotely? [Y/n] Y<br>Remove test database and access to it? [Y/n] Y<br>Reload privilege tables now? [Y/n] Y</p></blockquote><h3 id=\"允许远程连接\"><a class=\"anchor\" href=\"#允许远程连接\">#</a> 允许远程连接</h3><h4 id=\"修改表\"><a class=\"anchor\" href=\"#修改表\">#</a> 修改表</h4><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GRANT ALL PRIVILEGES ON *.* TO <span class=\"token string\">'root'</span>@<span class=\"token string\">'%'</span> IDENTIFIED BY <span class=\"token string\">'root'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>flush privileges<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"修改配置文件\"><a class=\"anchor\" href=\"#修改配置文件\">#</a> 修改配置文件</h4><p>将 /etc/mysql/mariadb.conf.d/50-server.cnf 中 bind-address = 127.0.0.1 加# 注释掉</p><h4 id=\"重启服务\"><a class=\"anchor\" href=\"#重启服务\">#</a> 重启服务</h4><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl restart mariadb.service</pre></td></tr></table></figure>",
            "tags": [
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "http://oreki.world/Pyqt5%E5%B5%8C%E5%A5%97%E7%AA%97%E5%8F%A3%E5%88%87%E6%8D%A2/",
            "url": "http://oreki.world/Pyqt5%E5%B5%8C%E5%A5%97%E7%AA%97%E5%8F%A3%E5%88%87%E6%8D%A2/",
            "title": "Pyqt5嵌套窗口切换",
            "date_published": "2020-05-07T03:53:03.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"使用designer设计\"><a class=\"anchor\" href=\"#使用designer设计\">#</a> 使用 designer 设计</h3><p>使用 QstackerWidget 进行多界面切换</p><p>在 stackedWidget 对象中插入页，即可实现多页面。<br>将控件放入指定对应页面。<br><img data-src=\"https://orekisama.gitee.io/blog-image-bed/blogimg/assets/Pyqt5%E5%B5%8C%E5%A5%97%E7%AA%97%E5%8F%A3%E5%88%87%E6%8D%A2/designer%E8%AE%BE%E8%AE%A1%E5%9B%BE.png\" alt=\"\"></p><h3 id=\"ui代码\"><a class=\"anchor\" href=\"#ui代码\">#</a> Ui 代码</h3><pre><code class=\"language-Python\">from PyQt5 import QtCore, QtGui, QtWidgets\n\n\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(&quot;MainWindow&quot;)\n        MainWindow.resize(800, 600)\n        self.centralwidget = QtWidgets.QWidget(MainWindow)\n        self.centralwidget.setObjectName(&quot;centralwidget&quot;)\n        self.B1 = QtWidgets.QPushButton(self.centralwidget)\n        self.B1.setGeometry(QtCore.QRect(50, 180, 75, 23))\n        self.B1.setObjectName(&quot;B1&quot;)\n        self.B2 = QtWidgets.QPushButton(self.centralwidget)\n        self.B2.setGeometry(QtCore.QRect(50, 280, 75, 23))\n        self.B2.setObjectName(&quot;B2&quot;)\n        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)\n        self.stackedWidget.setGeometry(QtCore.QRect(200, 60, 551, 421))\n        self.stackedWidget.setObjectName(&quot;stackedWidget&quot;)\n        self.page1 = QtWidgets.QWidget()\n        self.page1.setObjectName(&quot;page1&quot;)\n        self.frame1 = QtWidgets.QFrame(self.page1)\n        self.frame1.setGeometry(QtCore.QRect(180, 110, 221, 141))\n        self.frame1.setStyleSheet(&quot;background-color: rgb(255, 255, 127);&quot;)\n        self.frame1.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame1.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame1.setObjectName(&quot;frame1&quot;)\n        self.stackedWidget.addWidget(self.page1)\n        self.page2 = QtWidgets.QWidget()\n        self.page2.setObjectName(&quot;page2&quot;)\n        self.frame2 = QtWidgets.QFrame(self.page2)\n        self.frame2.setGeometry(QtCore.QRect(149, 89, 251, 191))\n        self.frame2.setStyleSheet(&quot;background-color: rgb(255, 0, 127);&quot;)\n        self.frame2.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame2.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame2.setObjectName(&quot;frame2&quot;)\n        self.stackedWidget.addWidget(self.page2)\n        MainWindow.setCentralWidget(self.centralwidget)\n        self.menubar = QtWidgets.QMenuBar(MainWindow)\n        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))\n        self.menubar.setObjectName(&quot;menubar&quot;)\n        MainWindow.setMenuBar(self.menubar)\n        self.statusbar = QtWidgets.QStatusBar(MainWindow)\n        self.statusbar.setObjectName(&quot;statusbar&quot;)\n        MainWindow.setStatusBar(self.statusbar)\n\n        self.retranslateUi(MainWindow)\n        QtCore.QMetaObject.connectSlotsByName(MainWindow)\n\n    def retranslateUi(self, MainWindow):\n        _translate = QtCore.QCoreApplication.translate\n        MainWindow.setWindowTitle(_translate(&quot;MainWindow&quot;, &quot;MainWindow&quot;))\n        self.B1.setText(_translate(&quot;MainWindow&quot;, &quot;一号色&quot;))\n        self.B2.setText(_translate(&quot;MainWindow&quot;, &quot;二号色&quot;))\n\n</code></pre><h3 id=\"控制代码\"><a class=\"anchor\" href=\"#控制代码\">#</a> 控制代码</h3><p>button 按钮绑定对应事件进行页面展示。</p><pre><code class=\"language-Python\">import sys\nfrom PyQt5.QtWidgets import QApplication, QMainWindow\nfrom win import Ui_MainWindow\n\n\nclass MainWin(QMainWindow, Ui_MainWindow):\n    def __init__(self, parent=None):\n        super(MainWin, self).__init__(parent)\n        self.setupUi(self)\n\n        self.B1.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))  # 点击按钮1展示第一个frame\n        self.B2.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(1))  # 点击按钮2展示第二个frame\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    win = MainWin()\n    win.show()\n    sys.exit(app.exec_())\n</code></pre><h3 id=\"效果图\"><a class=\"anchor\" href=\"#效果图\">#</a> 效果图</h3><p><img data-src=\"https://orekisama.gitee.io/blog-image-bed/blogimg/assets/Pyqt5%E5%B5%8C%E5%A5%97%E7%AA%97%E5%8F%A3%E5%88%87%E6%8D%A2/b1.png\" alt=\"\"><br><img data-src=\"https://orekisama.gitee.io/blog-image-bed/blogimg/assets/Pyqt5%E5%B5%8C%E5%A5%97%E7%AA%97%E5%8F%A3%E5%88%87%E6%8D%A2/b2.png\" alt=\"\"></p>",
            "tags": [
                "Python",
                "Pyqt5",
                "Python"
            ]
        },
        {
            "id": "http://oreki.world/django%E9%9B%86%E6%88%90%E6%94%AF%E4%BB%98%E5%AE%9D/",
            "url": "http://oreki.world/django%E9%9B%86%E6%88%90%E6%94%AF%E4%BB%98%E5%AE%9D/",
            "title": "django集成支付宝",
            "date_published": "2020-05-04T11:43:49.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"支付宝支付\"><a class=\"anchor\" href=\"#支付宝支付\">#</a> 支付宝支付</h3><h4 id=\"alipay\"><a class=\"anchor\" href=\"#alipay\">#</a> Alipay</h4><p>阿里的支付也就是支付宝，官网以及出了 Python 的 SDK 了～所以要先下载</p><pre><code>pip install alipay-sdk-python\n</code></pre><h4 id=\"具体操作\"><a class=\"anchor\" href=\"#具体操作\">#</a> 具体操作</h4><h5 id=\"第一步-访问沙箱环境地址注册一个商家账户\"><a class=\"anchor\" href=\"#第一步-访问沙箱环境地址注册一个商家账户\">#</a> 第一步 访问沙箱环境地址，注册一个商家账户</h5><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuaG9tZS5hbGlwYXkuY29tL3BsYXRmb3JtL2FwcERhaWx5Lmh0bT90YWI9aW5mbw==\">https://openhome.alipay.com/platform/appDaily.htm?tab=info</span><br>按照他要求的方式生成商户的公钥和私钥<sub>把公钥放入网站</sub>私钥自己留着签名用～～</p><p>下面是商户信息以及卖家信息<sub>下载一个支付宝的沙箱环境</sub></p><p>然后按照下面的账号和密码登录和支付<s>只支持安卓的～<br>按照他要求的方式生成商户的公钥和私钥<sub>把公钥放入网站</sub>私钥自己留着签名用</s></p><p>下面是商户信息以及卖家信息<sub>下载一个支付宝的沙箱环境</sub></p><p>然后按照下面的账号和密码登录和支付～～只支持安卓的～</p><h5 id=\"第二步-阅读文档-找到一个适合自己的api\"><a class=\"anchor\" href=\"#第二步-阅读文档-找到一个适合自己的api\">#</a> 第二步 阅读文档 找到一个适合自己的 API</h5><h5 id=\"代码实例\"><a class=\"anchor\" href=\"#代码实例\">#</a> 代码实例</h5><pre><code class=\"language-Python\">from django.conf.urls import url\nfrom django.contrib import admin\nfrom demo.views import AliPayView, PayHandlerView\nurlpatterns = [\n  url(r'^admin/', admin.site.urls),\n  url(r'^pay$', AliPayView.as_view()),\n  url(r'^alipay_handler', PayHandlerView.as_view()),\n]\n</code></pre><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render<span class=\"token punctuation\">,</span> redirect</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> APIView</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>response <span class=\"token keyword\">import</span> Response</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> alipay<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>DefaultAlipayClient <span class=\"token keyword\">import</span> DefaultAlipayClient</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> alipay<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>AlipayClientConfig <span class=\"token keyword\">import</span> AlipayClientConfig</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> alipay<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span>AlipayTradePrecreateModel <span class=\"token keyword\">import</span> AlipayTradePrecreateModel</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">from</span> alipay<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span> AlipayTradePrecreateRequest <span class=\"token keyword\">import</span> AlipayTradePrecreateRequest</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">from</span> alipay<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span>AlipayTradePagePayModel <span class=\"token keyword\">import</span> AlipayTradePagePayModel</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">from</span> alipay<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>AlipayTradePagePayRequest <span class=\"token keyword\">import</span> AlipayTradePagePayRequest</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># Create your views here.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 沙箱环境地址：https://openhome.alipay.com/platform/appDaily.htm?tab=info</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># \"https://openapi.alipaydev.com/gateway.do\", APP_ID, APP_PRIVATE_KEY, \"json\", CHARSET, ALIPAY_PUBLIC_KEY, \"RSA2\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">ali_pay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\"># 为阿里支付实例化一个配置信息对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  alipay_config <span class=\"token operator\">=</span> AlipayClientConfig<span class=\"token punctuation\">(</span>sandbox_debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\"># 初始化各种配置信息</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\"># 阿里提供服务的接口</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  alipay_config<span class=\"token punctuation\">.</span>server_url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://openapi.alipaydev.com/gateway.do\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\"># 申请的沙箱环境的 app_id</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  alipay_config<span class=\"token punctuation\">.</span>app_id <span class=\"token operator\">=</span> <span class=\"token string\">\"2016091800540924\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\"># 商户的私钥</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keys/app_private_key.txt\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span> alipay_config<span class=\"token punctuation\">.</span>app_private_key <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\"># 阿里的公钥</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keys/alipay_public_key.txt\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span> alipay_config<span class=\"token punctuation\">.</span>alipay_public_key <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\"># 实例化一个支付对象并返回</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  alipay_client <span class=\"token operator\">=</span> DefaultAlipayClient<span class=\"token punctuation\">(</span>alipay_client_config<span class=\"token operator\">=</span>alipay_config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">return</span> alipay_client</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AliPayView</span><span class=\"token punctuation\">(</span>APIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pay.html\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\"># 生成支付宝自带页面的 API</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\"># 得到阿里支付的实例化对象</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    client <span class=\"token operator\">=</span> ali_pay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\"># 为 API 生成一个模板对象 初始化参数用的</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    model <span class=\"token operator\">=</span> AlipayTradePagePayModel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\"># 订单号</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    model<span class=\"token punctuation\">.</span>out_trade_no <span class=\"token operator\">=</span> <span class=\"token string\">\"pay\"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\"># 金额</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    model<span class=\"token punctuation\">.</span>total_amount <span class=\"token operator\">=</span> <span class=\"token number\">8888</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\"># 商品标题</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    model<span class=\"token punctuation\">.</span>subject <span class=\"token operator\">=</span> <span class=\"token string\">\"测试\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\"># 商品详细内容</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    model<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">\"支付宝测试\"</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\"># 销售产品码，与支付宝签约的产品码名称</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    model<span class=\"token punctuation\">.</span>product_code <span class=\"token operator\">=</span> <span class=\"token string\">\"FAST_INSTANT_TRADE_PAY\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\"># 实例化一个请求对象</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    request <span class=\"token operator\">=</span> AlipayTradePagePayRequest<span class=\"token punctuation\">(</span>biz_model<span class=\"token operator\">=</span>model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\"># get 请求 用户支付成功后返回的页面请求地址</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    request<span class=\"token punctuation\">.</span>return_url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://140.143.63.45:8000/alipay_handler\"</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\"># post 请求 用户支付成功通知商户的请求地址</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    request<span class=\"token punctuation\">.</span>notify_url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://140.143.63.45:8000/alipay_handler\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\"># 利用阿里支付对象发一个获得页面的请求 参数是 request</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>page_execute<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> http_method<span class=\"token operator\">=</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token keyword\">class</span> <span class=\"token class-name\">PayHandlerView</span><span class=\"token punctuation\">(</span>APIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token comment\"># return_url 的回调地址</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token comment\"># 用户支付成功之后回到哪</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"return_url测试\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 用户支付成功 在这里修改订单状态以及优惠券贝里等等情况</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"notify_url\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>views<span class=\"token punctuation\">.</span>py</pre></td></tr></table></figure>",
            "tags": [
                "Python",
                "Django",
                "Python"
            ]
        },
        {
            "id": "http://oreki.world/%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97celery/",
            "url": "http://oreki.world/%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97celery/",
            "title": "分布式消息队列celery",
            "date_published": "2020-04-21T13:23:38.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"celery基本原理\"><a class=\"anchor\" href=\"#celery基本原理\">#</a> celery 基本原理</h3><p>1、客户端也就是 python（django/flask 等）发布任务</p><p>2、发布的任务存到任务队列里面，可以以 redis、rabbitMQ、MessageQueue、MySQL 存储，一般在 django/flask 程序里 redis 居多</p><p>3、任务处理者会不断从任务队列里面获取任务执行</p><h3 id=\"celery设计\"><a class=\"anchor\" href=\"#celery设计\">#</a> Celery 设计</h3><p>celery 由五大模块实现。</p><ol><li><p>Task<br>就是任务，有异步任务和定时任务。</p></li><li><p>Broker<br>中间人，接收生产者发来的消息即 Task，将任务存入队列。任务的消费者是 Worker。Celery 本身不提供队列服务，推荐用 Redis 或 RabbitMQ 实现队列服务。</p></li><li><p>Worker<br>执行任务的单元，它实时监控消息队列，如果有任务就获取任务并执行它。</p></li><li><p>Beat<br>定时任务调度器，根据配置定时将任务发送给 Broler。</p></li><li><p>Backend<br>用于存储任务的执行结果。</p></li></ol><p><img data-src=\"%E7%BB%84%E6%88%90%E5%85%B3%E7%B3%BB.png\" alt=\"\"></p><h3 id=\"celery安装配置\"><a class=\"anchor\" href=\"#celery安装配置\">#</a> Celery 安装配置</h3><p>Celery 4.0 + 及以后版本不支持在 windows 系统上运行。如果你希望在 windows 系统上使用 celery, 有两种方法。<br>1. 安装 3.1.25 版本</p><pre><code>pip install celery==3.1.25\n</code></pre><p>2. 安装 gevent</p><pre><code>pip install gevent\n# 启动worker\ncelery -A &lt;module&gt; worker -l info -P gevent\n</code></pre><h3 id=\"简单案例\"><a class=\"anchor\" href=\"#简单案例\">#</a> 简单案例</h3><p>首先编写一个文件 <span class=\"exturl\" data-url=\"aHR0cDovL3huLS10YXNrMS1kcTFoMDE2YXV6YS5weQ==\">命名为 task1.py</span></p><pre><code class=\"language-Python\">from celery import Celery\napp = Celery('tasks',broker='redis://192.168.1.102:6379/0')\n# redis://192.168.1.102:6379/0 是redis数据库地址，无需账号密码验证，也是ssrf在获取内网系统权限的方式之一\n@app.task\ndef add(x,y):\n    print('传递 {} + {} = {}'.format(x,y,x+y))\n    return x+y\n</code></pre><p>然后启动 redis 数据库<br>接下来再 task1 文件夹执行命令</p><pre><code>celery -A task1 worker --loglevel=info\n</code></pre><p>就会看到消息队列都启动<br><img data-src=\"1.png\" alt=\"\"><br>到现在所有的队列都启动，可以向这个队列添加任务等待处理</p><p>方法是再 task1 目录下打开 cmd 窗口，进入 python 交互界面</p><pre><code class=\"language-Python\">from task1 import add\nadd.delay(6,12)\nadd.delay(6,6)\n</code></pre><p><img data-src=\"2.png\" alt=\"\"></p><h4 id=\"保存结果\"><a class=\"anchor\" href=\"#保存结果\">#</a> 保存结果</h4><p>上面只是一个发送任务的调用，结果是拿不到的。上面也没有接收返回值，这次把返回值保存到起来<br>修改 task1 内容</p><pre><code class=\"language-Python\">app = Celery('tasks',broker='redis://192.168.1.102:6379/0',backend='redis://192.168.1.102:6379/0')\n</code></pre><p>然后要重启 Worker，IDLE 也要重启<br>然后这样就能获取结果了</p><pre><code class=\"language-Python\">t = add.delay(1, 1)\nt.get()\n# 还可以设置超时时间 t.get(timeout=5)\n\n# 如果出错，获取错误结果，不触发异常\n# 使用命令t.get(propagate=False)    \n# t.traceback  （打印异常详细结果）\n\n# 还可以获取任务状态\n# t.ready() 返回True 或者False\n</code></pre><h3 id=\"在项目中使用celery\"><a class=\"anchor\" href=\"#在项目中使用celery\">#</a> 在项目中使用 celery</h3><p>可以把 celery 配置成一个应用，假设应用名字是 CeleryPro，目录格式如下：<br>CeleryPro<br>├─__init.py<br><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1jZWxlcnktMm43Y3BpLnB5\">├─celery.py</span><br><span class=\"exturl\" data-url=\"aHR0cDovL3huLS10YXNrcy0zMDlidWgucHk=\">├─tasks.py</span></p><p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1jZWxlcnktdnk3aTczY2N4eTg1YXkxNGY5eWpiOGZ0bzNlam94ZWxjYTA5N2JncTZhLnB5\">这里的连接文件命名必须为 celery.py</span>，其他名字随意</p><h4 id=\"celery文件\"><a class=\"anchor\" href=\"#celery文件\">#</a> celery 文件</h4><p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1jZWxlcnktb3Y3aW04Y2Mxd2ZxM2FnaW55MGJyejB3Zmp6YS5weQ==\">这个文件名必须是 celery.py</span>：</p><pre><code class=\"language-Python\">from __future__ import absolute_import, unicode_literals\nfrom celery import Celery\n\napp = Celery('CeleryPro',\n             broker='redis://192.168.1.102:6379',\n             backend='redis://192.168.1.102:6379',\n             include=['CeleryPro.tasks'])\napp.conf.update(\n    result_expires=3600,\n)\n\nif __name__ == '__main__':\n    app.start()\n</code></pre><h4 id=\"tasks文件\"><a class=\"anchor\" href=\"#tasks文件\">#</a> tasks 文件</h4><p>这个文件开始两行就多了一个点，这里要导入上面的 celery.py 文件。后面只要写各种任务加上装饰器就可以了：</p><pre><code class=\"language-Python\">from __future__ import absolute_import, unicode_literals\nfrom .celery import app\nimport time\n\n@app.task\ndef add(x, y):\n    print(&quot;计算2个值的和: %s %s&quot; % (x, y))\n    return x+y\n\n@app.task\ndef upper(v):\n    for i in range(10):\n        time.sleep(1)\n        print(i)\n    return v.upper()\n</code></pre><h4 id=\"启动worker\"><a class=\"anchor\" href=\"#启动worker\">#</a> 启动 worker</h4><p>这里注意用的都是 CeleryPro：</p><pre><code>celery -A CeleryPro worker -loglevel=info  # 前台启动不推荐\ncelery -A CeleryPro worker -l info  # 前台启动简写\ncelery multi start w1 -A  CeleryPro -l info  # 推荐用后台启动\n</code></pre><h4 id=\"定时任务\"><a class=\"anchor\" href=\"#定时任务\">#</a> 定时任务</h4><p>主要修改 celery.py 文件</p><pre><code class=\"language-Python\">from __future__ import absolute_import, unicode_literals\nfrom celery import Celery\nfrom celery.schedules import crontab\nfrom datetime import timedelta\n\napp = Celery('CeleryPro',\n             broker='redis://192.168.1.102',\n             backend='redis://192.168.1.102',\n             include=['CeleryPro.tasks'])\n\napp.conf.CELERYBEAT_SCHEDULE = {\n    'add every 10 seconds': {\n        'task': 'CeleryPro.tasks.add',\n        'schedule': timedelta(seconds=10),  \n        # 可以用timedelta对象\n        # 'schedule': 10,  # 也支持直接用数字表示秒数\n        'args': (1, 2)\n    },\n    'upper every 2 minutes': {\n        'task': 'CeleryPro.tasks.upper',\n        'schedule': crontab(minute='*/2'),\n        'args': ('abc', ),\n    },\n}\n\n# app.conf.CELERY_TIMEZONE = 'UTC'\napp.conf.CELERY_TIMEZONE = 'Asia/Shanghai'\n\n# Optional configuration, see the application user guide.\napp.conf.update(\n    CELERY_TASK_RESULT_EXPIRES=3600,\n)\n\nif __name__ == '__main__':\n    app.start()\n</code></pre><p>启动使用命令</p><pre><code>celery -A CeleryPro beat -l info\ncelery -A CeleryPro worker -l info\n</code></pre><h3 id=\"新例子\"><a class=\"anchor\" href=\"#新例子\">#</a> 新例子</h3><pre><code class=\"language-Python\"># tasks.py\n# coding:utf-8\nfrom celery import Celery,platforms\n\napp = Celery('tasks')\napp.config_from_object('config')\nplatforms.C_FORCE_ROOT = True\n\n@app.task\ndef add(x,y):\n    return x + y\n</code></pre><p>和另一个文件</p><pre><code class=\"language-Python\"># config.py\n# coding:utf-8\nfrom __future__ import absolute_import\nfrom celery.schedules import crontab\nfrom datetime import timedelta\n\nBROKER_URL = 'redis://127.0.0.1:6379/0'\n\nCELERYBEAT_SCHEDULE = {\n    'add-every-2-seconds': {\n        'task': 'tasks.add',\n        'schedule': timedelta(seconds=2),\n        'args': (16, 10),\n    },\n}\n\nCELERY_TIMEZONE = 'Asia/Shanghai'\n</code></pre><p>然后打开三个 cmd 窗口，依次输入：</p><pre><code>celery -A tasks beat -l info\ncelery -A tasks worker -l info\ncelery -A tasks flower\n</code></pre><p>然后访问本地 5555 端口即可～</p><h4 id=\"查看异步任务情况\"><a class=\"anchor\" href=\"#查看异步任务情况\">#</a> 查看异步任务情况</h4><p>Celery 提供了一个工具 flower，将各个任务的执行情况、各个 worker 的健康状态进行监控并以可视化的方式展现</p><p>安装 flower:</p><pre><code>pip install flower\n</code></pre><p>启动 flower（默认会启动一个 webserver，端口为 5555）</p><p>在另一个 Terminal 中：</p><pre><code>celery -A task1 flower\n</code></pre><p>这里的 task1 是上面创建的 py 文件</p><p>进入</p><pre><code>http://localhost:5555\n</code></pre><p>查看</p>",
            "tags": [
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://oreki.world/pyqt5%E6%96%87%E6%9C%AC%E9%AB%98%E4%BA%AE/",
            "url": "http://oreki.world/pyqt5%E6%96%87%E6%9C%AC%E9%AB%98%E4%BA%AE/",
            "title": "pyqt5文本高亮",
            "date_published": "2020-04-15T08:12:03.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MainWindow</span><span class=\"token punctuation\">(</span>QMainWindow<span class=\"token punctuation\">,</span> Ui_MainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> Qmodelidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>filePath<span class=\"token punctuation\">(</span>Qmodelidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\"># 打开 utf-8 格式的文件，遇到出错进行忽略</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\"># filename 返回值为 ('C:/PyQt5/PyQt1.py', 'All Files (*)') 是一个元组，但 with...open... 只需要提供一个文件的地址而已，故输入参数 filename [0]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\"># 读取所选择的文件名，并将文本编辑小部件的内容设置为文件读取的内容。这里提一下使用 with 语句来自动帮我们调用 close ()</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\"># 方法，避免由于文件读写时产生 IOError，导致 close ()</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\"># 不会调用，需要 try...finally 来实现的不便。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将文件读取出来</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        self<span class=\"token punctuation\">.</span>textEdit<span class=\"token punctuation\">.</span>setPlainText<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将读取到的内容放到 textEdit 小部件中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'def'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'import'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'from'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'print'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 高亮的关键字</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> li<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            text <span class=\"token operator\">=</span> i</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> text<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            col <span class=\"token operator\">=</span> QColor<span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 置为橙色</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            fmt <span class=\"token operator\">=</span> QTextCharFormat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            fmt<span class=\"token punctuation\">.</span>setForeground<span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\"># 先把光标移动到开头</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            self<span class=\"token punctuation\">.</span>textEdit<span class=\"token punctuation\">.</span>moveCursor<span class=\"token punctuation\">(</span>QTextCursor<span class=\"token punctuation\">.</span>Start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>textEdit<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> QTextDocument<span class=\"token punctuation\">.</span>FindWholeWords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 查找所有文字</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                self<span class=\"token punctuation\">.</span>mergeFormatOnWordOrSelection<span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">mergeFormatOnWordOrSelection</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        cursor <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>textEdit<span class=\"token punctuation\">.</span>textCursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> cursor<span class=\"token punctuation\">.</span>hasSelection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            cursor<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>QTextCursor<span class=\"token punctuation\">.</span>WordUnderCursor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        cursor<span class=\"token punctuation\">.</span>mergeCharFormat<span class=\"token punctuation\">(</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        self<span class=\"token punctuation\">.</span>textEdit<span class=\"token punctuation\">.</span>mergeCurrentCharFormat<span class=\"token punctuation\">(</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Python",
                "Pyqt5",
                "Python"
            ]
        }
    ]
}